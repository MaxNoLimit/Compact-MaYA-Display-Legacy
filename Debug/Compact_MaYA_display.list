
Compact_MaYA_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002018  08008c80  08008c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000119c  0800ac98  0800ac98  0000bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000044  0800be34  0800be34  0000ce34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800be78  0800be78  0000d07c  2**0
                  CONTENTS
  6 .ARM          00000008  0800be78  0800be78  0000ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800be80  0800be80  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000010  0800be80  0800be80  0000ce80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000007c  20000000  0800be94  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005d8  2000007c  0800bf10  0000d07c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000654  0800bf10  0000d654  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001eb75  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005afc  00000000  00000000  0002bc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  00031720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c9c  00000000  00000000  00032850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001921e  00000000  00000000  000334ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016c1d  00000000  00000000  0004c70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000949de  00000000  00000000  00063327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  000f7d05  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000505c  00000000  00000000  000f7dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  000fce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c68 	.word	0x08008c68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008c68 	.word	0x08008c68

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	@ 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b988 	b.w	8000be4 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	468e      	mov	lr, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	4688      	mov	r8, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d14a      	bne.n	8000992 <__udivmoddi4+0xa6>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4617      	mov	r7, r2
 8000900:	d962      	bls.n	80009c8 <__udivmoddi4+0xdc>
 8000902:	fab2 f682 	clz	r6, r2
 8000906:	b14e      	cbz	r6, 800091c <__udivmoddi4+0x30>
 8000908:	f1c6 0320 	rsb	r3, r6, #32
 800090c:	fa01 f806 	lsl.w	r8, r1, r6
 8000910:	fa20 f303 	lsr.w	r3, r0, r3
 8000914:	40b7      	lsls	r7, r6
 8000916:	ea43 0808 	orr.w	r8, r3, r8
 800091a:	40b4      	lsls	r4, r6
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fbb8 f1fe 	udiv	r1, r8, lr
 8000928:	0c23      	lsrs	r3, r4, #16
 800092a:	fb0e 8811 	mls	r8, lr, r1, r8
 800092e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000932:	fb01 f20c 	mul.w	r2, r1, ip
 8000936:	429a      	cmp	r2, r3
 8000938:	d909      	bls.n	800094e <__udivmoddi4+0x62>
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000940:	f080 80ea 	bcs.w	8000b18 <__udivmoddi4+0x22c>
 8000944:	429a      	cmp	r2, r3
 8000946:	f240 80e7 	bls.w	8000b18 <__udivmoddi4+0x22c>
 800094a:	3902      	subs	r1, #2
 800094c:	443b      	add	r3, r7
 800094e:	1a9a      	subs	r2, r3, r2
 8000950:	b2a3      	uxth	r3, r4
 8000952:	fbb2 f0fe 	udiv	r0, r2, lr
 8000956:	fb0e 2210 	mls	r2, lr, r0, r2
 800095a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800095e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000962:	459c      	cmp	ip, r3
 8000964:	d909      	bls.n	800097a <__udivmoddi4+0x8e>
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	f100 32ff 	add.w	r2, r0, #4294967295
 800096c:	f080 80d6 	bcs.w	8000b1c <__udivmoddi4+0x230>
 8000970:	459c      	cmp	ip, r3
 8000972:	f240 80d3 	bls.w	8000b1c <__udivmoddi4+0x230>
 8000976:	443b      	add	r3, r7
 8000978:	3802      	subs	r0, #2
 800097a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800097e:	eba3 030c 	sub.w	r3, r3, ip
 8000982:	2100      	movs	r1, #0
 8000984:	b11d      	cbz	r5, 800098e <__udivmoddi4+0xa2>
 8000986:	40f3      	lsrs	r3, r6
 8000988:	2200      	movs	r2, #0
 800098a:	e9c5 3200 	strd	r3, r2, [r5]
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	428b      	cmp	r3, r1
 8000994:	d905      	bls.n	80009a2 <__udivmoddi4+0xb6>
 8000996:	b10d      	cbz	r5, 800099c <__udivmoddi4+0xb0>
 8000998:	e9c5 0100 	strd	r0, r1, [r5]
 800099c:	2100      	movs	r1, #0
 800099e:	4608      	mov	r0, r1
 80009a0:	e7f5      	b.n	800098e <__udivmoddi4+0xa2>
 80009a2:	fab3 f183 	clz	r1, r3
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d146      	bne.n	8000a38 <__udivmoddi4+0x14c>
 80009aa:	4573      	cmp	r3, lr
 80009ac:	d302      	bcc.n	80009b4 <__udivmoddi4+0xc8>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f200 8105 	bhi.w	8000bbe <__udivmoddi4+0x2d2>
 80009b4:	1a84      	subs	r4, r0, r2
 80009b6:	eb6e 0203 	sbc.w	r2, lr, r3
 80009ba:	2001      	movs	r0, #1
 80009bc:	4690      	mov	r8, r2
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0e5      	beq.n	800098e <__udivmoddi4+0xa2>
 80009c2:	e9c5 4800 	strd	r4, r8, [r5]
 80009c6:	e7e2      	b.n	800098e <__udivmoddi4+0xa2>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	f000 8090 	beq.w	8000aee <__udivmoddi4+0x202>
 80009ce:	fab2 f682 	clz	r6, r2
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	f040 80a4 	bne.w	8000b20 <__udivmoddi4+0x234>
 80009d8:	1a8a      	subs	r2, r1, r2
 80009da:	0c03      	lsrs	r3, r0, #16
 80009dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009e0:	b280      	uxth	r0, r0
 80009e2:	b2bc      	uxth	r4, r7
 80009e4:	2101      	movs	r1, #1
 80009e6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ea:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009f2:	fb04 f20c 	mul.w	r2, r4, ip
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d907      	bls.n	8000a0a <__udivmoddi4+0x11e>
 80009fa:	18fb      	adds	r3, r7, r3
 80009fc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x11c>
 8000a02:	429a      	cmp	r2, r3
 8000a04:	f200 80e0 	bhi.w	8000bc8 <__udivmoddi4+0x2dc>
 8000a08:	46c4      	mov	ip, r8
 8000a0a:	1a9b      	subs	r3, r3, r2
 8000a0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a18:	fb02 f404 	mul.w	r4, r2, r4
 8000a1c:	429c      	cmp	r4, r3
 8000a1e:	d907      	bls.n	8000a30 <__udivmoddi4+0x144>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a26:	d202      	bcs.n	8000a2e <__udivmoddi4+0x142>
 8000a28:	429c      	cmp	r4, r3
 8000a2a:	f200 80ca 	bhi.w	8000bc2 <__udivmoddi4+0x2d6>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	1b1b      	subs	r3, r3, r4
 8000a32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a36:	e7a5      	b.n	8000984 <__udivmoddi4+0x98>
 8000a38:	f1c1 0620 	rsb	r6, r1, #32
 8000a3c:	408b      	lsls	r3, r1
 8000a3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a42:	431f      	orrs	r7, r3
 8000a44:	fa0e f401 	lsl.w	r4, lr, r1
 8000a48:	fa20 f306 	lsr.w	r3, r0, r6
 8000a4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a54:	4323      	orrs	r3, r4
 8000a56:	fa00 f801 	lsl.w	r8, r0, r1
 8000a5a:	fa1f fc87 	uxth.w	ip, r7
 8000a5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a62:	0c1c      	lsrs	r4, r3, #16
 8000a64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	fa02 f201 	lsl.w	r2, r2, r1
 8000a76:	d909      	bls.n	8000a8c <__udivmoddi4+0x1a0>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a7e:	f080 809c 	bcs.w	8000bba <__udivmoddi4+0x2ce>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f240 8099 	bls.w	8000bba <__udivmoddi4+0x2ce>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	443c      	add	r4, r7
 8000a8c:	eba4 040e 	sub.w	r4, r4, lr
 8000a90:	fa1f fe83 	uxth.w	lr, r3
 8000a94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a98:	fb09 4413 	mls	r4, r9, r3, r4
 8000a9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000aa0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aa4:	45a4      	cmp	ip, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x1ce>
 8000aa8:	193c      	adds	r4, r7, r4
 8000aaa:	f103 3eff 	add.w	lr, r3, #4294967295
 8000aae:	f080 8082 	bcs.w	8000bb6 <__udivmoddi4+0x2ca>
 8000ab2:	45a4      	cmp	ip, r4
 8000ab4:	d97f      	bls.n	8000bb6 <__udivmoddi4+0x2ca>
 8000ab6:	3b02      	subs	r3, #2
 8000ab8:	443c      	add	r4, r7
 8000aba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000abe:	eba4 040c 	sub.w	r4, r4, ip
 8000ac2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ac6:	4564      	cmp	r4, ip
 8000ac8:	4673      	mov	r3, lr
 8000aca:	46e1      	mov	r9, ip
 8000acc:	d362      	bcc.n	8000b94 <__udivmoddi4+0x2a8>
 8000ace:	d05f      	beq.n	8000b90 <__udivmoddi4+0x2a4>
 8000ad0:	b15d      	cbz	r5, 8000aea <__udivmoddi4+0x1fe>
 8000ad2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ad6:	eb64 0409 	sbc.w	r4, r4, r9
 8000ada:	fa04 f606 	lsl.w	r6, r4, r6
 8000ade:	fa22 f301 	lsr.w	r3, r2, r1
 8000ae2:	431e      	orrs	r6, r3
 8000ae4:	40cc      	lsrs	r4, r1
 8000ae6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aea:	2100      	movs	r1, #0
 8000aec:	e74f      	b.n	800098e <__udivmoddi4+0xa2>
 8000aee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000af2:	0c01      	lsrs	r1, r0, #16
 8000af4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000af8:	b280      	uxth	r0, r0
 8000afa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000afe:	463b      	mov	r3, r7
 8000b00:	4638      	mov	r0, r7
 8000b02:	463c      	mov	r4, r7
 8000b04:	46b8      	mov	r8, r7
 8000b06:	46be      	mov	lr, r7
 8000b08:	2620      	movs	r6, #32
 8000b0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b0e:	eba2 0208 	sub.w	r2, r2, r8
 8000b12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b16:	e766      	b.n	80009e6 <__udivmoddi4+0xfa>
 8000b18:	4601      	mov	r1, r0
 8000b1a:	e718      	b.n	800094e <__udivmoddi4+0x62>
 8000b1c:	4610      	mov	r0, r2
 8000b1e:	e72c      	b.n	800097a <__udivmoddi4+0x8e>
 8000b20:	f1c6 0220 	rsb	r2, r6, #32
 8000b24:	fa2e f302 	lsr.w	r3, lr, r2
 8000b28:	40b7      	lsls	r7, r6
 8000b2a:	40b1      	lsls	r1, r6
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b34:	430a      	orrs	r2, r1
 8000b36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b3a:	b2bc      	uxth	r4, r7
 8000b3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b40:	0c11      	lsrs	r1, r2, #16
 8000b42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b46:	fb08 f904 	mul.w	r9, r8, r4
 8000b4a:	40b0      	lsls	r0, r6
 8000b4c:	4589      	cmp	r9, r1
 8000b4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b52:	b280      	uxth	r0, r0
 8000b54:	d93e      	bls.n	8000bd4 <__udivmoddi4+0x2e8>
 8000b56:	1879      	adds	r1, r7, r1
 8000b58:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b5c:	d201      	bcs.n	8000b62 <__udivmoddi4+0x276>
 8000b5e:	4589      	cmp	r9, r1
 8000b60:	d81f      	bhi.n	8000ba2 <__udivmoddi4+0x2b6>
 8000b62:	eba1 0109 	sub.w	r1, r1, r9
 8000b66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b6a:	fb09 f804 	mul.w	r8, r9, r4
 8000b6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b72:	b292      	uxth	r2, r2
 8000b74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b78:	4542      	cmp	r2, r8
 8000b7a:	d229      	bcs.n	8000bd0 <__udivmoddi4+0x2e4>
 8000b7c:	18ba      	adds	r2, r7, r2
 8000b7e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b82:	d2c4      	bcs.n	8000b0e <__udivmoddi4+0x222>
 8000b84:	4542      	cmp	r2, r8
 8000b86:	d2c2      	bcs.n	8000b0e <__udivmoddi4+0x222>
 8000b88:	f1a9 0102 	sub.w	r1, r9, #2
 8000b8c:	443a      	add	r2, r7
 8000b8e:	e7be      	b.n	8000b0e <__udivmoddi4+0x222>
 8000b90:	45f0      	cmp	r8, lr
 8000b92:	d29d      	bcs.n	8000ad0 <__udivmoddi4+0x1e4>
 8000b94:	ebbe 0302 	subs.w	r3, lr, r2
 8000b98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b9c:	3801      	subs	r0, #1
 8000b9e:	46e1      	mov	r9, ip
 8000ba0:	e796      	b.n	8000ad0 <__udivmoddi4+0x1e4>
 8000ba2:	eba7 0909 	sub.w	r9, r7, r9
 8000ba6:	4449      	add	r1, r9
 8000ba8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000bac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bb0:	fb09 f804 	mul.w	r8, r9, r4
 8000bb4:	e7db      	b.n	8000b6e <__udivmoddi4+0x282>
 8000bb6:	4673      	mov	r3, lr
 8000bb8:	e77f      	b.n	8000aba <__udivmoddi4+0x1ce>
 8000bba:	4650      	mov	r0, sl
 8000bbc:	e766      	b.n	8000a8c <__udivmoddi4+0x1a0>
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	e6fd      	b.n	80009be <__udivmoddi4+0xd2>
 8000bc2:	443b      	add	r3, r7
 8000bc4:	3a02      	subs	r2, #2
 8000bc6:	e733      	b.n	8000a30 <__udivmoddi4+0x144>
 8000bc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	e71c      	b.n	8000a0a <__udivmoddi4+0x11e>
 8000bd0:	4649      	mov	r1, r9
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x222>
 8000bd4:	eba1 0109 	sub.w	r1, r1, r9
 8000bd8:	46c4      	mov	ip, r8
 8000bda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bde:	fb09 f804 	mul.w	r8, r9, r4
 8000be2:	e7c4      	b.n	8000b6e <__udivmoddi4+0x282>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <displayInputCheck>:
		}
		clearMessage();
	}
}

void displayInputCheck() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09c      	sub	sp, #112	@ 0x70
 8000bec:	af00      	add	r7, sp, #0
	if (ILI9341_TouchGetCoordinates(&x, &y)) {
 8000bee:	4992      	ldr	r1, [pc, #584]	@ (8000e38 <displayInputCheck+0x250>)
 8000bf0:	4892      	ldr	r0, [pc, #584]	@ (8000e3c <displayInputCheck+0x254>)
 8000bf2:	f001 f835 	bl	8001c60 <ILI9341_TouchGetCoordinates>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 81b0 	beq.w	8000f5e <displayInputCheck+0x376>
		x = 240 - x; // optional honestly, just to swap the pixel position
 8000bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8000e3c <displayInputCheck+0x254>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b8c      	ldr	r3, [pc, #560]	@ (8000e3c <displayInputCheck+0x254>)
 8000c0a:	801a      	strh	r2, [r3, #0]
//		debug function
//		sendDebugMessage("x: %d, y: %d\r\n", x, y);
		switch (pageRoute) {
 8000c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8000e40 <displayInputCheck+0x258>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	f200 819b 	bhi.w	8000f4c <displayInputCheck+0x364>
 8000c16:	a201      	add	r2, pc, #4	@ (adr r2, 8000c1c <displayInputCheck+0x34>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c2d 	.word	0x08000c2d
 8000c20:	08000cc1 	.word	0x08000cc1
 8000c24:	08000d63 	.word	0x08000d63
 8000c28:	08000f21 	.word	0x08000f21
		case MENU_PAGE:
			if (x > 10 && x < 230 && y > 80 - 1 && y < 120 + 1) {
 8000c2c:	4b83      	ldr	r3, [pc, #524]	@ (8000e3c <displayInputCheck+0x254>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	2b0a      	cmp	r3, #10
 8000c32:	d914      	bls.n	8000c5e <displayInputCheck+0x76>
 8000c34:	4b81      	ldr	r3, [pc, #516]	@ (8000e3c <displayInputCheck+0x254>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	2be5      	cmp	r3, #229	@ 0xe5
 8000c3a:	d810      	bhi.n	8000c5e <displayInputCheck+0x76>
 8000c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e38 <displayInputCheck+0x250>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	2b4f      	cmp	r3, #79	@ 0x4f
 8000c42:	d90c      	bls.n	8000c5e <displayInputCheck+0x76>
 8000c44:	4b7c      	ldr	r3, [pc, #496]	@ (8000e38 <displayInputCheck+0x250>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2b78      	cmp	r3, #120	@ 0x78
 8000c4a:	d808      	bhi.n	8000c5e <displayInputCheck+0x76>
				pageRoute = PLAYING_PAGE;
 8000c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8000e40 <displayInputCheck+0x258>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
				playingPage();
 8000c52:	f001 fc03 	bl	800245c <playingPage>
				sendDebugMessage("PlayTheShow");
 8000c56:	487b      	ldr	r0, [pc, #492]	@ (8000e44 <displayInputCheck+0x25c>)
 8000c58:	f002 f840 	bl	8002cdc <sendDebugMessage>
 8000c5c:	e02f      	b.n	8000cbe <displayInputCheck+0xd6>
			} else if (x > 10 && x < 230 && y > 150 - 1 && y < 170 + 1) {
 8000c5e:	4b77      	ldr	r3, [pc, #476]	@ (8000e3c <displayInputCheck+0x254>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	2b0a      	cmp	r3, #10
 8000c64:	d911      	bls.n	8000c8a <displayInputCheck+0xa2>
 8000c66:	4b75      	ldr	r3, [pc, #468]	@ (8000e3c <displayInputCheck+0x254>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	2be5      	cmp	r3, #229	@ 0xe5
 8000c6c:	d80d      	bhi.n	8000c8a <displayInputCheck+0xa2>
 8000c6e:	4b72      	ldr	r3, [pc, #456]	@ (8000e38 <displayInputCheck+0x250>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	2b95      	cmp	r3, #149	@ 0x95
 8000c74:	d909      	bls.n	8000c8a <displayInputCheck+0xa2>
 8000c76:	4b70      	ldr	r3, [pc, #448]	@ (8000e38 <displayInputCheck+0x250>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2baa      	cmp	r3, #170	@ 0xaa
 8000c7c:	d805      	bhi.n	8000c8a <displayInputCheck+0xa2>
				pageRoute = CALIBRATE_PAGE;
 8000c7e:	4b70      	ldr	r3, [pc, #448]	@ (8000e40 <displayInputCheck+0x258>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	601a      	str	r2, [r3, #0]
				calibratePage();
 8000c84:	f001 fc42 	bl	800250c <calibratePage>
 8000c88:	e019      	b.n	8000cbe <displayInputCheck+0xd6>
			} else if (x > 10 && x < 230 && y > 180 - 1 && y < 220 + 1) {
 8000c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8000e3c <displayInputCheck+0x254>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	f240 815e 	bls.w	8000f50 <displayInputCheck+0x368>
 8000c94:	4b69      	ldr	r3, [pc, #420]	@ (8000e3c <displayInputCheck+0x254>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2be5      	cmp	r3, #229	@ 0xe5
 8000c9a:	f200 8159 	bhi.w	8000f50 <displayInputCheck+0x368>
 8000c9e:	4b66      	ldr	r3, [pc, #408]	@ (8000e38 <displayInputCheck+0x250>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	2bb3      	cmp	r3, #179	@ 0xb3
 8000ca4:	f240 8154 	bls.w	8000f50 <displayInputCheck+0x368>
 8000ca8:	4b63      	ldr	r3, [pc, #396]	@ (8000e38 <displayInputCheck+0x250>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	2bdc      	cmp	r3, #220	@ 0xdc
 8000cae:	f200 814f 	bhi.w	8000f50 <displayInputCheck+0x368>
				pageRoute = SETTINGS_PAGE;
 8000cb2:	4b63      	ldr	r3, [pc, #396]	@ (8000e40 <displayInputCheck+0x258>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	601a      	str	r2, [r3, #0]
				settingsPage();
 8000cb8:	f001 fc9a 	bl	80025f0 <settingsPage>
			}
			break;
 8000cbc:	e148      	b.n	8000f50 <displayInputCheck+0x368>
 8000cbe:	e147      	b.n	8000f50 <displayInputCheck+0x368>
		case PLAYING_PAGE:
			if (x > 0 && x < 46 && y > 0 && y < 36) {
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e3c <displayInputCheck+0x254>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d01b      	beq.n	8000d00 <displayInputCheck+0x118>
 8000cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8000e3c <displayInputCheck+0x254>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	2b2d      	cmp	r3, #45	@ 0x2d
 8000cce:	d817      	bhi.n	8000d00 <displayInputCheck+0x118>
 8000cd0:	4b59      	ldr	r3, [pc, #356]	@ (8000e38 <displayInputCheck+0x250>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d013      	beq.n	8000d00 <displayInputCheck+0x118>
 8000cd8:	4b57      	ldr	r3, [pc, #348]	@ (8000e38 <displayInputCheck+0x250>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b23      	cmp	r3, #35	@ 0x23
 8000cde:	d80f      	bhi.n	8000d00 <displayInputCheck+0x118>
				// Go back widget, will pause the show
				pageRoute = MENU_PAGE;
 8000ce0:	4b57      	ldr	r3, [pc, #348]	@ (8000e40 <displayInputCheck+0x258>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
				menuPage();
 8000ce6:	f001 faf9 	bl	80022dc <menuPage>
				sendDebugMessage("PauseTheShow");
 8000cea:	4857      	ldr	r0, [pc, #348]	@ (8000e48 <displayInputCheck+0x260>)
 8000cec:	f001 fff6 	bl	8002cdc <sendDebugMessage>
				message("Show paused!");
 8000cf0:	4856      	ldr	r0, [pc, #344]	@ (8000e4c <displayInputCheck+0x264>)
 8000cf2:	f001 fb63 	bl	80023bc <message>
				HAL_Delay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cfa:	f002 f909 	bl	8002f10 <HAL_Delay>
				HAL_Delay(1000);
				clearMessage();
				pageRoute = MENU_PAGE;
				menuPage();
			}
			break;
 8000cfe:	e129      	b.n	8000f54 <displayInputCheck+0x36c>
			} else if (x > 10 && x < 230 && y > 80 - 1 && y < 120 + 1) {
 8000d00:	4b4e      	ldr	r3, [pc, #312]	@ (8000e3c <displayInputCheck+0x254>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	2b0a      	cmp	r3, #10
 8000d06:	f240 8125 	bls.w	8000f54 <displayInputCheck+0x36c>
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e3c <displayInputCheck+0x254>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2be5      	cmp	r3, #229	@ 0xe5
 8000d10:	f200 8120 	bhi.w	8000f54 <displayInputCheck+0x36c>
 8000d14:	4b48      	ldr	r3, [pc, #288]	@ (8000e38 <displayInputCheck+0x250>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b4f      	cmp	r3, #79	@ 0x4f
 8000d1a:	f240 811b 	bls.w	8000f54 <displayInputCheck+0x36c>
 8000d1e:	4b46      	ldr	r3, [pc, #280]	@ (8000e38 <displayInputCheck+0x250>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	2b78      	cmp	r3, #120	@ 0x78
 8000d24:	f200 8116 	bhi.w	8000f54 <displayInputCheck+0x36c>
				clearMessage();
 8000d28:	f001 fb74 	bl	8002414 <clearMessage>
				message("Aborting...");
 8000d2c:	4848      	ldr	r0, [pc, #288]	@ (8000e50 <displayInputCheck+0x268>)
 8000d2e:	f001 fb45 	bl	80023bc <message>
				sendDebugMessage("AbortTheShow");
 8000d32:	4848      	ldr	r0, [pc, #288]	@ (8000e54 <displayInputCheck+0x26c>)
 8000d34:	f001 ffd2 	bl	8002cdc <sendDebugMessage>
				HAL_Delay(2000);
 8000d38:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d3c:	f002 f8e8 	bl	8002f10 <HAL_Delay>
				clearMessage();
 8000d40:	f001 fb68 	bl	8002414 <clearMessage>
				message("Aborted!");
 8000d44:	4844      	ldr	r0, [pc, #272]	@ (8000e58 <displayInputCheck+0x270>)
 8000d46:	f001 fb39 	bl	80023bc <message>
				HAL_Delay(1000);
 8000d4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d4e:	f002 f8df 	bl	8002f10 <HAL_Delay>
				clearMessage();
 8000d52:	f001 fb5f 	bl	8002414 <clearMessage>
				pageRoute = MENU_PAGE;
 8000d56:	4b3a      	ldr	r3, [pc, #232]	@ (8000e40 <displayInputCheck+0x258>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
				menuPage();
 8000d5c:	f001 fabe 	bl	80022dc <menuPage>
			break;
 8000d60:	e0f8      	b.n	8000f54 <displayInputCheck+0x36c>
		case CALIBRATE_PAGE:
			if (x > 0 && x < 46 && y > 0 && y < 36) {
 8000d62:	4b36      	ldr	r3, [pc, #216]	@ (8000e3c <displayInputCheck+0x254>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d011      	beq.n	8000d8e <displayInputCheck+0x1a6>
 8000d6a:	4b34      	ldr	r3, [pc, #208]	@ (8000e3c <displayInputCheck+0x254>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8000d70:	d80d      	bhi.n	8000d8e <displayInputCheck+0x1a6>
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <displayInputCheck+0x250>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d009      	beq.n	8000d8e <displayInputCheck+0x1a6>
 8000d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <displayInputCheck+0x250>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	2b23      	cmp	r3, #35	@ 0x23
 8000d80:	d805      	bhi.n	8000d8e <displayInputCheck+0x1a6>
				pageRoute = MENU_PAGE;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <displayInputCheck+0x258>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
				menuPage();
 8000d88:	f001 faa8 	bl	80022dc <menuPage>
 8000d8c:	e0c7      	b.n	8000f1e <displayInputCheck+0x336>
			} else if (x > 10 && x < 230 && y > 80 - 1 && y < 120 + 1) {
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e3c <displayInputCheck+0x254>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	2b0a      	cmp	r3, #10
 8000d94:	d970      	bls.n	8000e78 <displayInputCheck+0x290>
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <displayInputCheck+0x254>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2be5      	cmp	r3, #229	@ 0xe5
 8000d9c:	d86c      	bhi.n	8000e78 <displayInputCheck+0x290>
 8000d9e:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <displayInputCheck+0x250>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	2b4f      	cmp	r3, #79	@ 0x4f
 8000da4:	d968      	bls.n	8000e78 <displayInputCheck+0x290>
 8000da6:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <displayInputCheck+0x250>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	2b78      	cmp	r3, #120	@ 0x78
 8000dac:	d864      	bhi.n	8000e78 <displayInputCheck+0x290>
				clearMessage();
 8000dae:	f001 fb31 	bl	8002414 <clearMessage>
				message("Please wait");
 8000db2:	482a      	ldr	r0, [pc, #168]	@ (8000e5c <displayInputCheck+0x274>)
 8000db4:	f001 fb02 	bl	80023bc <message>
				messageDetail("V-Slot Linear");
 8000db8:	4829      	ldr	r0, [pc, #164]	@ (8000e60 <displayInputCheck+0x278>)
 8000dba:	f001 fb15 	bl	80023e8 <messageDetail>
				sendDebugMessage("VSlotCalibration");
 8000dbe:	4829      	ldr	r0, [pc, #164]	@ (8000e64 <displayInputCheck+0x27c>)
 8000dc0:	f001 ff8c 	bl	8002cdc <sendDebugMessage>
				flushUART();
 8000dc4:	f001 ffba 	bl	8002d3c <flushUART>

				HAL_UART_Transmit(&huart2, (uint8_t*) '\n', 1, HAL_MAX_DELAY);
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	2201      	movs	r2, #1
 8000dce:	210a      	movs	r1, #10
 8000dd0:	4825      	ldr	r0, [pc, #148]	@ (8000e68 <displayInputCheck+0x280>)
 8000dd2:	f004 f9e9 	bl	80051a8 <HAL_UART_Transmit>
				// Input check
				while(1){
					const char* recv_buff = receivedMessageBuffer();
 8000dd6:	f001 ffbf 	bl	8002d58 <receivedMessageBuffer>
 8000dda:	66f8      	str	r0, [r7, #108]	@ 0x6c
					if (strcmp(recv_buff, "VSDone") == 0) {
 8000ddc:	4923      	ldr	r1, [pc, #140]	@ (8000e6c <displayInputCheck+0x284>)
 8000dde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000de0:	f7ff f9fe 	bl	80001e0 <strcmp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d11e      	bne.n	8000e28 <displayInputCheck+0x240>
						char feedback_buffer[100];
						sprintf(feedback_buffer, "Message accepted: %s\n",
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000dee:	4920      	ldr	r1, [pc, #128]	@ (8000e70 <displayInputCheck+0x288>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 fed1 	bl	8007b98 <siprintf>
								recv_buff);
						HAL_UART_Transmit(&huart2, (uint8_t*) feedback_buffer,
								strlen((const char*) feedback_buffer),
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9fb 	bl	80001f4 <strlen>
 8000dfe:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) feedback_buffer,
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	1d39      	adds	r1, r7, #4
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <displayInputCheck+0x280>)
 8000e0a:	f004 f9cd 	bl	80051a8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						break;
 8000e0e:	bf00      	nop
					}
					HAL_UART_Transmit(&huart2, (uint8_t*) '\0', 1,
					HAL_MAX_DELAY);
				}

				clearMessage();
 8000e10:	f001 fb00 	bl	8002414 <clearMessage>
				message("Okay!");
 8000e14:	4817      	ldr	r0, [pc, #92]	@ (8000e74 <displayInputCheck+0x28c>)
 8000e16:	f001 fad1 	bl	80023bc <message>
				HAL_Delay(1000);
 8000e1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e1e:	f002 f877 	bl	8002f10 <HAL_Delay>
				clearMessage();
 8000e22:	f001 faf7 	bl	8002414 <clearMessage>
 8000e26:	e07a      	b.n	8000f1e <displayInputCheck+0x336>
					HAL_UART_Transmit(&huart2, (uint8_t*) '\0', 1,
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2100      	movs	r1, #0
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <displayInputCheck+0x280>)
 8000e32:	f004 f9b9 	bl	80051a8 <HAL_UART_Transmit>
				while(1){
 8000e36:	e7ce      	b.n	8000dd6 <displayInputCheck+0x1ee>
 8000e38:	2000009a 	.word	0x2000009a
 8000e3c:	20000098 	.word	0x20000098
 8000e40:	2000009c 	.word	0x2000009c
 8000e44:	08008c9c 	.word	0x08008c9c
 8000e48:	08008ca8 	.word	0x08008ca8
 8000e4c:	08008cb8 	.word	0x08008cb8
 8000e50:	08008cc8 	.word	0x08008cc8
 8000e54:	08008cd4 	.word	0x08008cd4
 8000e58:	08008ce4 	.word	0x08008ce4
 8000e5c:	08008cf0 	.word	0x08008cf0
 8000e60:	08008cfc 	.word	0x08008cfc
 8000e64:	08008d0c 	.word	0x08008d0c
 8000e68:	200001b8 	.word	0x200001b8
 8000e6c:	08008d20 	.word	0x08008d20
 8000e70:	08008d28 	.word	0x08008d28
 8000e74:	08008d40 	.word	0x08008d40

			} else if (x > 10 && x < 230 && y > 130 - 1 && y < 170 + 1) {
 8000e78:	4b3b      	ldr	r3, [pc, #236]	@ (8000f68 <displayInputCheck+0x380>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	2b0a      	cmp	r3, #10
 8000e7e:	d96b      	bls.n	8000f58 <displayInputCheck+0x370>
 8000e80:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <displayInputCheck+0x380>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2be5      	cmp	r3, #229	@ 0xe5
 8000e86:	d867      	bhi.n	8000f58 <displayInputCheck+0x370>
 8000e88:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <displayInputCheck+0x384>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	2b81      	cmp	r3, #129	@ 0x81
 8000e8e:	d963      	bls.n	8000f58 <displayInputCheck+0x370>
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <displayInputCheck+0x384>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	2baa      	cmp	r3, #170	@ 0xaa
 8000e96:	d85f      	bhi.n	8000f58 <displayInputCheck+0x370>
				message("Please wait");
 8000e98:	4835      	ldr	r0, [pc, #212]	@ (8000f70 <displayInputCheck+0x388>)
 8000e9a:	f001 fa8f 	bl	80023bc <message>
				messageDetail("Wayang's Hand");
 8000e9e:	4835      	ldr	r0, [pc, #212]	@ (8000f74 <displayInputCheck+0x38c>)
 8000ea0:	f001 faa2 	bl	80023e8 <messageDetail>
				sendDebugMessage("WayangServo");
 8000ea4:	4834      	ldr	r0, [pc, #208]	@ (8000f78 <displayInputCheck+0x390>)
 8000ea6:	f001 ff19 	bl	8002cdc <sendDebugMessage>
				flushUART();
 8000eaa:	f001 ff47 	bl	8002d3c <flushUART>

				HAL_UART_Transmit(&huart2, (uint8_t*) '\n', 1, HAL_MAX_DELAY);
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	210a      	movs	r1, #10
 8000eb6:	4831      	ldr	r0, [pc, #196]	@ (8000f7c <displayInputCheck+0x394>)
 8000eb8:	f004 f976 	bl	80051a8 <HAL_UART_Transmit>
				// Input check
				while(1){
					const char* recv_buff = receivedMessageBuffer();
 8000ebc:	f001 ff4c 	bl	8002d58 <receivedMessageBuffer>
 8000ec0:	66b8      	str	r0, [r7, #104]	@ 0x68
					if (strcmp(recv_buff, "WSDone") == 0) {
 8000ec2:	492f      	ldr	r1, [pc, #188]	@ (8000f80 <displayInputCheck+0x398>)
 8000ec4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000ec6:	f7ff f98b 	bl	80001e0 <strcmp>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d11e      	bne.n	8000f0e <displayInputCheck+0x326>
						char feedback_buffer[100];
						sprintf(feedback_buffer, "Message accepted: %s\n",
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000ed4:	492b      	ldr	r1, [pc, #172]	@ (8000f84 <displayInputCheck+0x39c>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 fe5e 	bl	8007b98 <siprintf>
								recv_buff);
						HAL_UART_Transmit(&huart2, (uint8_t*) feedback_buffer,
								strlen((const char*) feedback_buffer),
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f988 	bl	80001f4 <strlen>
 8000ee4:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) feedback_buffer,
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	1d39      	adds	r1, r7, #4
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	4823      	ldr	r0, [pc, #140]	@ (8000f7c <displayInputCheck+0x394>)
 8000ef0:	f004 f95a 	bl	80051a8 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						break;
 8000ef4:	bf00      	nop
					}
					HAL_UART_Transmit(&huart2, (uint8_t*) '\0', 1,
					HAL_MAX_DELAY);
				}

				clearMessage();
 8000ef6:	f001 fa8d 	bl	8002414 <clearMessage>
				message("Okay!");
 8000efa:	4823      	ldr	r0, [pc, #140]	@ (8000f88 <displayInputCheck+0x3a0>)
 8000efc:	f001 fa5e 	bl	80023bc <message>
				HAL_Delay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f04:	f002 f804 	bl	8002f10 <HAL_Delay>
				clearMessage();
 8000f08:	f001 fa84 	bl	8002414 <clearMessage>
			}
			break;
 8000f0c:	e024      	b.n	8000f58 <displayInputCheck+0x370>
					HAL_UART_Transmit(&huart2, (uint8_t*) '\0', 1,
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	2201      	movs	r2, #1
 8000f14:	2100      	movs	r1, #0
 8000f16:	4819      	ldr	r0, [pc, #100]	@ (8000f7c <displayInputCheck+0x394>)
 8000f18:	f004 f946 	bl	80051a8 <HAL_UART_Transmit>
				while(1){
 8000f1c:	e7ce      	b.n	8000ebc <displayInputCheck+0x2d4>
			break;
 8000f1e:	e01b      	b.n	8000f58 <displayInputCheck+0x370>
		case SETTINGS_PAGE:
			if (x > 0 && x < 46 && y > 0 && y < 36) {
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <displayInputCheck+0x380>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d019      	beq.n	8000f5c <displayInputCheck+0x374>
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <displayInputCheck+0x380>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f2e:	d815      	bhi.n	8000f5c <displayInputCheck+0x374>
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <displayInputCheck+0x384>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d011      	beq.n	8000f5c <displayInputCheck+0x374>
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <displayInputCheck+0x384>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	2b23      	cmp	r3, #35	@ 0x23
 8000f3e:	d80d      	bhi.n	8000f5c <displayInputCheck+0x374>
				pageRoute = MENU_PAGE;
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <displayInputCheck+0x3a4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
				menuPage();
 8000f46:	f001 f9c9 	bl	80022dc <menuPage>

			}
			break;
 8000f4a:	e007      	b.n	8000f5c <displayInputCheck+0x374>
		default:
			break;
 8000f4c:	bf00      	nop
 8000f4e:	e006      	b.n	8000f5e <displayInputCheck+0x376>
			break;
 8000f50:	bf00      	nop
 8000f52:	e004      	b.n	8000f5e <displayInputCheck+0x376>
			break;
 8000f54:	bf00      	nop
 8000f56:	e002      	b.n	8000f5e <displayInputCheck+0x376>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <displayInputCheck+0x376>
			break;
 8000f5c:	bf00      	nop
		}

	}
}
 8000f5e:	bf00      	nop
 8000f60:	3770      	adds	r7, #112	@ 0x70
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000098 	.word	0x20000098
 8000f6c:	2000009a 	.word	0x2000009a
 8000f70:	08008cf0 	.word	0x08008cf0
 8000f74:	08008d48 	.word	0x08008d48
 8000f78:	08008d58 	.word	0x08008d58
 8000f7c:	200001b8 	.word	0x200001b8
 8000f80:	08008d64 	.word	0x08008d64
 8000f84:	08008d28 	.word	0x08008d28
 8000f88:	08008d40 	.word	0x08008d40
 8000f8c:	2000009c 	.word	0x2000009c

08000f90 <waitUntilTapAnywhere>:

void waitUntilTapAnywhere() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	while (!ILI9341_TouchGetCoordinates(&x, &y)) {
 8000f94:	bf00      	nop
 8000f96:	4906      	ldr	r1, [pc, #24]	@ (8000fb0 <waitUntilTapAnywhere+0x20>)
 8000f98:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <waitUntilTapAnywhere+0x24>)
 8000f9a:	f000 fe61 	bl	8001c60 <ILI9341_TouchGetCoordinates>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f5      	bne.n	8000f96 <waitUntilTapAnywhere+0x6>
		// do nothing, press the screen to break the while loop
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000009a 	.word	0x2000009a
 8000fb4:	20000098 	.word	0x20000098

08000fb8 <HAL_UART_RxCpltCallback>:
void setPlayingStatus() {
	showState = !showState;
	HAL_Delay(1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
//		}
//	} else {
//		memset(msg_buffer_for_IT, 0, sizeof(msg_buffer_for_IT));
//	}

}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <ILI9341_DrawHollowRectangleCoord>:
		}
	}
}

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 8001012:	edd7 7a03 	vldr	s15, [r7, #12]
 8001016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	d501      	bpl.n	8001024 <ILI9341_DrawHollowRectangleCoord+0x58>
 8001020:	2301      	movs	r3, #1
 8001022:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800102a:	883a      	ldrh	r2, [r7, #0]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 800103c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	d501      	bpl.n	800104e <ILI9341_DrawHollowRectangleCoord+0x82>
 800104a:	2301      	movs	r3, #1
 800104c:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 800104e:	7cfb      	ldrb	r3, [r7, #19]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8001054:	887a      	ldrh	r2, [r7, #2]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	82fb      	strh	r3, [r7, #22]
 800105c:	e003      	b.n	8001066 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 8001066:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001068:	8afa      	ldrh	r2, [r7, #22]
 800106a:	88b9      	ldrh	r1, [r7, #4]
 800106c:	88f8      	ldrh	r0, [r7, #6]
 800106e:	f000 fd47 	bl	8001b00 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8001072:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001074:	8afa      	ldrh	r2, [r7, #22]
 8001076:	8839      	ldrh	r1, [r7, #0]
 8001078:	88f8      	ldrh	r0, [r7, #6]
 800107a:	f000 fd41 	bl	8001b00 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 800107e:	7cbb      	ldrb	r3, [r7, #18]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d104      	bne.n	800108e <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 8001084:	883a      	ldrh	r2, [r7, #0]
 8001086:	88bb      	ldrh	r3, [r7, #4]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	e003      	b.n	8001096 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	883b      	ldrh	r3, [r7, #0]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 8001096:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001098:	8aba      	ldrh	r2, [r7, #20]
 800109a:	88b9      	ldrh	r1, [r7, #4]
 800109c:	88f8      	ldrh	r0, [r7, #6]
 800109e:	f000 fd73 	bl	8001b88 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80010a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010a4:	8aba      	ldrh	r2, [r7, #20]
 80010a6:	88b9      	ldrh	r1, [r7, #4]
 80010a8:	8878      	ldrh	r0, [r7, #2]
 80010aa:	f000 fd6d 	bl	8001b88 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <ILI9341_DrawHollowRectangleCoord+0xee>
 80010b4:	8abb      	ldrh	r3, [r7, #20]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80010ba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010bc:	8839      	ldrh	r1, [r7, #0]
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fc5b 	bl	800197c <ILI9341_DrawPixel>
	}
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}

080010ce <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b089      	sub	sp, #36	@ 0x24
 80010d2:	af02      	add	r7, sp, #8
 80010d4:	4604      	mov	r4, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	4623      	mov	r3, r4
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	4603      	mov	r3, r0
 80010e2:	80bb      	strh	r3, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	74bb      	strb	r3, [r7, #18]
	int32_t negCalc = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	823b      	strh	r3, [r7, #16]
	uint16_t Y0True = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	81fb      	strh	r3, [r7, #14]

	negCalc = X1 - X0;
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	da01      	bge.n	800111a <ILI9341_DrawFilledRectangleCoord+0x4c>
 8001116:	2301      	movs	r3, #1
 8001118:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 800111e:	883a      	ldrh	r2, [r7, #0]
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	da01      	bge.n	8001130 <ILI9341_DrawFilledRectangleCoord+0x62>
 800112c:	2301      	movs	r3, #1
 800112e:	74bb      	strb	r3, [r7, #18]

	if(!negX)
 8001130:	7cfb      	ldrb	r3, [r7, #19]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <ILI9341_DrawFilledRectangleCoord+0x76>
	{
		xLen = X1 - X0;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	82fb      	strh	r3, [r7, #22]
		X0True = X0;
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	823b      	strh	r3, [r7, #16]
 8001142:	e005      	b.n	8001150 <ILI9341_DrawFilledRectangleCoord+0x82>
	}
	else
	{
		xLen = X0 - X1;
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	82fb      	strh	r3, [r7, #22]
		X0True = X1;
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	823b      	strh	r3, [r7, #16]
	}

	if(!negY)
 8001150:	7cbb      	ldrb	r3, [r7, #18]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d106      	bne.n	8001164 <ILI9341_DrawFilledRectangleCoord+0x96>
	{
		yLen = Y1 - Y0;
 8001156:	883a      	ldrh	r2, [r7, #0]
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	82bb      	strh	r3, [r7, #20]
		Y0True = Y0;
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	81fb      	strh	r3, [r7, #14]
 8001162:	e005      	b.n	8001170 <ILI9341_DrawFilledRectangleCoord+0xa2>
	}
	else
	{
		yLen = Y0 - Y1;
 8001164:	88ba      	ldrh	r2, [r7, #4]
 8001166:	883b      	ldrh	r3, [r7, #0]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	82bb      	strh	r3, [r7, #20]
		Y0True = Y1;
 800116c:	883b      	ldrh	r3, [r7, #0]
 800116e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8001170:	8abc      	ldrh	r4, [r7, #20]
 8001172:	8afa      	ldrh	r2, [r7, #22]
 8001174:	89f9      	ldrh	r1, [r7, #14]
 8001176:	8a38      	ldrh	r0, [r7, #16]
 8001178:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4623      	mov	r3, r4
 800117e:	f000 fc63 	bl	8001a48 <ILI9341_DrawRectangle>
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}

0800118a <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b08d      	sub	sp, #52	@ 0x34
 800118e:	af02      	add	r7, sp, #8
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4611      	mov	r1, r2
 8001194:	461a      	mov	r2, r3
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	460b      	mov	r3, r1
 800119c:	81bb      	strh	r3, [r7, #12]
 800119e:	4613      	mov	r3, r2
 80011a0:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b1e      	cmp	r3, #30
 80011a6:	d964      	bls.n	8001272 <ILI9341_DrawChar+0xe8>
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db60      	blt.n	8001272 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	3302      	adds	r3, #2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3303      	adds	r3, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	3b20      	subs	r3, #32
 80011d2:	7ffa      	ldrb	r2, [r7, #31]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	3304      	adds	r3, #4
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	4413      	add	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80011e0:	7fbb      	ldrb	r3, [r7, #30]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	7f7b      	ldrb	r3, [r7, #29]
 80011e6:	b29c      	uxth	r4, r3
 80011e8:	88f9      	ldrh	r1, [r7, #6]
 80011ea:	89b8      	ldrh	r0, [r7, #12]
 80011ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4623      	mov	r3, r4
 80011f2:	f000 fc29 	bl	8001a48 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fa:	e035      	b.n	8001268 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	e02b      	b.n	800125a <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001202:	7f3b      	ldrb	r3, [r7, #28]
 8001204:	6a3a      	ldr	r2, [r7, #32]
 8001206:	fb03 f202 	mul.w	r2, r3, r2
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	10db      	asrs	r3, r3, #3
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	4413      	add	r3, r2
 8001214:	3301      	adds	r3, #1
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	2201      	movs	r2, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 800122c:	7dfa      	ldrb	r2, [r7, #23]
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	4013      	ands	r3, r2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00d      	beq.n	8001254 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	b29a      	uxth	r2, r3
 800123c:	89bb      	ldrh	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	b298      	uxth	r0, r3
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	b29a      	uxth	r2, r3
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4413      	add	r3, r2
 800124a:	b29b      	uxth	r3, r3
 800124c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800124e:	4619      	mov	r1, r3
 8001250:	f000 fb94 	bl	800197c <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	3301      	adds	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	7fbb      	ldrb	r3, [r7, #30]
 800125c:	6a3a      	ldr	r2, [r7, #32]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbcf      	blt.n	8001202 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
 8001268:	7f7b      	ldrb	r3, [r7, #29]
 800126a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800126c:	429a      	cmp	r2, r3
 800126e:	dbc5      	blt.n	80011fc <ILI9341_DrawChar+0x72>
 8001270:	e000      	b.n	8001274 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8001272:	bf00      	nop
			}
		}
	}
}
 8001274:	372c      	adds	r7, #44	@ 0x2c
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}

0800127a <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b08a      	sub	sp, #40	@ 0x28
 800127e:	af02      	add	r7, sp, #8
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	460b      	mov	r3, r1
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	4613      	mov	r3, r2
 800128e:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	77bb      	strb	r3, [r7, #30]

	while (*str)
 800129e:	e02d      	b.n	80012fc <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	88b9      	ldrh	r1, [r7, #4]
 80012a6:	88fa      	ldrh	r2, [r7, #6]
 80012a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	f7ff ff69 	bl	800118a <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3b20      	subs	r3, #32
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	3304      	adds	r3, #4
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	1c9a      	adds	r2, r3, #2
 80012d6:	7fbb      	ldrb	r3, [r7, #30]
 80012d8:	429a      	cmp	r2, r3
 80012da:	da07      	bge.n	80012ec <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3302      	adds	r3, #2
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	e004      	b.n	80012f6 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 80012ec:	7fbb      	ldrb	r3, [r7, #30]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4413      	add	r3, r2
 80012f4:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3301      	adds	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
	while (*str)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1cd      	bne.n	80012a0 <ILI9341_DrawText+0x26>
	}
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <HAL_SPI_TxCpltCallback+0x24>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d105      	bne.n	800132c <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <HAL_SPI_TxCpltCallback+0x28>)
 8001328:	f002 fce2 	bl	8003cf0 <HAL_GPIO_WritePin>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000a8 	.word	0x200000a8
 8001338:	40020000 	.word	0x40020000

0800133c <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001346:	bf00      	nop
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <ILI9341_SPI_Tx+0x30>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b02      	cmp	r3, #2
 8001354:	d1f8      	bne.n	8001348 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <ILI9341_SPI_Tx+0x30>)
 800135e:	f003 fcaf 	bl	8004cc0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000a8 	.word	0x200000a8

08001370 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800137c:	bf00      	nop
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <ILI9341_SPI_TxBuffer+0x30>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b02      	cmp	r3, #2
 800138a:	d1f8      	bne.n	800137e <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	461a      	mov	r2, r3
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <ILI9341_SPI_TxBuffer+0x30>)
 8001394:	f003 fc94 	bl	8004cc0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000a8 	.word	0x200000a8

080013a4 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <ILI9341_WriteCommand+0x34>)
 80013b6:	f002 fc9b 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <ILI9341_WriteCommand+0x34>)
 80013c2:	f002 fc95 	bl	8003cf0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ffb7 	bl	800133c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40020000 	.word	0x40020000

080013dc <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <ILI9341_WriteData+0x34>)
 80013ee:	f002 fc7f 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <ILI9341_WriteData+0x34>)
 80013fa:	f002 fc79 	bl	8003cf0 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff9b 	bl	800133c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40020000 	.word	0x40020000

08001414 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001426:	4809      	ldr	r0, [pc, #36]	@ (800144c <ILI9341_WriteBuffer+0x38>)
 8001428:	f002 fc62 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001432:	4806      	ldr	r0, [pc, #24]	@ (800144c <ILI9341_WriteBuffer+0x38>)
 8001434:	f002 fc5c 	bl	8003cf0 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff97 	bl	8001370 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40020000 	.word	0x40020000

08001450 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	4603      	mov	r3, r0
 8001464:	80bb      	strh	r3, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800148e:	202a      	movs	r0, #42	@ 0x2a
 8001490:	f7ff ff88 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2104      	movs	r1, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffba 	bl	8001414 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80014b0:	883b      	ldrh	r3, [r7, #0]
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80014c0:	202b      	movs	r0, #43	@ 0x2b
 80014c2:	f7ff ff6f 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2104      	movs	r1, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffa1 	bl	8001414 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80014d2:	202c      	movs	r0, #44	@ 0x2c
 80014d4:	f7ff ff66 	bl	80013a4 <ILI9341_WriteCommand>
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}

080014e0 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ea:	480e      	ldr	r0, [pc, #56]	@ (8001524 <ILI9341_Reset+0x44>)
 80014ec:	f002 fc00 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f001 fd0d 	bl	8002f10 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <ILI9341_Reset+0x44>)
 80014fe:	f002 fbf7 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001502:	200a      	movs	r0, #10
 8001504:	f001 fd04 	bl	8002f10 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <ILI9341_Reset+0x44>)
 8001510:	f002 fbee 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800151a:	4802      	ldr	r0, [pc, #8]	@ (8001524 <ILI9341_Reset+0x44>)
 800151c:	f002 fbe8 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40020000 	.word	0x40020000

08001528 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001532:	4802      	ldr	r0, [pc, #8]	@ (800153c <ILI9341_Enable+0x14>)
 8001534:	f002 fbdc 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40020000 	.word	0x40020000

08001540 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001544:	f7ff fff0 	bl	8001528 <ILI9341_Enable>
	ILI9341_Reset();
 8001548:	f7ff ffca 	bl	80014e0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff ff29 	bl	80013a4 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8001552:	200a      	movs	r0, #10
 8001554:	f001 fcdc 	bl	8002f10 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001558:	20cb      	movs	r0, #203	@ 0xcb
 800155a:	f7ff ff23 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800155e:	2039      	movs	r0, #57	@ 0x39
 8001560:	f7ff ff3c 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001564:	202c      	movs	r0, #44	@ 0x2c
 8001566:	f7ff ff39 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff ff36 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001570:	2034      	movs	r0, #52	@ 0x34
 8001572:	f7ff ff33 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001576:	2002      	movs	r0, #2
 8001578:	f7ff ff30 	bl	80013dc <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 800157c:	20cf      	movs	r0, #207	@ 0xcf
 800157e:	f7ff ff11 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff ff2a 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001588:	20c1      	movs	r0, #193	@ 0xc1
 800158a:	f7ff ff27 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800158e:	2030      	movs	r0, #48	@ 0x30
 8001590:	f7ff ff24 	bl	80013dc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001594:	20e8      	movs	r0, #232	@ 0xe8
 8001596:	f7ff ff05 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800159a:	2085      	movs	r0, #133	@ 0x85
 800159c:	f7ff ff1e 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff ff1b 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80015a6:	2078      	movs	r0, #120	@ 0x78
 80015a8:	f7ff ff18 	bl	80013dc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80015ac:	20ea      	movs	r0, #234	@ 0xea
 80015ae:	f7ff fef9 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff ff12 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff0f 	bl	80013dc <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80015be:	20ed      	movs	r0, #237	@ 0xed
 80015c0:	f7ff fef0 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80015c4:	2064      	movs	r0, #100	@ 0x64
 80015c6:	f7ff ff09 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f7ff ff06 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80015d0:	2012      	movs	r0, #18
 80015d2:	f7ff ff03 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80015d6:	2081      	movs	r0, #129	@ 0x81
 80015d8:	f7ff ff00 	bl	80013dc <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80015dc:	20f7      	movs	r0, #247	@ 0xf7
 80015de:	f7ff fee1 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80015e2:	2020      	movs	r0, #32
 80015e4:	f7ff fefa 	bl	80013dc <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80015e8:	20c0      	movs	r0, #192	@ 0xc0
 80015ea:	f7ff fedb 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80015ee:	2023      	movs	r0, #35	@ 0x23
 80015f0:	f7ff fef4 	bl	80013dc <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80015f4:	20c1      	movs	r0, #193	@ 0xc1
 80015f6:	f7ff fed5 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80015fa:	2010      	movs	r0, #16
 80015fc:	f7ff feee 	bl	80013dc <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001600:	20c5      	movs	r0, #197	@ 0xc5
 8001602:	f7ff fecf 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001606:	203e      	movs	r0, #62	@ 0x3e
 8001608:	f7ff fee8 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800160c:	2028      	movs	r0, #40	@ 0x28
 800160e:	f7ff fee5 	bl	80013dc <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001612:	20c7      	movs	r0, #199	@ 0xc7
 8001614:	f7ff fec6 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001618:	2086      	movs	r0, #134	@ 0x86
 800161a:	f7ff fedf 	bl	80013dc <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800161e:	2036      	movs	r0, #54	@ 0x36
 8001620:	f7ff fec0 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001624:	2048      	movs	r0, #72	@ 0x48
 8001626:	f7ff fed9 	bl	80013dc <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800162a:	203a      	movs	r0, #58	@ 0x3a
 800162c:	f7ff feba 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001630:	2055      	movs	r0, #85	@ 0x55
 8001632:	f7ff fed3 	bl	80013dc <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001636:	20b1      	movs	r0, #177	@ 0xb1
 8001638:	f7ff feb4 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fecd 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001642:	2018      	movs	r0, #24
 8001644:	f7ff feca 	bl	80013dc <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001648:	20b6      	movs	r0, #182	@ 0xb6
 800164a:	f7ff feab 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800164e:	2008      	movs	r0, #8
 8001650:	f7ff fec4 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001654:	2082      	movs	r0, #130	@ 0x82
 8001656:	f7ff fec1 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800165a:	2027      	movs	r0, #39	@ 0x27
 800165c:	f7ff febe 	bl	80013dc <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001660:	20f2      	movs	r0, #242	@ 0xf2
 8001662:	f7ff fe9f 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff feb8 	bl	80013dc <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 800166c:	2026      	movs	r0, #38	@ 0x26
 800166e:	f7ff fe99 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff feb2 	bl	80013dc <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001678:	20e0      	movs	r0, #224	@ 0xe0
 800167a:	f7ff fe93 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800167e:	200f      	movs	r0, #15
 8001680:	f7ff feac 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001684:	2031      	movs	r0, #49	@ 0x31
 8001686:	f7ff fea9 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 800168a:	202b      	movs	r0, #43	@ 0x2b
 800168c:	f7ff fea6 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001690:	200c      	movs	r0, #12
 8001692:	f7ff fea3 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001696:	200e      	movs	r0, #14
 8001698:	f7ff fea0 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800169c:	2008      	movs	r0, #8
 800169e:	f7ff fe9d 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80016a2:	204e      	movs	r0, #78	@ 0x4e
 80016a4:	f7ff fe9a 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80016a8:	20f1      	movs	r0, #241	@ 0xf1
 80016aa:	f7ff fe97 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80016ae:	2037      	movs	r0, #55	@ 0x37
 80016b0:	f7ff fe94 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80016b4:	2007      	movs	r0, #7
 80016b6:	f7ff fe91 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80016ba:	2010      	movs	r0, #16
 80016bc:	f7ff fe8e 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f7ff fe8b 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80016c6:	200e      	movs	r0, #14
 80016c8:	f7ff fe88 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80016cc:	2009      	movs	r0, #9
 80016ce:	f7ff fe85 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff fe82 	bl	80013dc <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80016d8:	20e1      	movs	r0, #225	@ 0xe1
 80016da:	f7ff fe63 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fe7c 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80016e4:	200e      	movs	r0, #14
 80016e6:	f7ff fe79 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80016ea:	2014      	movs	r0, #20
 80016ec:	f7ff fe76 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f7ff fe73 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80016f6:	2011      	movs	r0, #17
 80016f8:	f7ff fe70 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80016fc:	2007      	movs	r0, #7
 80016fe:	f7ff fe6d 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001702:	2031      	movs	r0, #49	@ 0x31
 8001704:	f7ff fe6a 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001708:	20c1      	movs	r0, #193	@ 0xc1
 800170a:	f7ff fe67 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800170e:	2048      	movs	r0, #72	@ 0x48
 8001710:	f7ff fe64 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001714:	2008      	movs	r0, #8
 8001716:	f7ff fe61 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800171a:	200f      	movs	r0, #15
 800171c:	f7ff fe5e 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001720:	200c      	movs	r0, #12
 8001722:	f7ff fe5b 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001726:	2031      	movs	r0, #49	@ 0x31
 8001728:	f7ff fe58 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800172c:	2036      	movs	r0, #54	@ 0x36
 800172e:	f7ff fe55 	bl	80013dc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001732:	200f      	movs	r0, #15
 8001734:	f7ff fe52 	bl	80013dc <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001738:	2011      	movs	r0, #17
 800173a:	f7ff fe33 	bl	80013a4 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800173e:	2064      	movs	r0, #100	@ 0x64
 8001740:	f001 fbe6 	bl	8002f10 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001744:	2029      	movs	r0, #41	@ 0x29
 8001746:	f7ff fe2d 	bl	80013a4 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f802 	bl	8001754 <ILI9341_SetRotation>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800175e:	2036      	movs	r0, #54	@ 0x36
 8001760:	f7ff fe20 	bl	80013a4 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f001 fbd3 	bl	8002f10 <HAL_Delay>

	switch(rotation)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d837      	bhi.n	80017e0 <ILI9341_SetRotation+0x8c>
 8001770:	a201      	add	r2, pc, #4	@ (adr r2, 8001778 <ILI9341_SetRotation+0x24>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	08001789 	.word	0x08001789
 800177c:	0800179f 	.word	0x0800179f
 8001780:	080017b5 	.word	0x080017b5
 8001784:	080017cb 	.word	0x080017cb
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001788:	2048      	movs	r0, #72	@ 0x48
 800178a:	f7ff fe27 	bl	80013dc <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <ILI9341_SetRotation+0x98>)
 8001790:	22f0      	movs	r2, #240	@ 0xf0
 8001792:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <ILI9341_SetRotation+0x9c>)
 8001796:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800179a:	801a      	strh	r2, [r3, #0]
		break;
 800179c:	e021      	b.n	80017e2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800179e:	2028      	movs	r0, #40	@ 0x28
 80017a0:	f7ff fe1c 	bl	80013dc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <ILI9341_SetRotation+0x98>)
 80017a6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017aa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80017ac:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <ILI9341_SetRotation+0x9c>)
 80017ae:	22f0      	movs	r2, #240	@ 0xf0
 80017b0:	801a      	strh	r2, [r3, #0]
		break;
 80017b2:	e016      	b.n	80017e2 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80017b4:	2088      	movs	r0, #136	@ 0x88
 80017b6:	f7ff fe11 	bl	80013dc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <ILI9341_SetRotation+0x98>)
 80017bc:	22f0      	movs	r2, #240	@ 0xf0
 80017be:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <ILI9341_SetRotation+0x9c>)
 80017c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017c6:	801a      	strh	r2, [r3, #0]
		break;
 80017c8:	e00b      	b.n	80017e2 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80017ca:	20e8      	movs	r0, #232	@ 0xe8
 80017cc:	f7ff fe06 	bl	80013dc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <ILI9341_SetRotation+0x98>)
 80017d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017d6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <ILI9341_SetRotation+0x9c>)
 80017da:	22f0      	movs	r2, #240	@ 0xf0
 80017dc:	801a      	strh	r2, [r3, #0]
		break;
 80017de:	e000      	b.n	80017e2 <ILI9341_SetRotation+0x8e>
	default:
		break;
 80017e0:	bf00      	nop
	}
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000002 	.word	0x20000002
 80017f0:	20000000 	.word	0x20000000

080017f4 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80017f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f8:	b08d      	sub	sp, #52	@ 0x34
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	6039      	str	r1, [r7, #0]
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	466b      	mov	r3, sp
 8001804:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001812:	d202      	bcs.n	800181a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001818:	e002      	b.n	8001820 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800181a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001826:	4840      	ldr	r0, [pc, #256]	@ (8001928 <ILI9341_DrawColorBurst+0x134>)
 8001828:	f002 fa62 	bl	8003cf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001832:	483d      	ldr	r0, [pc, #244]	@ (8001928 <ILI9341_DrawColorBurst+0x134>)
 8001834:	f002 fa5c 	bl	8003cf0 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	b29b      	uxth	r3, r3
 800183e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8001842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001844:	460b      	mov	r3, r1
 8001846:	3b01      	subs	r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	2300      	movs	r3, #0
 800184c:	4688      	mov	r8, r1
 800184e:	4699      	mov	r9, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800185c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001864:	2300      	movs	r3, #0
 8001866:	460c      	mov	r4, r1
 8001868:	461d      	mov	r5, r3
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	00eb      	lsls	r3, r5, #3
 8001874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001878:	00e2      	lsls	r2, r4, #3
 800187a:	1dcb      	adds	r3, r1, #7
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	ebad 0d03 	sub.w	sp, sp, r3
 8001884:	466b      	mov	r3, sp
 8001886:	3300      	adds	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188e:	e00e      	b.n	80018ae <ILI9341_DrawColorBurst+0xba>
	{
		BurstBuffer[j] = chifted;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001894:	4413      	add	r3, r2
 8001896:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800189a:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 800189c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189e:	3301      	adds	r3, #1
 80018a0:	88fa      	ldrh	r2, [r7, #6]
 80018a2:	b2d1      	uxtb	r1, r2
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80018a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018aa:	3302      	adds	r3, #2
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ec      	bcc.n	8001890 <ILI9341_DrawColorBurst+0x9c>
	}

	uint32_t SendingSize = size * 2;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80018ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018d0:	fb01 f202 	mul.w	r2, r1, r2
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d010      	beq.n	8001900 <ILI9341_DrawColorBurst+0x10c>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e2:	e009      	b.n	80018f8 <ILI9341_DrawColorBurst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 80018e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	230a      	movs	r3, #10
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	480f      	ldr	r0, [pc, #60]	@ (800192c <ILI9341_DrawColorBurst+0x138>)
 80018ee:	f002 fefa 	bl	80046e6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	3301      	adds	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3f1      	bcc.n	80018e4 <ILI9341_DrawColorBurst+0xf0>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	b29a      	uxth	r2, r3
 8001904:	230a      	movs	r3, #10
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <ILI9341_DrawColorBurst+0x138>)
 800190a:	f002 feec 	bl	80046e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001914:	4804      	ldr	r0, [pc, #16]	@ (8001928 <ILI9341_DrawColorBurst+0x134>)
 8001916:	f002 f9eb 	bl	8003cf0 <HAL_GPIO_WritePin>
 800191a:	46b5      	mov	sp, r6
}
 800191c:	bf00      	nop
 800191e:	3734      	adds	r7, #52	@ 0x34
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001926:	bf00      	nop
 8001928:	40020000 	.word	0x40020000
 800192c:	200000a8 	.word	0x200000a8

08001930 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <ILI9341_FillScreen+0x44>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <ILI9341_FillScreen+0x48>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	2100      	movs	r1, #0
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fd81 	bl	8001450 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <ILI9341_FillScreen+0x44>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <ILI9341_FillScreen+0x48>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	461a      	mov	r2, r3
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff44 	bl	80017f4 <ILI9341_DrawColorBurst>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000002 	.word	0x20000002
 8001978:	20000000 	.word	0x20000000

0800197c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	460b      	mov	r3, r1
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800198e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <ILI9341_DrawPixel+0xc4>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	d24d      	bcs.n	8001a36 <ILI9341_DrawPixel+0xba>
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <ILI9341_DrawPixel+0xc8>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	88ba      	ldrh	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d247      	bcs.n	8001a36 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	753b      	strb	r3, [r7, #20]
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	757b      	strb	r3, [r7, #21]
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	3301      	adds	r3, #1
 80019ba:	121b      	asrs	r3, r3, #8
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	75bb      	strb	r3, [r7, #22]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	743b      	strb	r3, [r7, #16]
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	747b      	strb	r3, [r7, #17]
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	121b      	asrs	r3, r3, #8
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	74bb      	strb	r3, [r7, #18]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	733b      	strb	r3, [r7, #12]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80019fe:	202a      	movs	r0, #42	@ 0x2a
 8001a00:	f7ff fcd0 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2104      	movs	r1, #4
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd02 	bl	8001414 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001a10:	202b      	movs	r0, #43	@ 0x2b
 8001a12:	f7ff fcc7 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fcf9 	bl	8001414 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001a22:	202c      	movs	r0, #44	@ 0x2c
 8001a24:	f7ff fcbe 	bl	80013a4 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fcf0 	bl	8001414 <ILI9341_WriteBuffer>
 8001a34:	e000      	b.n	8001a38 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a36:	bf00      	nop
}
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000002 	.word	0x20000002
 8001a44:	20000000 	.word	0x20000000

08001a48 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4604      	mov	r4, r0
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	461a      	mov	r2, r3
 8001a56:	4623      	mov	r3, r4
 8001a58:	80fb      	strh	r3, [r7, #6]
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	807b      	strh	r3, [r7, #2]
 8001a62:	4613      	mov	r3, r2
 8001a64:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <ILI9341_DrawRectangle+0xb0>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d23d      	bcs.n	8001aee <ILI9341_DrawRectangle+0xa6>
 8001a72:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <ILI9341_DrawRectangle+0xb4>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d237      	bcs.n	8001aee <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <ILI9341_DrawRectangle+0xb0>)
 8001a86:	8812      	ldrh	r2, [r2, #0]
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	dd05      	ble.n	8001a9a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <ILI9341_DrawRectangle+0xb0>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001a9a:	88ba      	ldrh	r2, [r7, #4]
 8001a9c:	883b      	ldrh	r3, [r7, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a16      	ldr	r2, [pc, #88]	@ (8001afc <ILI9341_DrawRectangle+0xb4>)
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	dd05      	ble.n	8001ab6 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <ILI9341_DrawRectangle+0xb4>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	4413      	add	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29c      	uxth	r4, r3
 8001ac2:	88ba      	ldrh	r2, [r7, #4]
 8001ac4:	883b      	ldrh	r3, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	88b9      	ldrh	r1, [r7, #4]
 8001ad0:	88f8      	ldrh	r0, [r7, #6]
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	f7ff fcbc 	bl	8001450 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001ad8:	883b      	ldrh	r3, [r7, #0]
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	8b3b      	ldrh	r3, [r7, #24]
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fe84 	bl	80017f4 <ILI9341_DrawColorBurst>
 8001aec:	e000      	b.n	8001af0 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001aee:	bf00      	nop
}
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd90      	pop	{r4, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000002 	.word	0x20000002
 8001afc:	20000000 	.word	0x20000000

08001b00 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4604      	mov	r4, r0
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4623      	mov	r3, r4
 8001b10:	80fb      	strh	r3, [r7, #6]
 8001b12:	4603      	mov	r3, r0
 8001b14:	80bb      	strh	r3, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	807b      	strh	r3, [r7, #2]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <ILI9341_DrawHLine+0x80>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d225      	bcs.n	8001b76 <ILI9341_DrawHLine+0x76>
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <ILI9341_DrawHLine+0x84>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d21f      	bcs.n	8001b76 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <ILI9341_DrawHLine+0x80>)
 8001b3e:	8812      	ldrh	r2, [r2, #0]
 8001b40:	b292      	uxth	r2, r2
 8001b42:	4293      	cmp	r3, r2
 8001b44:	dd05      	ble.n	8001b52 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <ILI9341_DrawHLine+0x80>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	88bb      	ldrh	r3, [r7, #4]
 8001b60:	88b9      	ldrh	r1, [r7, #4]
 8001b62:	88f8      	ldrh	r0, [r7, #6]
 8001b64:	f7ff fc74 	bl	8001450 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	883b      	ldrh	r3, [r7, #0]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fe40 	bl	80017f4 <ILI9341_DrawColorBurst>
 8001b74:	e000      	b.n	8001b78 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b76:	bf00      	nop
}
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000002 	.word	0x20000002
 8001b84:	20000000 	.word	0x20000000

08001b88 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	80fb      	strh	r3, [r7, #6]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80bb      	strh	r3, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	807b      	strh	r3, [r7, #2]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <ILI9341_DrawVLine+0x80>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d225      	bcs.n	8001bfe <ILI9341_DrawVLine+0x76>
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <ILI9341_DrawVLine+0x84>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	88ba      	ldrh	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d21f      	bcs.n	8001bfe <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001bbe:	88ba      	ldrh	r2, [r7, #4]
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <ILI9341_DrawVLine+0x84>)
 8001bc6:	8812      	ldrh	r2, [r2, #0]
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	dd05      	ble.n	8001bda <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <ILI9341_DrawVLine+0x84>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001bda:	88ba      	ldrh	r2, [r7, #4]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4413      	add	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	88b9      	ldrh	r1, [r7, #4]
 8001bea:	88f8      	ldrh	r0, [r7, #6]
 8001bec:	f7ff fc30 	bl	8001450 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	883b      	ldrh	r3, [r7, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fdfc 	bl	80017f4 <ILI9341_DrawColorBurst>
 8001bfc:	e000      	b.n	8001c00 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001bfe:	bf00      	nop
}
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000002 	.word	0x20000002
 8001c0c:	20000000 	.word	0x20000000

08001c10 <ILI9341_TouchSelect>:
#define READ_X 0xD0	// 208
#define READ_Y 0x90	// 144

#define TARGET_SAMPLE 8

static void ILI9341_TouchSelect() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2140      	movs	r1, #64	@ 0x40
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <ILI9341_TouchSelect+0x14>)
 8001c1a:	f002 f869 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40020400 	.word	0x40020400

08001c28 <ILI9341_TouchUnselect>:

void ILI9341_TouchUnselect() {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2140      	movs	r1, #64	@ 0x40
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <ILI9341_TouchUnselect+0x14>)
 8001c32:	f002 f85d 	bl	8003cf0 <HAL_GPIO_WritePin>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40020400 	.word	0x40020400

08001c40 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <ILI9341_TouchPressed+0x1c>)
 8001c48:	f002 f83a 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40020400 	.word	0x40020400

08001c60 <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t* x, uint16_t* y) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    ILI9341_TouchSelect();
 8001c6a:	f7ff ffd1 	bl	8001c10 <ILI9341_TouchSelect>

    uint32_t avg_x = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 32; i++) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	77bb      	strb	r3, [r7, #30]
 8001c7e:	e03f      	b.n	8001d00 <ILI9341_TouchGetCoordinates+0xa0>
        if(!ILI9341_TouchPressed())
 8001c80:	f7ff ffde 	bl	8001c40 <ILI9341_TouchPressed>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d13b      	bne.n	8001d08 <ILI9341_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	3301      	adds	r3, #1
 8001c94:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4944      	ldr	r1, [pc, #272]	@ (8001db0 <ILI9341_TouchGetCoordinates+0x150>)
 8001c9e:	4845      	ldr	r0, [pc, #276]	@ (8001db4 <ILI9341_TouchGetCoordinates+0x154>)
 8001ca0:	f002 fd21 	bl	80046e6 <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2302      	movs	r3, #2
 8001cb0:	4941      	ldr	r1, [pc, #260]	@ (8001db8 <ILI9341_TouchGetCoordinates+0x158>)
 8001cb2:	4840      	ldr	r0, [pc, #256]	@ (8001db4 <ILI9341_TouchGetCoordinates+0x154>)
 8001cb4:	f002 fe5b 	bl	800496e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	493f      	ldr	r1, [pc, #252]	@ (8001dbc <ILI9341_TouchGetCoordinates+0x15c>)
 8001cc0:	483c      	ldr	r0, [pc, #240]	@ (8001db4 <ILI9341_TouchGetCoordinates+0x154>)
 8001cc2:	f002 fd10 	bl	80046e6 <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8001cc6:	f107 020c 	add.w	r2, r7, #12
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	4939      	ldr	r1, [pc, #228]	@ (8001db8 <ILI9341_TouchGetCoordinates+0x158>)
 8001cd4:	4837      	ldr	r0, [pc, #220]	@ (8001db4 <ILI9341_TouchGetCoordinates+0x154>)
 8001cd6:	f002 fe4a 	bl	800496e <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8001cda:	7b3b      	ldrb	r3, [r7, #12]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	7b7a      	ldrb	r2, [r7, #13]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	4413      	add	r3, r2
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8001cea:	7c3b      	ldrb	r3, [r7, #16]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	7c7a      	ldrb	r2, [r7, #17]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 32; i++) {
 8001cfa:	7fbb      	ldrb	r3, [r7, #30]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	77bb      	strb	r3, [r7, #30]
 8001d00:	7fbb      	ldrb	r3, [r7, #30]
 8001d02:	2b1f      	cmp	r3, #31
 8001d04:	d9bc      	bls.n	8001c80 <ILI9341_TouchGetCoordinates+0x20>
 8001d06:	e000      	b.n	8001d0a <ILI9341_TouchGetCoordinates+0xaa>
            break;
 8001d08:	bf00      	nop
    }

    ILI9341_TouchUnselect();
 8001d0a:	f7ff ff8d 	bl	8001c28 <ILI9341_TouchUnselect>

    if(nsamples < 32)
 8001d0e:	7ffb      	ldrb	r3, [r7, #31]
 8001d10:	2b1f      	cmp	r3, #31
 8001d12:	d801      	bhi.n	8001d18 <ILI9341_TouchGetCoordinates+0xb8>
        return false;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e047      	b.n	8001da8 <ILI9341_TouchGetCoordinates+0x148>

    uint32_t raw_x = (avg_x / 32);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	61bb      	str	r3, [r7, #24]
    if(raw_x < ILI9341_TOUCH_MIN_RAW_X) raw_x = ILI9341_TOUCH_MIN_RAW_X;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d802      	bhi.n	8001d2e <ILI9341_TouchGetCoordinates+0xce>
 8001d28:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d2c:	61bb      	str	r3, [r7, #24]
    if(raw_x > ILI9341_TOUCH_MAX_RAW_X) raw_x = ILI9341_TOUCH_MAX_RAW_X;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f647 1218 	movw	r2, #31000	@ 0x7918
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d902      	bls.n	8001d3e <ILI9341_TouchGetCoordinates+0xde>
 8001d38:	f647 1318 	movw	r3, #31000	@ 0x7918
 8001d3c:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 32);
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	617b      	str	r3, [r7, #20]
    if(raw_y < ILI9341_TOUCH_MIN_RAW_X) raw_y = ILI9341_TOUCH_MIN_RAW_Y;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d802      	bhi.n	8001d54 <ILI9341_TouchGetCoordinates+0xf4>
 8001d4e:	f640 43cc 	movw	r3, #3276	@ 0xccc
 8001d52:	617b      	str	r3, [r7, #20]
    if(raw_y > ILI9341_TOUCH_MAX_RAW_Y) raw_y = ILI9341_TOUCH_MAX_RAW_Y;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f247 529e 	movw	r2, #30110	@ 0x759e
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d902      	bls.n	8001d64 <ILI9341_TouchGetCoordinates+0x104>
 8001d5e:	f247 539e 	movw	r3, #30110	@ 0x759e
 8001d62:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    // UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);
//    sendDebugMessage("raw_x = %d, raw_y = %d\r\n", x, y);

    *x = (raw_x - ILI9341_TOUCH_MIN_RAW_X) * ILI9341_TOUCH_SCALE_X / (ILI9341_TOUCH_MAX_RAW_X - ILI9341_TOUCH_MIN_RAW_X);
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	f5a3 23af 	sub.w	r3, r3, #358400	@ 0x57800
 8001d72:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <ILI9341_TouchGetCoordinates+0x160>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0b9b      	lsrs	r3, r3, #14
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - ILI9341_TOUCH_MIN_RAW_Y) * ILI9341_TOUCH_SCALE_Y / (ILI9341_TOUCH_MAX_RAW_Y - ILI9341_TOUCH_MIN_RAW_Y);
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	f5a3 237f 	sub.w	r3, r3, #1044480	@ 0xff000
 8001d92:	f5a3 6370 	sub.w	r3, r3, #3840	@ 0xf00
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <ILI9341_TouchGetCoordinates+0x164>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	801a      	strh	r2, [r3, #0]

    return true;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3728      	adds	r7, #40	@ 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	0800aac4 	.word	0x0800aac4
 8001db4:	20000100 	.word	0x20000100
 8001db8:	0800aac8 	.word	0x0800aac8
 8001dbc:	0800aacc 	.word	0x0800aacc
 8001dc0:	8e2e0727 	.word	0x8e2e0727
 8001dc4:	1389c755 	.word	0x1389c755

08001dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dcc:	f001 f82e 	bl	8002e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd0:	f000 f822 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd4:	f000 f972 	bl	80020bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd8:	f000 f932 	bl	8002040 <MX_DMA_Init>
  MX_SPI1_Init();
 8001ddc:	f000 f89a 	bl	8001f14 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001de0:	f000 f904 	bl	8001fec <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001de4:	f000 f882 	bl	8001eec <MX_CRC_Init>
  MX_SPI2_Init();
 8001de8:	f000 f8ca 	bl	8001f80 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	pageSetup();
 8001dec:	f000 f9ec 	bl	80021c8 <pageSetup>
	firstPage();
 8001df0:	f000 f9f2 	bl	80021d8 <firstPage>
	waitUntilTapAnywhere();
 8001df4:	f7ff f8cc 	bl	8000f90 <waitUntilTapAnywhere>
	sendDebugMessage("Hello World! from STM32Cube\n");
 8001df8:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <main+0x48>)
 8001dfa:	f000 ff6f 	bl	8002cdc <sendDebugMessage>
	menuPage();
 8001dfe:	f000 fa6d 	bl	80022dc <menuPage>
	sendDebugMessage("Going to loop!\n");
 8001e02:	4804      	ldr	r0, [pc, #16]	@ (8001e14 <main+0x4c>)
 8001e04:	f000 ff6a 	bl	8002cdc <sendDebugMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
		displayInputCheck();
 8001e08:	f7fe feee 	bl	8000be8 <displayInputCheck>
 8001e0c:	e7fc      	b.n	8001e08 <main+0x40>
 8001e0e:	bf00      	nop
 8001e10:	08008d6c 	.word	0x08008d6c
 8001e14:	08008d8c 	.word	0x08008d8c

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b094      	sub	sp, #80	@ 0x50
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2230      	movs	r2, #48	@ 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 ff58 	bl	8007cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <SystemClock_Config+0xcc>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <SystemClock_Config+0xcc>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <SystemClock_Config+0xcc>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <SystemClock_Config+0xd0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e64:	4a20      	ldr	r2, [pc, #128]	@ (8001ee8 <SystemClock_Config+0xd0>)
 8001e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <SystemClock_Config+0xd0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e80:	2310      	movs	r3, #16
 8001e82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e84:	2302      	movs	r3, #2
 8001e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001e90:	2354      	movs	r3, #84	@ 0x54
 8001e92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 ff3f 	bl	8003d24 <HAL_RCC_OscConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001eac:	f000 f986 	bl	80021bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 f9a1 	bl	8004214 <HAL_RCC_ClockConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ed8:	f000 f970 	bl	80021bc <Error_Handler>
  }
}
 8001edc:	bf00      	nop
 8001ede:	3750      	adds	r7, #80	@ 0x50
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_CRC_Init+0x20>)
 8001ef2:	4a07      	ldr	r2, [pc, #28]	@ (8001f10 <MX_CRC_Init+0x24>)
 8001ef4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_CRC_Init+0x20>)
 8001ef8:	f001 f93f 	bl	800317a <HAL_CRC_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001f02:	f000 f95b 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000a0 	.word	0x200000a0
 8001f10:	40023000 	.word	0x40023000

08001f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f1a:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <MX_SPI1_Init+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f48:	2210      	movs	r2, #16
 8001f4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f60:	220a      	movs	r2, #10
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	@ (8001f78 <MX_SPI1_Init+0x64>)
 8001f66:	f002 fb35 	bl	80045d4 <HAL_SPI_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f70:	f000 f924 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200000a8 	.word	0x200000a8
 8001f7c:	40013000 	.word	0x40013000

08001f80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001f86:	4a18      	ldr	r2, [pc, #96]	@ (8001fe8 <MX_SPI2_Init+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001f8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f98:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fcc:	220a      	movs	r2, #10
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_SPI2_Init+0x64>)
 8001fd2:	f002 faff 	bl	80045d4 <HAL_SPI_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fdc:	f000 f8ee 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000100 	.word	0x20000100
 8001fe8:	40003800 	.word	0x40003800

08001fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff0:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8001ff2:	4a12      	ldr	r2, [pc, #72]	@ (800203c <MX_USART2_UART_Init+0x50>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	@ (8002038 <MX_USART2_UART_Init+0x4c>)
 8002024:	f003 f870 	bl	8005108 <HAL_UART_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800202e:	f000 f8c5 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200001b8 	.word	0x200001b8
 800203c:	40004400 	.word	0x40004400

08002040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <MX_DMA_Init+0x78>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a1a      	ldr	r2, [pc, #104]	@ (80020b8 <MX_DMA_Init+0x78>)
 8002050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <MX_DMA_Init+0x78>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <MX_DMA_Init+0x78>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a13      	ldr	r2, [pc, #76]	@ (80020b8 <MX_DMA_Init+0x78>)
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_DMA_Init+0x78>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2010      	movs	r0, #16
 8002084:	f001 f843 	bl	800310e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002088:	2010      	movs	r0, #16
 800208a:	f001 f85c 	bl	8003146 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2011      	movs	r0, #17
 8002094:	f001 f83b 	bl	800310e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002098:	2011      	movs	r0, #17
 800209a:	f001 f854 	bl	8003146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	203b      	movs	r0, #59	@ 0x3b
 80020a4:	f001 f833 	bl	800310e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020a8:	203b      	movs	r0, #59	@ 0x3b
 80020aa:	f001 f84c 	bl	8003146 <HAL_NVIC_EnableIRQ>

}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a35      	ldr	r2, [pc, #212]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b33      	ldr	r3, [pc, #204]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b2f      	ldr	r3, [pc, #188]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a2e      	ldr	r2, [pc, #184]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b2c      	ldr	r3, [pc, #176]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <MX_GPIO_Init+0xf4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_PIN_Pin|RESET_PIN_Pin|DC_PIN_Pin|T_CS_PIN_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800212c:	4821      	ldr	r0, [pc, #132]	@ (80021b4 <MX_GPIO_Init+0xf8>)
 800212e:	f001 fddf 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	2140      	movs	r1, #64	@ 0x40
 8002136:	4820      	ldr	r0, [pc, #128]	@ (80021b8 <MX_GPIO_Init+0xfc>)
 8002138:	f001 fdda 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_PIN_Pin RESET_PIN_Pin DC_PIN_Pin T_CS_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin|RESET_PIN_Pin|DC_PIN_Pin|T_CS_PIN_Pin;
 800213c:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002140:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4619      	mov	r1, r3
 8002154:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <MX_GPIO_Init+0xf8>)
 8002156:	f001 fc2f 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_PIN_Pin */
  GPIO_InitStruct.Pin = T_IRQ_PIN_Pin;
 800215a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800215e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_PIN_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4619      	mov	r1, r3
 800216e:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <MX_GPIO_Init+0xf8>)
 8002170:	f001 fc22 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4619      	mov	r1, r3
 800218a:	480b      	ldr	r0, [pc, #44]	@ (80021b8 <MX_GPIO_Init+0xfc>)
 800218c:	f001 fc14 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4619      	mov	r1, r3
 80021a2:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <MX_GPIO_Init+0xfc>)
 80021a4:	f001 fc08 	bl	80039b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400

080021bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <Error_Handler+0x8>

080021c8 <pageSetup>:
#include "check_display_input.h"

char * volumeInSettings = "20";
char * versionString = "v7.2.7	wysi Firmware w/ STM32Cube";

void pageSetup(void){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	ILI9341_Init();
 80021cc:	f7ff f9b8 	bl	8001540 <ILI9341_Init>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	0000      	movs	r0, r0
	...

080021d8 <firstPage>:
void firstPage(void){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af02      	add	r7, sp, #8
	char * str1 = "Automated Leather";
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <firstPage+0xf0>)
 80021e0:	60bb      	str	r3, [r7, #8]
	char * str2 = "Wayang Player 2025";
 80021e2:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <firstPage+0xf4>)
 80021e4:	607b      	str	r3, [r7, #4]

	ILI9341_FillScreen(WHITE);
 80021e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021ea:	f7ff fba1 	bl	8001930 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 80021ee:	2002      	movs	r0, #2
 80021f0:	f7ff fab0 	bl	8001754 <ILI9341_SetRotation>

	ILI9341_DrawText(str1, FONT4, 10, 149, BLACK, WHITE);
 80021f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	2300      	movs	r3, #0
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2395      	movs	r3, #149	@ 0x95
 8002200:	220a      	movs	r2, #10
 8002202:	4933      	ldr	r1, [pc, #204]	@ (80022d0 <firstPage+0xf8>)
 8002204:	68b8      	ldr	r0, [r7, #8]
 8002206:	f7ff f838 	bl	800127a <ILI9341_DrawText>
	ILI9341_DrawText(str2, FONT4, 10, 169, BLACK, WHITE);
 800220a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	23a9      	movs	r3, #169	@ 0xa9
 8002216:	220a      	movs	r2, #10
 8002218:	492d      	ldr	r1, [pc, #180]	@ (80022d0 <firstPage+0xf8>)
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff f82d 	bl	800127a <ILI9341_DrawText>

	HAL_Delay(1000);
 8002220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002224:	f000 fe74 	bl	8002f10 <HAL_Delay>

	// progress bar
	ILI9341_DrawHollowRectangleCoord(8, 200, 231, 219, BLACK);
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	23db      	movs	r3, #219	@ 0xdb
 800222e:	22e7      	movs	r2, #231	@ 0xe7
 8002230:	21c8      	movs	r1, #200	@ 0xc8
 8002232:	2008      	movs	r0, #8
 8002234:	f7fe feca 	bl	8000fcc <ILI9341_DrawHollowRectangleCoord>
	HAL_Delay(500);
 8002238:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800223c:	f000 fe68 	bl	8002f10 <HAL_Delay>
	for (int var = 0; var < 201; var++) {
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e01c      	b.n	8002280 <firstPage+0xa8>
		ILI9341_DrawRectangle(10, 202, 1.1*var, 16, BLUE);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7fe faae 	bl	80007a8 <__aeabi_i2d>
 800224c:	a31c      	add	r3, pc, #112	@ (adr r3, 80022c0 <firstPage+0xe8>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f82d 	bl	80002b0 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fb0d 	bl	800087c <__aeabi_d2uiz>
 8002262:	4603      	mov	r3, r0
 8002264:	b29a      	uxth	r2, r3
 8002266:	231f      	movs	r3, #31
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2310      	movs	r3, #16
 800226c:	21ca      	movs	r1, #202	@ 0xca
 800226e:	200a      	movs	r0, #10
 8002270:	f7ff fbea 	bl	8001a48 <ILI9341_DrawRectangle>
		HAL_Delay(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f000 fe4b 	bl	8002f10 <HAL_Delay>
	for (int var = 0; var < 201; var++) {
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2bc8      	cmp	r3, #200	@ 0xc8
 8002284:	dddf      	ble.n	8002246 <firstPage+0x6e>
	}
	HAL_Delay(100);
 8002286:	2064      	movs	r0, #100	@ 0x64
 8002288:	f000 fe42 	bl	8002f10 <HAL_Delay>

	// remove the progress bar
	ILI9341_DrawFilledRectangleCoord(8, 200, 232, 220, WHITE);
 800228c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	23dc      	movs	r3, #220	@ 0xdc
 8002294:	22e8      	movs	r2, #232	@ 0xe8
 8002296:	21c8      	movs	r1, #200	@ 0xc8
 8002298:	2008      	movs	r0, #8
 800229a:	f7fe ff18 	bl	80010ce <ILI9341_DrawFilledRectangleCoord>

	message("Opening...");
 800229e:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <firstPage+0xfc>)
 80022a0:	f000 f88c 	bl	80023bc <message>
	HAL_Delay(2000);
 80022a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022a8:	f000 fe32 	bl	8002f10 <HAL_Delay>
	message("Tap anywhere");
 80022ac:	480a      	ldr	r0, [pc, #40]	@ (80022d8 <firstPage+0x100>)
 80022ae:	f000 f885 	bl	80023bc <message>

}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	9999999a 	.word	0x9999999a
 80022c4:	3ff19999 	.word	0x3ff19999
 80022c8:	08008dc4 	.word	0x08008dc4
 80022cc:	08008dd8 	.word	0x08008dd8
 80022d0:	08009980 	.word	0x08009980
 80022d4:	08008dec 	.word	0x08008dec
 80022d8:	08008df8 	.word	0x08008df8

080022dc <menuPage>:

void menuPage(void){
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af02      	add	r7, sp, #8
	char * menuString[4] = {
 80022e2:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <menuPage+0xd0>)
 80022e4:	463c      	mov	r4, r7
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"Play the show",
			"Calibrate",
			"Settings",
	};

	ILI9341_FillScreen(WHITE);
 80022ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022f0:	f7ff fb1e 	bl	8001930 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 80022f4:	2002      	movs	r0, #2
 80022f6:	f7ff fa2d 	bl	8001754 <ILI9341_SetRotation>
	// Blue Bar like flutter
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 80022fa:	231f      	movs	r3, #31
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2323      	movs	r3, #35	@ 0x23
 8002300:	22f0      	movs	r2, #240	@ 0xf0
 8002302:	2100      	movs	r1, #0
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fb9f 	bl	8001a48 <ILI9341_DrawRectangle>
	ILI9341_DrawText(menuString[0], FONT4, 10, 10, WHITE, BLUE);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	231f      	movs	r3, #31
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	230a      	movs	r3, #10
 8002318:	220a      	movs	r2, #10
 800231a:	4925      	ldr	r1, [pc, #148]	@ (80023b0 <menuPage+0xd4>)
 800231c:	f7fe ffad 	bl	800127a <ILI9341_DrawText>
	for (int var = 0; var < 3; ++var) {
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e02e      	b.n	8002384 <menuPage+0xa8>
		int y_position = 30*(var + 1) + 20*var + 50;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4619      	mov	r1, r3
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3332      	adds	r3, #50	@ 0x32
 8002342:	613b      	str	r3, [r7, #16]
		ILI9341_DrawRectangle(10, y_position , 220, 40, BLUE);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	b299      	uxth	r1, r3
 8002348:	231f      	movs	r3, #31
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2328      	movs	r3, #40	@ 0x28
 800234e:	22dc      	movs	r2, #220	@ 0xdc
 8002350:	200a      	movs	r0, #10
 8002352:	f7ff fb79 	bl	8001a48 <ILI9341_DrawRectangle>
		ILI9341_DrawText(menuString[var + 1], FONT4, 30, y_position + 10, WHITE, BLUE);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	3318      	adds	r3, #24
 800235e:	443b      	add	r3, r7
 8002360:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	b29b      	uxth	r3, r3
 8002368:	330a      	adds	r3, #10
 800236a:	b29b      	uxth	r3, r3
 800236c:	221f      	movs	r2, #31
 800236e:	9201      	str	r2, [sp, #4]
 8002370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	221e      	movs	r2, #30
 8002378:	490d      	ldr	r1, [pc, #52]	@ (80023b0 <menuPage+0xd4>)
 800237a:	f7fe ff7e 	bl	800127a <ILI9341_DrawText>
	for (int var = 0; var < 3; ++var) {
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b02      	cmp	r3, #2
 8002388:	ddcd      	ble.n	8002326 <menuPage+0x4a>
	};

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <menuPage+0xd8>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	231f      	movs	r3, #31
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f240 1331 	movw	r3, #305	@ 0x131
 800239c:	2205      	movs	r2, #5
 800239e:	4906      	ldr	r1, [pc, #24]	@ (80023b8 <menuPage+0xdc>)
 80023a0:	f7fe ff6b 	bl	800127a <ILI9341_DrawText>
}
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	08008e38 	.word	0x08008e38
 80023b0:	08009980 	.word	0x08009980
 80023b4:	20000008 	.word	0x20000008
 80023b8:	0800919c 	.word	0x0800919c

080023bc <message>:

void message(char *msg){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	6078      	str	r0, [r7, #4]
	ILI9341_DrawText(msg, FONT2, 60, 269, WHITE, BLACK);
 80023c4:	2300      	movs	r3, #0
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f240 130d 	movw	r3, #269	@ 0x10d
 80023d2:	223c      	movs	r2, #60	@ 0x3c
 80023d4:	4903      	ldr	r1, [pc, #12]	@ (80023e4 <message+0x28>)
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe ff4f 	bl	800127a <ILI9341_DrawText>
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	0800919c 	.word	0x0800919c

080023e8 <messageDetail>:

void messageDetail(char * msg){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
	ILI9341_DrawText(msg, FONT2, 60, 284, WHITE, BLACK);
 80023f0:	2300      	movs	r3, #0
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 80023fe:	223c      	movs	r2, #60	@ 0x3c
 8002400:	4903      	ldr	r1, [pc, #12]	@ (8002410 <messageDetail+0x28>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe ff39 	bl	800127a <ILI9341_DrawText>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	0800919c 	.word	0x0800919c

08002414 <clearMessage>:

void clearMessage(){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af02      	add	r7, sp, #8
	ILI9341_DrawText("                                                 ", FONT4, 10, 269, WHITE, WHITE);
 800241a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f240 130d 	movw	r3, #269	@ 0x10d
 800242a:	220a      	movs	r2, #10
 800242c:	4909      	ldr	r1, [pc, #36]	@ (8002454 <clearMessage+0x40>)
 800242e:	480a      	ldr	r0, [pc, #40]	@ (8002458 <clearMessage+0x44>)
 8002430:	f7fe ff23 	bl	800127a <ILI9341_DrawText>
	ILI9341_DrawText("                                                 ", FONT4, 10, 284, WHITE, WHITE);
 8002434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 8002444:	220a      	movs	r2, #10
 8002446:	4903      	ldr	r1, [pc, #12]	@ (8002454 <clearMessage+0x40>)
 8002448:	4803      	ldr	r0, [pc, #12]	@ (8002458 <clearMessage+0x44>)
 800244a:	f7fe ff16 	bl	800127a <ILI9341_DrawText>
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	08009980 	.word	0x08009980
 8002458:	08008e48 	.word	0x08008e48

0800245c <playingPage>:

void playingPage(){
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(WHITE);
 8002462:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002466:	f7ff fa63 	bl	8001930 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff f972 	bl	8001754 <ILI9341_SetRotation>
	// Blue Bar like flutter
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 8002470:	231f      	movs	r3, #31
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2323      	movs	r3, #35	@ 0x23
 8002476:	22f0      	movs	r2, #240	@ 0xf0
 8002478:	2100      	movs	r1, #0
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff fae4 	bl	8001a48 <ILI9341_DrawRectangle>
	ILI9341_DrawText("< Back", FONT4, 10, 10, WHITE, BLUE);
 8002480:	231f      	movs	r3, #31
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	230a      	movs	r3, #10
 800248c:	220a      	movs	r2, #10
 800248e:	4919      	ldr	r1, [pc, #100]	@ (80024f4 <playingPage+0x98>)
 8002490:	4819      	ldr	r0, [pc, #100]	@ (80024f8 <playingPage+0x9c>)
 8002492:	f7fe fef2 	bl	800127a <ILI9341_DrawText>

//	ILI9341_DrawText("Play the show page!", FONT4, 10, 159 + 10, BLUE, WHITE);

	ILI9341_DrawRectangle(10, 80 , 220, 40, BLUE);
 8002496:	231f      	movs	r3, #31
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2328      	movs	r3, #40	@ 0x28
 800249c:	22dc      	movs	r2, #220	@ 0xdc
 800249e:	2150      	movs	r1, #80	@ 0x50
 80024a0:	200a      	movs	r0, #10
 80024a2:	f7ff fad1 	bl	8001a48 <ILI9341_DrawRectangle>
	ILI9341_DrawText("Abort", FONT4, 30, 80 + 10, WHITE, BLUE);
 80024a6:	231f      	movs	r3, #31
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	235a      	movs	r3, #90	@ 0x5a
 80024b2:	221e      	movs	r2, #30
 80024b4:	490f      	ldr	r1, [pc, #60]	@ (80024f4 <playingPage+0x98>)
 80024b6:	4811      	ldr	r0, [pc, #68]	@ (80024fc <playingPage+0xa0>)
 80024b8:	f7fe fedf 	bl	800127a <ILI9341_DrawText>

	ILI9341_DrawText("Currently playing the show...", FONT2, 10, 269, WHITE, BLACK);
 80024bc:	2300      	movs	r3, #0
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f240 130d 	movw	r3, #269	@ 0x10d
 80024ca:	220a      	movs	r2, #10
 80024cc:	490c      	ldr	r1, [pc, #48]	@ (8002500 <playingPage+0xa4>)
 80024ce:	480d      	ldr	r0, [pc, #52]	@ (8002504 <playingPage+0xa8>)
 80024d0:	f7fe fed3 	bl	800127a <ILI9341_DrawText>

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <playingPage+0xac>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	231f      	movs	r3, #31
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f240 1331 	movw	r3, #305	@ 0x131
 80024e6:	2205      	movs	r2, #5
 80024e8:	4905      	ldr	r1, [pc, #20]	@ (8002500 <playingPage+0xa4>)
 80024ea:	f7fe fec6 	bl	800127a <ILI9341_DrawText>

}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	08009980 	.word	0x08009980
 80024f8:	08008e7c 	.word	0x08008e7c
 80024fc:	08008e84 	.word	0x08008e84
 8002500:	0800919c 	.word	0x0800919c
 8002504:	08008e8c 	.word	0x08008e8c
 8002508:	20000008 	.word	0x20000008

0800250c <calibratePage>:

void calibratePage(){
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
	const char * calibrateString[2] = {
 8002512:	4a32      	ldr	r2, [pc, #200]	@ (80025dc <calibratePage+0xd0>)
 8002514:	463b      	mov	r3, r7
 8002516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800251a:	e883 0003 	stmia.w	r3, {r0, r1}
			"V-Slot Linear",
			"Wayang's Hand"
	};
	ILI9341_FillScreen(WHITE);
 800251e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002522:	f7ff fa05 	bl	8001930 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 8002526:	2002      	movs	r0, #2
 8002528:	f7ff f914 	bl	8001754 <ILI9341_SetRotation>
	// Flutter like blue bar
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 800252c:	231f      	movs	r3, #31
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2323      	movs	r3, #35	@ 0x23
 8002532:	22f0      	movs	r2, #240	@ 0xf0
 8002534:	2100      	movs	r1, #0
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff fa86 	bl	8001a48 <ILI9341_DrawRectangle>
	ILI9341_DrawText("< Back", FONT4, 10, 10, WHITE, BLUE);
 800253c:	231f      	movs	r3, #31
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	230a      	movs	r3, #10
 8002548:	220a      	movs	r2, #10
 800254a:	4925      	ldr	r1, [pc, #148]	@ (80025e0 <calibratePage+0xd4>)
 800254c:	4825      	ldr	r0, [pc, #148]	@ (80025e4 <calibratePage+0xd8>)
 800254e:	f7fe fe94 	bl	800127a <ILI9341_DrawText>

//	ILI9341_DrawText("Calibrating page!", FONT4, 10, 159 + 10, BLUE, WHITE);
	for (int var = 0; var < 2; ++var) {
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e02d      	b.n	80025b4 <calibratePage+0xa8>
		int y_position = 30*(var + 1) + 20*var + 50;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4619      	mov	r1, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3332      	adds	r3, #50	@ 0x32
 8002574:	60bb      	str	r3, [r7, #8]
		ILI9341_DrawRectangle(10, y_position , 220, 40, BLUE);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	b299      	uxth	r1, r3
 800257a:	231f      	movs	r3, #31
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2328      	movs	r3, #40	@ 0x28
 8002580:	22dc      	movs	r2, #220	@ 0xdc
 8002582:	200a      	movs	r0, #10
 8002584:	f7ff fa60 	bl	8001a48 <ILI9341_DrawRectangle>
		ILI9341_DrawText(calibrateString[var], FONT4, 30, y_position + 10, WHITE, BLUE);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	3310      	adds	r3, #16
 800258e:	443b      	add	r3, r7
 8002590:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	b29b      	uxth	r3, r3
 8002598:	330a      	adds	r3, #10
 800259a:	b29b      	uxth	r3, r3
 800259c:	221f      	movs	r2, #31
 800259e:	9201      	str	r2, [sp, #4]
 80025a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025a4:	9200      	str	r2, [sp, #0]
 80025a6:	221e      	movs	r2, #30
 80025a8:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <calibratePage+0xd4>)
 80025aa:	f7fe fe66 	bl	800127a <ILI9341_DrawText>
	for (int var = 0; var < 2; ++var) {
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3301      	adds	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	ddce      	ble.n	8002558 <calibratePage+0x4c>
	};

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <calibratePage+0xdc>)
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	231f      	movs	r3, #31
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f240 1331 	movw	r3, #305	@ 0x131
 80025cc:	2205      	movs	r2, #5
 80025ce:	4907      	ldr	r1, [pc, #28]	@ (80025ec <calibratePage+0xe0>)
 80025d0:	f7fe fe53 	bl	800127a <ILI9341_DrawText>
}
 80025d4:	bf00      	nop
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	08008ecc 	.word	0x08008ecc
 80025e0:	08009980 	.word	0x08009980
 80025e4:	08008e7c 	.word	0x08008e7c
 80025e8:	20000008 	.word	0x20000008
 80025ec:	0800919c 	.word	0x0800919c

080025f0 <settingsPage>:

void settingsPage(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
	char * settingString[2] = {
 80025f6:	4a43      	ldr	r2, [pc, #268]	@ (8002704 <settingsPage+0x114>)
 80025f8:	463b      	mov	r3, r7
 80025fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fe:	e883 0003 	stmia.w	r3, {r0, r1}
			"Volume",
			"Voice Language"
	};
	ILI9341_FillScreen(WHITE);
 8002602:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002606:	f7ff f993 	bl	8001930 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_2);
 800260a:	2002      	movs	r0, #2
 800260c:	f7ff f8a2 	bl	8001754 <ILI9341_SetRotation>
	// Blue Bar like flutter
	ILI9341_DrawRectangle(0, 0, 240, 35, BLUE);
 8002610:	231f      	movs	r3, #31
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2323      	movs	r3, #35	@ 0x23
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	2100      	movs	r1, #0
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff fa14 	bl	8001a48 <ILI9341_DrawRectangle>
	ILI9341_DrawText("< Back", FONT4, 10, 10, WHITE, BLUE);
 8002620:	231f      	movs	r3, #31
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	230a      	movs	r3, #10
 800262c:	220a      	movs	r2, #10
 800262e:	4936      	ldr	r1, [pc, #216]	@ (8002708 <settingsPage+0x118>)
 8002630:	4836      	ldr	r0, [pc, #216]	@ (800270c <settingsPage+0x11c>)
 8002632:	f7fe fe22 	bl	800127a <ILI9341_DrawText>

	for (int var = 0; var < 2; ++var) {
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e04e      	b.n	80026da <settingsPage+0xea>
		int y_position = 30*(var + 1) + 20*var + 50;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4619      	mov	r1, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3332      	adds	r3, #50	@ 0x32
 8002658:	60bb      	str	r3, [r7, #8]
		ILI9341_DrawRectangle(10, y_position , 220, 40, BLUE);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	b299      	uxth	r1, r3
 800265e:	231f      	movs	r3, #31
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2328      	movs	r3, #40	@ 0x28
 8002664:	22dc      	movs	r2, #220	@ 0xdc
 8002666:	200a      	movs	r0, #10
 8002668:	f7ff f9ee 	bl	8001a48 <ILI9341_DrawRectangle>
		ILI9341_DrawText(settingString[var], FONT4, 20, y_position + 10, WHITE, BLUE);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3310      	adds	r3, #16
 8002672:	443b      	add	r3, r7
 8002674:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	b29b      	uxth	r3, r3
 800267c:	330a      	adds	r3, #10
 800267e:	b29b      	uxth	r3, r3
 8002680:	221f      	movs	r2, #31
 8002682:	9201      	str	r2, [sp, #4]
 8002684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	2214      	movs	r2, #20
 800268c:	491e      	ldr	r1, [pc, #120]	@ (8002708 <settingsPage+0x118>)
 800268e:	f7fe fdf4 	bl	800127a <ILI9341_DrawText>
		if (var == 0) {
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <settingsPage+0xc8>
			ILI9341_DrawText(volumeInSettings, FONT4, 192, y_position + 10, WHITE, BLUE);
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <settingsPage+0x120>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	330a      	adds	r3, #10
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	221f      	movs	r2, #31
 80026a6:	9201      	str	r2, [sp, #4]
 80026a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ac:	9200      	str	r2, [sp, #0]
 80026ae:	22c0      	movs	r2, #192	@ 0xc0
 80026b0:	4915      	ldr	r1, [pc, #84]	@ (8002708 <settingsPage+0x118>)
 80026b2:	f7fe fde2 	bl	800127a <ILI9341_DrawText>
 80026b6:	e00d      	b.n	80026d4 <settingsPage+0xe4>
		} else {
			ILI9341_DrawText("EN", FONT4, 192, y_position + 10, WHITE, BLUE);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	330a      	adds	r3, #10
 80026be:	b29b      	uxth	r3, r3
 80026c0:	221f      	movs	r2, #31
 80026c2:	9201      	str	r2, [sp, #4]
 80026c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026c8:	9200      	str	r2, [sp, #0]
 80026ca:	22c0      	movs	r2, #192	@ 0xc0
 80026cc:	490e      	ldr	r1, [pc, #56]	@ (8002708 <settingsPage+0x118>)
 80026ce:	4811      	ldr	r0, [pc, #68]	@ (8002714 <settingsPage+0x124>)
 80026d0:	f7fe fdd3 	bl	800127a <ILI9341_DrawText>
	for (int var = 0; var < 2; ++var) {
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	ddad      	ble.n	800263c <settingsPage+0x4c>
		}
	};

	// version
	ILI9341_DrawText(versionString, FONT2, 5, 305, BLUE, WHITE);
 80026e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <settingsPage+0x128>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	231f      	movs	r3, #31
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f240 1331 	movw	r3, #305	@ 0x131
 80026f2:	2205      	movs	r2, #5
 80026f4:	4909      	ldr	r1, [pc, #36]	@ (800271c <settingsPage+0x12c>)
 80026f6:	f7fe fdc0 	bl	800127a <ILI9341_DrawText>

}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	08008ef0 	.word	0x08008ef0
 8002708:	08009980 	.word	0x08009980
 800270c:	08008e7c 	.word	0x08008e7c
 8002710:	20000004 	.word	0x20000004
 8002714:	08008ed4 	.word	0x08008ed4
 8002718:	20000008 	.word	0x20000008
 800271c:	0800919c 	.word	0x0800919c

08002720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b10      	ldr	r3, [pc, #64]	@ (800276c <HAL_MspInit+0x4c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	4a0f      	ldr	r2, [pc, #60]	@ (800276c <HAL_MspInit+0x4c>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002734:	6453      	str	r3, [r2, #68]	@ 0x44
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <HAL_MspInit+0x4c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_MspInit+0x4c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	4a08      	ldr	r2, [pc, #32]	@ (800276c <HAL_MspInit+0x4c>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	@ 0x40
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <HAL_CRC_MspInit+0x3c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10d      	bne.n	800279e <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_CRC_MspInit+0x40>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <HAL_CRC_MspInit+0x40>)
 800278c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HAL_CRC_MspInit+0x40>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023000 	.word	0x40023000
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	@ 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a49      	ldr	r2, [pc, #292]	@ (80028f8 <HAL_SPI_MspInit+0x144>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d15a      	bne.n	800288c <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	4b48      	ldr	r3, [pc, #288]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a47      	ldr	r2, [pc, #284]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80027e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b45      	ldr	r3, [pc, #276]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	4b41      	ldr	r3, [pc, #260]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	4a40      	ldr	r2, [pc, #256]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	@ 0x30
 8002802:	4b3e      	ldr	r3, [pc, #248]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800280e:	23e0      	movs	r3, #224	@ 0xe0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281a:	2303      	movs	r3, #3
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800281e:	2305      	movs	r3, #5
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	4835      	ldr	r0, [pc, #212]	@ (8002900 <HAL_SPI_MspInit+0x14c>)
 800282a:	f001 f8c5 	bl	80039b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800282e:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002830:	4a35      	ldr	r2, [pc, #212]	@ (8002908 <HAL_SPI_MspInit+0x154>)
 8002832:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002834:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002836:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800283a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283c:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 800283e:	2240      	movs	r2, #64	@ 0x40
 8002840:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002842:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 800284a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800284e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002850:	4b2c      	ldr	r3, [pc, #176]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002856:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002862:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002868:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800286e:	4825      	ldr	r0, [pc, #148]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002870:	f000 fca0 	bl	80031b4 <HAL_DMA_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800287a:	f7ff fc9f 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a20      	ldr	r2, [pc, #128]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002882:	649a      	str	r2, [r3, #72]	@ 0x48
 8002884:	4a1f      	ldr	r2, [pc, #124]	@ (8002904 <HAL_SPI_MspInit+0x150>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800288a:	e031      	b.n	80028f0 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_SPI_MspInit+0x158>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d12c      	bne.n	80028f0 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <HAL_SPI_MspInit+0x148>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80028ce:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028e0:	2305      	movs	r3, #5
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4809      	ldr	r0, [pc, #36]	@ (8002910 <HAL_SPI_MspInit+0x15c>)
 80028ec:	f001 f864 	bl	80039b8 <HAL_GPIO_Init>
}
 80028f0:	bf00      	nop
 80028f2:	3730      	adds	r7, #48	@ 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013000 	.word	0x40013000
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000
 8002904:	20000158 	.word	0x20000158
 8002908:	40026458 	.word	0x40026458
 800290c:	40003800 	.word	0x40003800
 8002910:	40020400 	.word	0x40020400

08002914 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	@ 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a4b      	ldr	r2, [pc, #300]	@ (8002a60 <HAL_UART_MspInit+0x14c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	f040 8090 	bne.w	8002a58 <HAL_UART_MspInit+0x144>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_UART_MspInit+0x150>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	4a48      	ldr	r2, [pc, #288]	@ (8002a64 <HAL_UART_MspInit+0x150>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002946:	6413      	str	r3, [r2, #64]	@ 0x40
 8002948:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_UART_MspInit+0x150>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4b42      	ldr	r3, [pc, #264]	@ (8002a64 <HAL_UART_MspInit+0x150>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	4a41      	ldr	r2, [pc, #260]	@ (8002a64 <HAL_UART_MspInit+0x150>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6313      	str	r3, [r2, #48]	@ 0x30
 8002964:	4b3f      	ldr	r3, [pc, #252]	@ (8002a64 <HAL_UART_MspInit+0x150>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002970:	230c      	movs	r3, #12
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002980:	2307      	movs	r3, #7
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4837      	ldr	r0, [pc, #220]	@ (8002a68 <HAL_UART_MspInit+0x154>)
 800298c:	f001 f814 	bl	80039b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 8002992:	4a37      	ldr	r2, [pc, #220]	@ (8002a70 <HAL_UART_MspInit+0x15c>)
 8002994:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002996:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 8002998:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800299c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299e:	4b33      	ldr	r3, [pc, #204]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a4:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029aa:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029b8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80029be:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ca:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029d0:	4826      	ldr	r0, [pc, #152]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029d2:	f000 fbef 	bl	80031b4 <HAL_DMA_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80029dc:	f7ff fbee 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a22      	ldr	r2, [pc, #136]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029e6:	4a21      	ldr	r2, [pc, #132]	@ (8002a6c <HAL_UART_MspInit+0x158>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80029ec:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 80029ee:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_UART_MspInit+0x164>)
 80029f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80029f2:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 80029f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 80029fc:	2240      	movs	r2, #64	@ 0x40
 80029fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a00:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a06:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a2c:	4811      	ldr	r0, [pc, #68]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a2e:	f000 fbc1 	bl	80031b4 <HAL_DMA_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002a38:	f7ff fbc0 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a40:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a42:	4a0c      	ldr	r2, [pc, #48]	@ (8002a74 <HAL_UART_MspInit+0x160>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2026      	movs	r0, #38	@ 0x26
 8002a4e:	f000 fb5e 	bl	800310e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a52:	2026      	movs	r0, #38	@ 0x26
 8002a54:	f000 fb77 	bl	8003146 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	@ 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40004400 	.word	0x40004400
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	20000200 	.word	0x20000200
 8002a70:	40026088 	.word	0x40026088
 8002a74:	20000260 	.word	0x20000260
 8002a78:	400260a0 	.word	0x400260a0

08002a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <NMI_Handler+0x4>

08002a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <HardFault_Handler+0x4>

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <MemManage_Handler+0x4>

08002a94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad2:	f000 f9fd 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <DMA1_Stream5_IRQHandler+0x10>)
 8002ae2:	f000 fcff 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000200 	.word	0x20000200

08002af0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <DMA1_Stream6_IRQHandler+0x10>)
 8002af6:	f000 fcf5 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000260 	.word	0x20000260

08002b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <USART2_IRQHandler+0x10>)
 8002b0a:	f002 fc6f 	bl	80053ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200001b8 	.word	0x200001b8

08002b18 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <DMA2_Stream3_IRQHandler+0x10>)
 8002b1e:	f000 fce1 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000158 	.word	0x20000158

08002b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return 1;
 8002b30:	2301      	movs	r3, #1
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_kill>:

int _kill(int pid, int sig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b46:	f005 f96b 	bl	8007e20 <__errno>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2216      	movs	r2, #22
 8002b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_exit>:

void _exit (int status)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ffe7 	bl	8002b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <_exit+0x12>

08002b72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e00a      	b.n	8002b9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b84:	f3af 8000 	nop.w
 8002b88:	4601      	mov	r1, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	b2ca      	uxtb	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	dbf0      	blt.n	8002b84 <_read+0x12>
  }

  return len;
 8002ba2:	687b      	ldr	r3, [r7, #4]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e009      	b.n	8002bd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	60ba      	str	r2, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	dbf1      	blt.n	8002bbe <_write+0x12>
  }
  return len;
 8002bda:	687b      	ldr	r3, [r7, #4]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_close>:

int _close(int file)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_isatty>:

int _isatty(int file)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f005 f8d0 	bl	8007e20 <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20010000 	.word	0x20010000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	200002c0 	.word	0x200002c0
 8002cb4:	20000658 	.word	0x20000658

08002cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	@ (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <sendDebugMessage>:
	HAL_UART_Transmit(&huart2, data, 16, 500);
	UART_
}
*/

void sendDebugMessage(const char * msg, ...){
 8002cdc:	b40f      	push	{r0, r1, r2, r3}
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b0c2      	sub	sp, #264	@ 0x108
 8002ce2:	af00      	add	r7, sp, #0
	char buff[256];
	va_list args;
	va_start(args, msg);
 8002ce4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cf0:	601a      	str	r2, [r3, #0]
	vsnprintf(buff, sizeof(buff), msg, args);
 8002cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cfa:	f107 0008 	add.w	r0, r7, #8
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d08:	f004 ffda 	bl	8007cc0 <vsniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fa6f 	bl	80001f4 <strlen>
 8002d16:	4603      	mov	r3, r0
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	f107 0108 	add.w	r1, r7, #8
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <sendDebugMessage+0x5c>)
 8002d24:	f002 fa40 	bl	80051a8 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, (uint8_t*)'\n', 1, HAL_MAX_DELAY);
	va_end(args);
}
 8002d28:	bf00      	nop
 8002d2a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d34:	b004      	add	sp, #16
 8002d36:	4770      	bx	lr
 8002d38:	200001b8 	.word	0x200001b8

08002d3c <flushUART>:
	HAL_UART_Transmit(&huart2, t_msg_buffer, 6, HAL_MAX_DELAY);
	return t_msg_buffer;

}

void flushUART(){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)'\n', 1, HAL_MAX_DELAY);
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	2201      	movs	r2, #1
 8002d46:	210a      	movs	r1, #10
 8002d48:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <flushUART+0x18>)
 8002d4a:	f002 fa2d 	bl	80051a8 <HAL_UART_Transmit>
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200001b8 	.word	0x200001b8

08002d58 <receivedMessageBuffer>:

char* receivedMessageBuffer(){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
	uint8_t rxChar;
	char recv_str[7];
	int i = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]

	// empty buffer
	memset(recv_str, 0, 7);
 8002d62:	463b      	mov	r3, r7
 8002d64:	2207      	movs	r2, #7
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f004 ffb7 	bl	8007cdc <memset>

	// do while loop for reading each byte one by one
	do {
		// Receive one byte with a timeout
		if (HAL_UART_Receive(&huart2, &rxChar, 1, 100) == HAL_OK) {
 8002d6e:	1df9      	adds	r1, r7, #7
 8002d70:	2364      	movs	r3, #100	@ 0x64
 8002d72:	2201      	movs	r2, #1
 8002d74:	4817      	ldr	r0, [pc, #92]	@ (8002dd4 <receivedMessageBuffer+0x7c>)
 8002d76:	f002 faa2 	bl	80052be <HAL_UART_Receive>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d111      	bne.n	8002da4 <receivedMessageBuffer+0x4c>
			recv_str[i++] = rxChar;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	60fa      	str	r2, [r7, #12]
 8002d86:	79fa      	ldrb	r2, [r7, #7]
 8002d88:	3310      	adds	r3, #16
 8002d8a:	443b      	add	r3, r7
 8002d8c:	f803 2c10 	strb.w	r2, [r3, #-16]
			if (i > 5) {
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	dc08      	bgt.n	8002da8 <receivedMessageBuffer+0x50>
			}
		} else{
			// do nothing
			break;
		}
	} while (rxChar != '\n' && rxChar != '\r');
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	2b0a      	cmp	r3, #10
 8002d9a:	d006      	beq.n	8002daa <receivedMessageBuffer+0x52>
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	2b0d      	cmp	r3, #13
 8002da0:	d1e5      	bne.n	8002d6e <receivedMessageBuffer+0x16>
 8002da2:	e002      	b.n	8002daa <receivedMessageBuffer+0x52>
			break;
 8002da4:	bf00      	nop
 8002da6:	e000      	b.n	8002daa <receivedMessageBuffer+0x52>
				break;
 8002da8:	bf00      	nop

	recv_str[i] = '\0';
 8002daa:	463a      	mov	r2, r7
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]

	// Allocate first
	char* t_return = (char *)malloc(7);
 8002db4:	2007      	movs	r0, #7
 8002db6:	f004 fd5d 	bl	8007874 <malloc>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	60bb      	str	r3, [r7, #8]

	// Copy the string
	strcpy(t_return, recv_str);
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	f005 f859 	bl	8007e7a <strcpy>


	return t_return;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200001b8 	.word	0x200001b8

08002dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ddc:	f7ff ff6c 	bl	8002cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002de0:	480c      	ldr	r0, [pc, #48]	@ (8002e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002de2:	490d      	ldr	r1, [pc, #52]	@ (8002e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002de4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de8:	e002      	b.n	8002df0 <LoopCopyDataInit>

08002dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dee:	3304      	adds	r3, #4

08002df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df4:	d3f9      	bcc.n	8002dea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002df8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dfc:	e001      	b.n	8002e02 <LoopFillZerobss>

08002dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e00:	3204      	adds	r2, #4

08002e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e04:	d3fb      	bcc.n	8002dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e06:	f005 f811 	bl	8007e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e0a:	f7fe ffdd 	bl	8001dc8 <main>
  bx  lr
 8002e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e18:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002e1c:	0800be94 	.word	0x0800be94
  ldr r2, =_sbss
 8002e20:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002e24:	20000654 	.word	0x20000654

08002e28 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e28:	e7fe      	b.n	8002e28 <ADC_IRQHandler>
	...

08002e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e30:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_Init+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <HAL_Init+0x40>)
 8002e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
 __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_Init+0x40>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_Init+0x40>)
 8002e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e48:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <HAL_Init+0x40>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_Init+0x40>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 f94f 	bl	80030f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5a:	200f      	movs	r0, #15
 8002e5c:	f000 f808 	bl	8002e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e60:	f7ff fc5e 	bl	8002720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023c00 	.word	0x40023c00

08002e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e78:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <HAL_InitTick+0x54>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <HAL_InitTick+0x58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f967 	bl	8003162 <HAL_SYSTICK_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00e      	b.n	8002ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d80a      	bhi.n	8002eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f000 f92f 	bl	800310e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ecc <HAL_InitTick+0x5c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2000000c 	.word	0x2000000c
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	20000010 	.word	0x20000010

08002ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_IncTick+0x20>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <HAL_IncTick+0x24>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <HAL_IncTick+0x24>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000014 	.word	0x20000014
 8002ef4:	200002c4 	.word	0x200002c4

08002ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTick;
 8002efc:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <HAL_GetTick+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200002c4 	.word	0x200002c4

08002f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff ffee 	bl	8002ef8 <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d005      	beq.n	8002f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_Delay+0x44>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f36:	bf00      	nop
 8002f38:	f7ff ffde 	bl	8002ef8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d8f7      	bhi.n	8002f38 <HAL_Delay+0x28>
  {
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000014 	.word	0x20000014

08002f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 0307 	and.w	r3, r3, #7
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	db0b      	blt.n	8002fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4907      	ldr	r1, [pc, #28]	@ (8002ff4 <__NVIC_EnableIRQ+0x38>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2001      	movs	r0, #1
 8002fde:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	@ (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	@ (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	@ 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0307 	rsb	r3, r3, #7
 8003066:	2b04      	cmp	r3, #4
 8003068:	bf28      	it	cs
 800306a:	2304      	movcs	r3, #4
 800306c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3304      	adds	r3, #4
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <NVIC_EncodePriority+0x30>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3b03      	subs	r3, #3
 800307a:	e000      	b.n	800307e <NVIC_EncodePriority+0x32>
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	401a      	ands	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003094:	f04f 31ff 	mov.w	r1, #4294967295
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43d9      	mvns	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	4313      	orrs	r3, r2
         );
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030c4:	d301      	bcc.n	80030ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00f      	b.n	80030ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <SysTick_Config+0x40>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d2:	210f      	movs	r1, #15
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	f7ff ff8e 	bl	8002ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <SysTick_Config+0x40>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e2:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <SysTick_Config+0x40>)
 80030e4:	2207      	movs	r2, #7
 80030e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000e010 	.word	0xe000e010

080030f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ff29 	bl	8002f58 <__NVIC_SetPriorityGrouping>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003120:	f7ff ff3e 	bl	8002fa0 <__NVIC_GetPriorityGrouping>
 8003124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	6978      	ldr	r0, [r7, #20]
 800312c:	f7ff ff8e 	bl	800304c <NVIC_EncodePriority>
 8003130:	4602      	mov	r2, r0
 8003132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff5d 	bl	8002ff8 <__NVIC_SetPriority>
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff31 	bl	8002fbc <__NVIC_EnableIRQ>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffa2 	bl	80030b4 <SysTick_Config>
 8003170:	4603      	mov	r3, r0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e00e      	b.n	80031aa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	795b      	ldrb	r3, [r3, #5]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fae7 	bl	8002770 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff fe9a 	bl	8002ef8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e099      	b.n	8003304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f0:	e00f      	b.n	8003212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031f2:	f7ff fe81 	bl	8002ef8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d908      	bls.n	8003212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e078      	b.n	8003304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e8      	bne.n	80031f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4b38      	ldr	r3, [pc, #224]	@ (800330c <HAL_DMA_Init+0x158>)
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	4313      	orrs	r3, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d117      	bne.n	80032d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb01 	bl	80038c0 <DMA_CheckFifoParam>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2240      	movs	r2, #64	@ 0x40
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032d2:	2301      	movs	r3, #1
 80032d4:	e016      	b.n	8003304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fab8 	bl	8003854 <DMA_CalcBaseAndBitshift>
 80032e4:	4603      	mov	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	223f      	movs	r2, #63	@ 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	f010803f 	.word	0xf010803f

08003310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_DMA_Start_IT+0x26>
 8003332:	2302      	movs	r3, #2
 8003334:	e040      	b.n	80033b8 <HAL_DMA_Start_IT+0xa8>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d12f      	bne.n	80033aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fa4a 	bl	80037f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003368:	223f      	movs	r2, #63	@ 0x3f
 800336a:	409a      	lsls	r2, r3
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0216 	orr.w	r2, r2, #22
 800337e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0208 	orr.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e005      	b.n	80033b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ce:	f7ff fd93 	bl	8002ef8 <HAL_GetTick>
 80033d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e052      	b.n	8003498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0216 	bic.w	r2, r2, #22
 8003400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_DMA_Abort+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003442:	e013      	b.n	800346c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003444:	f7ff fd58 	bl	8002ef8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b05      	cmp	r3, #5
 8003450:	d90c      	bls.n	800346c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e015      	b.n	8003498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e4      	bne.n	8003444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	223f      	movs	r2, #63	@ 0x3f
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d004      	beq.n	80034be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	@ 0x80
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00c      	b.n	80034d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034f0:	4b8e      	ldr	r3, [pc, #568]	@ (800372c <HAL_DMA_IRQHandler+0x248>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003730 <HAL_DMA_IRQHandler+0x24c>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0a9b      	lsrs	r3, r3, #10
 80034fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	2208      	movs	r2, #8
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01a      	beq.n	8003550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	2208      	movs	r2, #8
 800353e:	409a      	lsls	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358a:	2204      	movs	r2, #4
 800358c:	409a      	lsls	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d012      	beq.n	80035bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	2204      	movs	r2, #4
 80035aa:	409a      	lsls	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	2210      	movs	r2, #16
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d043      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d03c      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	2210      	movs	r2, #16
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d024      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
 8003612:	e01f      	b.n	8003654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
 8003624:	e016      	b.n	8003654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0208 	bic.w	r2, r2, #8
 8003642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	2220      	movs	r2, #32
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 808f 	beq.w	8003784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8087 	beq.w	8003784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	2220      	movs	r2, #32
 800367c:	409a      	lsls	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b05      	cmp	r3, #5
 800368c:	d136      	bne.n	80036fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0216 	bic.w	r2, r2, #22
 800369c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_DMA_IRQHandler+0x1da>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0208 	bic.w	r2, r2, #8
 80036cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	223f      	movs	r2, #63	@ 0x3f
 80036d4:	409a      	lsls	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d07e      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
        }
        return;
 80036fa:	e079      	b.n	80037f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01d      	beq.n	8003746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371c:	2b00      	cmp	r3, #0
 800371e:	d031      	beq.n	8003784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
 8003728:	e02c      	b.n	8003784 <HAL_DMA_IRQHandler+0x2a0>
 800372a:	bf00      	nop
 800372c:	2000000c 	.word	0x2000000c
 8003730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d023      	beq.n	8003784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
 8003744:	e01e      	b.n	8003784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10f      	bne.n	8003774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0210 	bic.w	r2, r2, #16
 8003762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003788:	2b00      	cmp	r3, #0
 800378a:	d032      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d022      	beq.n	80037de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2205      	movs	r2, #5
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3301      	adds	r3, #1
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d307      	bcc.n	80037cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f2      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x2cc>
 80037ca:	e000      	b.n	80037ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e000      	b.n	80037f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037f0:	bf00      	nop
    }
  }
}
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d108      	bne.n	8003838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003836:	e007      	b.n	8003848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	60da      	str	r2, [r3, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	3b10      	subs	r3, #16
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800386e:	4a13      	ldr	r2, [pc, #76]	@ (80038bc <DMA_CalcBaseAndBitshift+0x68>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d909      	bls.n	8003896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	1d1a      	adds	r2, r3, #4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	659a      	str	r2, [r3, #88]	@ 0x58
 8003894:	e007      	b.n	80038a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	aaaaaaab 	.word	0xaaaaaaab
 80038bc:	0800aae8 	.word	0x0800aae8

080038c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11f      	bne.n	800391a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d856      	bhi.n	800398e <DMA_CheckFifoParam+0xce>
 80038e0:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <DMA_CheckFifoParam+0x28>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	0800390b 	.word	0x0800390b
 80038f0:	080038f9 	.word	0x080038f9
 80038f4:	0800398f 	.word	0x0800398f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d046      	beq.n	8003992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003908:	e043      	b.n	8003992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003912:	d140      	bne.n	8003996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003918:	e03d      	b.n	8003996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003922:	d121      	bne.n	8003968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d837      	bhi.n	800399a <DMA_CheckFifoParam+0xda>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <DMA_CheckFifoParam+0x70>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003941 	.word	0x08003941
 8003934:	08003947 	.word	0x08003947
 8003938:	08003941 	.word	0x08003941
 800393c:	08003959 	.word	0x08003959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e030      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d025      	beq.n	800399e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e022      	b.n	800399e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003960:	d11f      	bne.n	80039a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003966:	e01c      	b.n	80039a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d903      	bls.n	8003976 <DMA_CheckFifoParam+0xb6>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d003      	beq.n	800397c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003974:	e018      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
      break;
 800397a:	e015      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00e      	beq.n	80039a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e00b      	b.n	80039a6 <DMA_CheckFifoParam+0xe6>
      break;
 800398e:	bf00      	nop
 8003990:	e00a      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003992:	bf00      	nop
 8003994:	e008      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003996:	bf00      	nop
 8003998:	e006      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      break;
 800399a:	bf00      	nop
 800399c:	e004      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <DMA_CheckFifoParam+0xe8>
      break;
 80039a6:	bf00      	nop
    }
  } 
  
  return status; 
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	@ 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e159      	b.n	8003c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039d4:	2201      	movs	r2, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	f040 8148 	bne.w	8003c82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d005      	beq.n	8003a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d130      	bne.n	8003a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2203      	movs	r2, #3
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a40:	2201      	movs	r2, #1
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 0201 	and.w	r2, r3, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d017      	beq.n	8003aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d123      	bne.n	8003afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	08da      	lsrs	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3208      	adds	r2, #8
 8003abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	220f      	movs	r2, #15
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	08da      	lsrs	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3208      	adds	r2, #8
 8003af6:	69b9      	ldr	r1, [r7, #24]
 8003af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 0203 	and.w	r2, r3, #3
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80a2 	beq.w	8003c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	4b57      	ldr	r3, [pc, #348]	@ (8003ca0 <HAL_GPIO_Init+0x2e8>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	4a56      	ldr	r2, [pc, #344]	@ (8003ca0 <HAL_GPIO_Init+0x2e8>)
 8003b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4e:	4b54      	ldr	r3, [pc, #336]	@ (8003ca0 <HAL_GPIO_Init+0x2e8>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b5a:	4a52      	ldr	r2, [pc, #328]	@ (8003ca4 <HAL_GPIO_Init+0x2ec>)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	3302      	adds	r3, #2
 8003b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	220f      	movs	r2, #15
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a49      	ldr	r2, [pc, #292]	@ (8003ca8 <HAL_GPIO_Init+0x2f0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d019      	beq.n	8003bba <HAL_GPIO_Init+0x202>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a48      	ldr	r2, [pc, #288]	@ (8003cac <HAL_GPIO_Init+0x2f4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_GPIO_Init+0x1fe>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a47      	ldr	r2, [pc, #284]	@ (8003cb0 <HAL_GPIO_Init+0x2f8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00d      	beq.n	8003bb2 <HAL_GPIO_Init+0x1fa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a46      	ldr	r2, [pc, #280]	@ (8003cb4 <HAL_GPIO_Init+0x2fc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <HAL_GPIO_Init+0x1f6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a45      	ldr	r2, [pc, #276]	@ (8003cb8 <HAL_GPIO_Init+0x300>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_GPIO_Init+0x1f2>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x204>
 8003baa:	2307      	movs	r3, #7
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x204>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x204>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x204>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x204>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bcc:	4935      	ldr	r1, [pc, #212]	@ (8003ca4 <HAL_GPIO_Init+0x2ec>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bda:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c04:	4b2d      	ldr	r3, [pc, #180]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c28:	4a24      	ldr	r2, [pc, #144]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c2e:	4b23      	ldr	r3, [pc, #140]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c52:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c58:	4b18      	ldr	r3, [pc, #96]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cbc <HAL_GPIO_Init+0x304>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f aea2 	bls.w	80039d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3724      	adds	r7, #36	@ 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40013c00 	.word	0x40013c00

08003cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e001      	b.n	8003ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d00:	787b      	ldrb	r3, [r7, #1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d0c:	e003      	b.n	8003d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	041a      	lsls	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	619a      	str	r2, [r3, #24]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e267      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d075      	beq.n	8003e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d42:	4b88      	ldr	r3, [pc, #544]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b85      	ldr	r3, [pc, #532]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5a:	4b82      	ldr	r3, [pc, #520]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b7e      	ldr	r3, [pc, #504]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e242      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x74>
 8003d8a:	4b76      	ldr	r3, [pc, #472]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a75      	ldr	r2, [pc, #468]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x98>
 8003da2:	4b70      	ldr	r3, [pc, #448]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6f      	ldr	r2, [pc, #444]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b6d      	ldr	r3, [pc, #436]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a6c      	ldr	r2, [pc, #432]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	4b69      	ldr	r3, [pc, #420]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a68      	ldr	r2, [pc, #416]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b66      	ldr	r3, [pc, #408]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a65      	ldr	r2, [pc, #404]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7ff f88c 	bl	8002ef8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7ff f888 	bl	8002ef8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e207      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7ff f878 	bl	8002ef8 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7ff f874 	bl	8002ef8 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1f3      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1e:	4b51      	ldr	r3, [pc, #324]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d063      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d11c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e52:	4b44      	ldr	r3, [pc, #272]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d116      	bne.n	8003e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	4b41      	ldr	r3, [pc, #260]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_RCC_OscConfig+0x152>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e1c7      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e76:	4b3b      	ldr	r3, [pc, #236]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4937      	ldr	r1, [pc, #220]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	e03a      	b.n	8003f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e94:	4b34      	ldr	r3, [pc, #208]	@ (8003f68 <HAL_RCC_OscConfig+0x244>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7ff f82d 	bl	8002ef8 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7ff f829 	bl	8002ef8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1a8      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec0:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4925      	ldr	r1, [pc, #148]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed6:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <HAL_RCC_OscConfig+0x244>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7ff f80c 	bl	8002ef8 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7ff f808 	bl	8002ef8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e187      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d036      	beq.n	8003f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d016      	beq.n	8003f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <HAL_RCC_OscConfig+0x248>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fe ffec 	bl	8002ef8 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe ffe8 	bl	8002ef8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e167      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f36:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <HAL_RCC_OscConfig+0x240>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x200>
 8003f42:	e01b      	b.n	8003f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f44:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_OscConfig+0x248>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fe ffd5 	bl	8002ef8 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	e00e      	b.n	8003f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fe ffd1 	bl	8002ef8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d907      	bls.n	8003f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e150      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
 8003f64:	40023800 	.word	0x40023800
 8003f68:	42470000 	.word	0x42470000
 8003f6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ea      	bne.n	8003f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8097 	beq.w	80040b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8e:	4b81      	ldr	r3, [pc, #516]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10f      	bne.n	8003fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003faa:	4b7a      	ldr	r3, [pc, #488]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fba:	4b77      	ldr	r3, [pc, #476]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d118      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc6:	4b74      	ldr	r3, [pc, #464]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a73      	ldr	r2, [pc, #460]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe ff91 	bl	8002ef8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fda:	f7fe ff8d 	bl	8002ef8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e10c      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fec:	4b6a      	ldr	r3, [pc, #424]	@ (8004198 <HAL_RCC_OscConfig+0x474>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x2ea>
 8004000:	4b64      	ldr	r3, [pc, #400]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a63      	ldr	r2, [pc, #396]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	e01c      	b.n	8004048 <HAL_RCC_OscConfig+0x324>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b05      	cmp	r3, #5
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x30c>
 8004016:	4b5f      	ldr	r3, [pc, #380]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a5e      	ldr	r2, [pc, #376]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
 8004022:	4b5c      	ldr	r3, [pc, #368]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	4a5b      	ldr	r2, [pc, #364]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	@ 0x70
 800402e:	e00b      	b.n	8004048 <HAL_RCC_OscConfig+0x324>
 8004030:	4b58      	ldr	r3, [pc, #352]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	4a57      	ldr	r2, [pc, #348]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	@ 0x70
 800403c:	4b55      	ldr	r3, [pc, #340]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a54      	ldr	r2, [pc, #336]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004042:	f023 0304 	bic.w	r3, r3, #4
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d015      	beq.n	800407c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fe ff52 	bl	8002ef8 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	e00a      	b.n	800406e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fe ff4e 	bl	8002ef8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e0cb      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	4b49      	ldr	r3, [pc, #292]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0ee      	beq.n	8004058 <HAL_RCC_OscConfig+0x334>
 800407a:	e014      	b.n	80040a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fe ff3c 	bl	8002ef8 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	e00a      	b.n	800409a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004084:	f7fe ff38 	bl	8002ef8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e0b5      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	4b3e      	ldr	r3, [pc, #248]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1ee      	bne.n	8004084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d105      	bne.n	80040b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ac:	4b39      	ldr	r3, [pc, #228]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	4a38      	ldr	r2, [pc, #224]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a1 	beq.w	8004204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c2:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d05c      	beq.n	8004188 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d141      	bne.n	800415a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d6:	4b31      	ldr	r3, [pc, #196]	@ (800419c <HAL_RCC_OscConfig+0x478>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fe ff0c 	bl	8002ef8 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fe ff08 	bl	8002ef8 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e087      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	3b01      	subs	r3, #1
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	491b      	ldr	r1, [pc, #108]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b1b      	ldr	r3, [pc, #108]	@ (800419c <HAL_RCC_OscConfig+0x478>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe fee1 	bl	8002ef8 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe fedd 	bl	8002ef8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e05c      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x416>
 8004158:	e054      	b.n	8004204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	4b10      	ldr	r3, [pc, #64]	@ (800419c <HAL_RCC_OscConfig+0x478>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fe feca 	bl	8002ef8 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004168:	f7fe fec6 	bl	8002ef8 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e045      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_RCC_OscConfig+0x470>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x444>
 8004186:	e03d      	b.n	8004204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e038      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
 8004194:	40023800 	.word	0x40023800
 8004198:	40007000 	.word	0x40007000
 800419c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x4ec>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d028      	beq.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d121      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d11a      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d8:	4293      	cmp	r3, r2
 80041da:	d111      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	3b01      	subs	r3, #1
 80041ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0cc      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004228:	4b68      	ldr	r3, [pc, #416]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d90c      	bls.n	8004250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b65      	ldr	r3, [pc, #404]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a58      	ldr	r2, [pc, #352]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a52      	ldr	r2, [pc, #328]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800428a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d044      	beq.n	8004334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b3f      	ldr	r3, [pc, #252]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e2:	4b3b      	ldr	r3, [pc, #236]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e067      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b37      	ldr	r3, [pc, #220]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4934      	ldr	r1, [pc, #208]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004304:	f7fe fdf8 	bl	8002ef8 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fe fdf4 	bl	8002ef8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e04f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d20c      	bcs.n	800435c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	@ (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f821 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	@ (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fd58 	bl	8002e70 <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800aad0 	.word	0x0800aad0
 80043d8:	2000000c 	.word	0x2000000c
 80043dc:	20000010 	.word	0x20000010

080043e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b090      	sub	sp, #64	@ 0x40
 80043e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f8:	4b59      	ldr	r3, [pc, #356]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b08      	cmp	r3, #8
 8004402:	d00d      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x40>
 8004404:	2b08      	cmp	r3, #8
 8004406:	f200 80a1 	bhi.w	800454c <HAL_RCC_GetSysClockFreq+0x16c>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x34>
 800440e:	2b04      	cmp	r3, #4
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x3a>
 8004412:	e09b      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b53      	ldr	r3, [pc, #332]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x184>)
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004418:	e09b      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441a:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x188>)
 800441c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800441e:	e098      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004420:	4b4f      	ldr	r3, [pc, #316]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442a:	4b4d      	ldr	r3, [pc, #308]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d028      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	2200      	movs	r2, #0
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	627a      	str	r2, [r7, #36]	@ 0x24
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004448:	2100      	movs	r1, #0
 800444a:	4b47      	ldr	r3, [pc, #284]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x188>)
 800444c:	fb03 f201 	mul.w	r2, r3, r1
 8004450:	2300      	movs	r3, #0
 8004452:	fb00 f303 	mul.w	r3, r0, r3
 8004456:	4413      	add	r3, r2
 8004458:	4a43      	ldr	r2, [pc, #268]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x188>)
 800445a:	fba0 1202 	umull	r1, r2, r0, r2
 800445e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004460:	460a      	mov	r2, r1
 8004462:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004466:	4413      	add	r3, r2
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800446a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446c:	2200      	movs	r2, #0
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	61fa      	str	r2, [r7, #28]
 8004472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800447a:	f7fc fa1f 	bl	80008bc <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4613      	mov	r3, r2
 8004484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004486:	e053      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004488:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	2200      	movs	r2, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	617a      	str	r2, [r7, #20]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800449a:	f04f 0b00 	mov.w	fp, #0
 800449e:	4652      	mov	r2, sl
 80044a0:	465b      	mov	r3, fp
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b0:	0150      	lsls	r0, r2, #5
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	ebb2 080a 	subs.w	r8, r2, sl
 80044ba:	eb63 090b 	sbc.w	r9, r3, fp
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044d2:	ebb2 0408 	subs.w	r4, r2, r8
 80044d6:	eb63 0509 	sbc.w	r5, r3, r9
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	00eb      	lsls	r3, r5, #3
 80044e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e8:	00e2      	lsls	r2, r4, #3
 80044ea:	4614      	mov	r4, r2
 80044ec:	461d      	mov	r5, r3
 80044ee:	eb14 030a 	adds.w	r3, r4, sl
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	eb45 030b 	adc.w	r3, r5, fp
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004506:	4629      	mov	r1, r5
 8004508:	028b      	lsls	r3, r1, #10
 800450a:	4621      	mov	r1, r4
 800450c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004510:	4621      	mov	r1, r4
 8004512:	028a      	lsls	r2, r1, #10
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451a:	2200      	movs	r2, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	60fa      	str	r2, [r7, #12]
 8004520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004524:	f7fc f9ca 	bl	80008bc <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004530:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x180>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x184>)
 800454e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004554:	4618      	mov	r0, r3
 8004556:	3740      	adds	r7, #64	@ 0x40
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	00f42400 	.word	0x00f42400
 8004568:	017d7840 	.word	0x017d7840

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b03      	ldr	r3, [pc, #12]	@ (8004580 <HAL_RCC_GetHCLKFreq+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	2000000c 	.word	0x2000000c

08004584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004588:	f7ff fff0 	bl	800456c <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0a9b      	lsrs	r3, r3, #10
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	@ (80045a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	0800aae0 	.word	0x0800aae0

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045b0:	f7ff ffdc 	bl	800456c <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0b5b      	lsrs	r3, r3, #13
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4903      	ldr	r1, [pc, #12]	@ (80045d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	0800aae0 	.word	0x0800aae0

080045d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07b      	b.n	80046de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f6:	d009      	beq.n	800460c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
 80045fe:	e005      	b.n	800460c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe f8c4 	bl	80027b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004690:	ea42 0103 	orr.w	r1, r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	0c1b      	lsrs	r3, r3, #16
 80046aa:	f003 0104 	and.w	r1, r3, #4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	f003 0210 	and.w	r2, r3, #16
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b088      	sub	sp, #32
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f6:	f7fe fbff 	bl	8002ef8 <HAL_GetTick>
 80046fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d001      	beq.n	8004710 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	e12a      	b.n	8004966 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_SPI_Transmit+0x36>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e122      	b.n	8004966 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_SPI_Transmit+0x48>
 800472a:	2302      	movs	r3, #2
 800472c:	e11b      	b.n	8004966 <HAL_SPI_Transmit+0x280>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2203      	movs	r2, #3
 800473a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800477c:	d10f      	bne.n	800479e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800479c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d007      	beq.n	80047bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c4:	d152      	bne.n	800486c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Transmit+0xee>
 80047ce:	8b7b      	ldrh	r3, [r7, #26]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d145      	bne.n	8004860 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047f8:	e032      	b.n	8004860 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d112      	bne.n	800482e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800482c:	e018      	b.n	8004860 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800482e:	f7fe fb63 	bl	8002ef8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d803      	bhi.n	8004846 <HAL_SPI_Transmit+0x160>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d102      	bne.n	800484c <HAL_SPI_Transmit+0x166>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e082      	b.n	8004966 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1c7      	bne.n	80047fa <HAL_SPI_Transmit+0x114>
 800486a:	e053      	b.n	8004914 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_Transmit+0x194>
 8004874:	8b7b      	ldrh	r3, [r7, #26]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d147      	bne.n	800490a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048a0:	e033      	b.n	800490a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d113      	bne.n	80048d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048d6:	e018      	b.n	800490a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d8:	f7fe fb0e 	bl	8002ef8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d803      	bhi.n	80048f0 <HAL_SPI_Transmit+0x20a>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d102      	bne.n	80048f6 <HAL_SPI_Transmit+0x210>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e02d      	b.n	8004966 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1c6      	bne.n	80048a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fba1 	bl	8005060 <SPI_EndRxTxTransaction>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004964:	2300      	movs	r3, #0
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b08a      	sub	sp, #40	@ 0x28
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800497c:	2301      	movs	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004980:	f7fe faba 	bl	8002ef8 <HAL_GetTick>
 8004984:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800498c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004998:	7ffb      	ldrb	r3, [r7, #31]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d00c      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x4a>
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049a4:	d106      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x46>
 80049ae:	7ffb      	ldrb	r3, [r7, #31]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d001      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
 80049b6:	e17f      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x5c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x5c>
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e174      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x6e>
 80049d8:	2302      	movs	r3, #2
 80049da:	e16d      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d003      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2205      	movs	r2, #5
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	887a      	ldrh	r2, [r7, #2]
 8004a1a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d007      	beq.n	8004a4c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a54:	d17e      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0xf6>
 8004a5e:	8afb      	ldrh	r3, [r7, #22]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d16c      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a88:	e059      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d11b      	bne.n	8004ad0 <HAL_SPI_TransmitReceive+0x162>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <HAL_SPI_TransmitReceive+0x162>
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d113      	bne.n	8004ad0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	1c9a      	adds	r2, r3, #2
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d119      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x1a4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d014      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	b292      	uxth	r2, r2
 8004af4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b12:	f7fe f9f1 	bl	8002ef8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d80d      	bhi.n	8004b3e <HAL_SPI_TransmitReceive+0x1d0>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d009      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0bc      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1a0      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x11c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d19b      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x11c>
 8004b52:	e082      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x1f4>
 8004b5c:	8afb      	ldrh	r3, [r7, #22]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d171      	bne.n	8004c46 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b88:	e05d      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11c      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x264>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d017      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x264>
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d114      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d119      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x2a6>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d014      	beq.n	8004c14 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c10:	2301      	movs	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c14:	f7fe f970 	bl	8002ef8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d803      	bhi.n	8004c2c <HAL_SPI_TransmitReceive+0x2be>
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_TransmitReceive+0x2c4>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e038      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d19c      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x21c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d197      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f9fe 	bl	8005060 <SPI_EndRxTxTransaction>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e01d      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3728      	adds	r7, #40	@ 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e097      	b.n	8004e0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit_DMA+0x2a>
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e08f      	b.n	8004e0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_SPI_Transmit_DMA+0x3c>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e088      	b.n	8004e0e <HAL_SPI_Transmit_DMA+0x14e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2203      	movs	r2, #3
 8004d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4a:	d10f      	bne.n	8004d6c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d70:	4a29      	ldr	r2, [pc, #164]	@ (8004e18 <HAL_SPI_Transmit_DMA+0x158>)
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <HAL_SPI_Transmit_DMA+0x15c>)
 8004d7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d80:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <HAL_SPI_Transmit_DMA+0x160>)
 8004d82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	4619      	mov	r1, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004da4:	f7fe fab4 	bl	8003310 <HAL_DMA_Start_IT>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db2:	f043 0210 	orr.w	r2, r3, #16
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e023      	b.n	8004e0e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b40      	cmp	r3, #64	@ 0x40
 8004dd2:	d007      	beq.n	8004de4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004de2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0220 	orr.w	r2, r2, #32
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0202 	orr.w	r2, r2, #2
 8004e0a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	08004ef5 	.word	0x08004ef5
 8004e1c:	08004e4d 	.word	0x08004e4d
 8004e20:	08004f11 	.word	0x08004f11

08004e24 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e5a:	f7fe f84d 	bl	8002ef8 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6e:	d03b      	beq.n	8004ee8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0220 	bic.w	r2, r2, #32
 8004e7e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0202 	bic.w	r2, r2, #2
 8004e8e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	2164      	movs	r1, #100	@ 0x64
 8004e94:	6978      	ldr	r0, [r7, #20]
 8004e96:	f000 f8e3 	bl	8005060 <SPI_EndRxTxTransaction>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ee0:	6978      	ldr	r0, [r7, #20]
 8004ee2:	f7ff ffa9 	bl	8004e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ee6:	e002      	b.n	8004eee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004ee8:	6978      	ldr	r0, [r7, #20]
 8004eea:	f7fc fa11 	bl	8001310 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff ff8e 	bl	8004e24 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0203 	bic.w	r2, r2, #3
 8004f2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	f043 0210 	orr.w	r2, r3, #16
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7ff ff78 	bl	8004e38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f60:	f7fd ffca 	bl	8002ef8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f70:	f7fd ffc2 	bl	8002ef8 <HAL_GetTick>
 8004f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f76:	4b39      	ldr	r3, [pc, #228]	@ (800505c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	015b      	lsls	r3, r3, #5
 8004f7c:	0d1b      	lsrs	r3, r3, #20
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	fb02 f303 	mul.w	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f86:	e055      	b.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d051      	beq.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f90:	f7fd ffb2 	bl	8002ef8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d902      	bls.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d13d      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fbe:	d111      	bne.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc8:	d004      	beq.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd2:	d107      	bne.n	8004fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fec:	d10f      	bne.n	800500e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800500c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e018      	b.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	e002      	b.n	8005034 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3b01      	subs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	429a      	cmp	r2, r3
 8005050:	d19a      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2000000c 	.word	0x2000000c

08005060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2201      	movs	r2, #1
 8005074:	2102      	movs	r1, #2
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff ff6a 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e032      	b.n	80050f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005092:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <SPI_EndRxTxTransaction+0xa0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1b      	ldr	r2, [pc, #108]	@ (8005104 <SPI_EndRxTxTransaction+0xa4>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	0d5b      	lsrs	r3, r3, #21
 800509e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050b0:	d112      	bne.n	80050d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	@ 0x80
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff ff47 	bl	8004f50 <SPI_WaitFlagStateUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d016      	beq.n	80050f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e00f      	b.n	80050f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ee:	2b80      	cmp	r3, #128	@ 0x80
 80050f0:	d0f2      	beq.n	80050d8 <SPI_EndRxTxTransaction+0x78>
 80050f2:	e000      	b.n	80050f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80050f4:	bf00      	nop
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	2000000c 	.word	0x2000000c
 8005104:	165e9f81 	.word	0x165e9f81

08005108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e042      	b.n	80051a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fd fbf0 	bl	8002914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	@ 0x24
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800514a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fe0b 	bl	8005d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	@ 0x28
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d175      	bne.n	80052b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Transmit+0x2c>
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e06e      	b.n	80052b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2221      	movs	r2, #33	@ 0x21
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e6:	f7fd fe87 	bl	8002ef8 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	88fa      	ldrh	r2, [r7, #6]
 80051f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005200:	d108      	bne.n	8005214 <HAL_UART_Transmit+0x6c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e003      	b.n	800521c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800521c:	e02e      	b.n	800527c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	2180      	movs	r1, #128	@ 0x80
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fba9 	bl	8005980 <UART_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e03a      	b.n	80052b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	3302      	adds	r3, #2
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e007      	b.n	800526e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	3301      	adds	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1cb      	bne.n	800521e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2140      	movs	r1, #64	@ 0x40
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fb75 	bl	8005980 <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e006      	b.n	80052b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08a      	sub	sp, #40	@ 0x28
 80052c2:	af02      	add	r7, sp, #8
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	f040 8081 	bne.w	80053e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Receive+0x2e>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e079      	b.n	80053e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2222      	movs	r2, #34	@ 0x22
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005304:	f7fd fdf8 	bl	8002ef8 <HAL_GetTick>
 8005308:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531e:	d108      	bne.n	8005332 <HAL_UART_Receive+0x74>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	e003      	b.n	800533a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800533a:	e047      	b.n	80053cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2200      	movs	r2, #0
 8005344:	2120      	movs	r1, #32
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fb1a 	bl	8005980 <UART_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e042      	b.n	80053e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10c      	bne.n	800537e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005370:	b29a      	uxth	r2, r3
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	3302      	adds	r3, #2
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	e01f      	b.n	80053be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	d007      	beq.n	8005398 <HAL_UART_Receive+0xda>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <HAL_UART_Receive+0xe8>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	e008      	b.n	80053b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	3301      	adds	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1b2      	bne.n	800533c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b0ba      	sub	sp, #232	@ 0xe8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005418:	2300      	movs	r3, #0
 800541a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800542a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10f      	bne.n	8005452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_UART_IRQHandler+0x66>
 800543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fbcd 	bl	8005bea <UART_Receive_IT>
      return;
 8005450:	e273      	b.n	800593a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80de 	beq.w	8005618 <HAL_UART_IRQHandler+0x22c>
 800545c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80d1 	beq.w	8005618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xae>
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_UART_IRQHandler+0xd2>
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f043 0202 	orr.w	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_UART_IRQHandler+0xf6>
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d011      	beq.n	8005512 <HAL_UART_IRQHandler+0x126>
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d105      	bne.n	8005506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	f043 0208 	orr.w	r2, r3, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 820a 	beq.w	8005930 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_UART_IRQHandler+0x14e>
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fb58 	bl	8005bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	bf0c      	ite	eq
 8005548:	2301      	moveq	r3, #1
 800554a:	2300      	movne	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <HAL_UART_IRQHandler+0x17a>
 800555e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04f      	beq.n	8005606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa63 	bl	8005a32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d141      	bne.n	80055fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3314      	adds	r3, #20
 80055a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1d9      	bne.n	800557a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d013      	beq.n	80055f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d2:	4a8a      	ldr	r2, [pc, #552]	@ (80057fc <HAL_UART_IRQHandler+0x410>)
 80055d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd ff60 	bl	80034a0 <HAL_DMA_Abort_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	e00e      	b.n	8005614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9ac 	bl	8005954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	e00a      	b.n	8005614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f9a8 	bl	8005954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	e006      	b.n	8005614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9a4 	bl	8005954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005612:	e18d      	b.n	8005930 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	bf00      	nop
    return;
 8005616:	e18b      	b.n	8005930 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 8167 	bne.w	80058f0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8160 	beq.w	80058f0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8159 	beq.w	80058f0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60bb      	str	r3, [r7, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	f040 80ce 	bne.w	8005800 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a9 	beq.w	80057cc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005682:	429a      	cmp	r2, r3
 8005684:	f080 80a2 	bcs.w	80057cc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800568e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569a:	f000 8088 	beq.w	80057ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800570e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005712:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005716:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e1      	bne.n	80056ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800573c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800574a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800574c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005750:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e3      	bne.n	8005726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800577c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577e:	f023 0310 	bic.w	r3, r3, #16
 8005782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	330c      	adds	r3, #12
 800578c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005790:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005792:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005796:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800579e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e3      	bne.n	800576c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fd fe09 	bl	80033c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8cf 	bl	8005968 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057ca:	e0b3      	b.n	8005934 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057d4:	429a      	cmp	r2, r3
 80057d6:	f040 80ad 	bne.w	8005934 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e4:	f040 80a6 	bne.w	8005934 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f8b7 	bl	8005968 <HAL_UARTEx_RxEventCallback>
      return;
 80057fa:	e09b      	b.n	8005934 <HAL_UART_IRQHandler+0x548>
 80057fc:	08005af9 	.word	0x08005af9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005808:	b29b      	uxth	r3, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 808e 	beq.w	8005938 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800581c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8089 	beq.w	8005938 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800584a:	647a      	str	r2, [r7, #68]	@ 0x44
 800584c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e3      	bne.n	8005826 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	623b      	str	r3, [r7, #32]
   return(result);
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005882:	633a      	str	r2, [r7, #48]	@ 0x30
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058c8:	61fa      	str	r2, [r7, #28]
 80058ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	617b      	str	r3, [r7, #20]
   return(result);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f83d 	bl	8005968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058ee:	e023      	b.n	8005938 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_UART_IRQHandler+0x524>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f906 	bl	8005b1a <UART_Transmit_IT>
    return;
 800590e:	e014      	b.n	800593a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <HAL_UART_IRQHandler+0x54e>
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f946 	bl	8005bba <UART_EndTransmit_IT>
    return;
 800592e:	e004      	b.n	800593a <HAL_UART_IRQHandler+0x54e>
    return;
 8005930:	bf00      	nop
 8005932:	e002      	b.n	800593a <HAL_UART_IRQHandler+0x54e>
      return;
 8005934:	bf00      	nop
 8005936:	e000      	b.n	800593a <HAL_UART_IRQHandler+0x54e>
      return;
 8005938:	bf00      	nop
  }
}
 800593a:	37e8      	adds	r7, #232	@ 0xe8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005990:	e03b      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d037      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fd faad 	bl	8002ef8 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e03a      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b80      	cmp	r3, #128	@ 0x80
 80059c6:	d020      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d01d      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d116      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f81d 	bl	8005a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2208      	movs	r2, #8
 80059fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e00f      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4013      	ands	r3, r2
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	bf0c      	ite	eq
 8005a1a:	2301      	moveq	r3, #1
 8005a1c:	2300      	movne	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d0b4      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b095      	sub	sp, #84	@ 0x54
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3314      	adds	r3, #20
 8005a74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d119      	bne.n	8005ade <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 0310 	bic.w	r3, r3, #16
 8005ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aca:	61ba      	str	r2, [r7, #24]
 8005acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005aec:	bf00      	nop
 8005aee:	3754      	adds	r7, #84	@ 0x54
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff ff21 	bl	8005954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b21      	cmp	r3, #33	@ 0x21
 8005b2c:	d13e      	bne.n	8005bac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b36:	d114      	bne.n	8005b62 <UART_Transmit_IT+0x48>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d110      	bne.n	8005b62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]
 8005b60:	e008      	b.n	8005b74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6211      	str	r1, [r2, #32]
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10f      	bne.n	8005ba8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff feb0 	bl	8005940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08c      	sub	sp, #48	@ 0x30
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b22      	cmp	r3, #34	@ 0x22
 8005c04:	f040 80aa 	bne.w	8005d5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d115      	bne.n	8005c3e <UART_Receive_IT+0x54>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d111      	bne.n	8005c3e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c3c:	e024      	b.n	8005c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4c:	d007      	beq.n	8005c5e <UART_Receive_IT+0x74>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <UART_Receive_IT+0x82>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e008      	b.n	8005c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d15d      	bne.n	8005d58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0220 	bic.w	r2, r2, #32
 8005caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d135      	bne.n	8005d4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d08:	623a      	str	r2, [r7, #32]
 8005d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	69f9      	ldr	r1, [r7, #28]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d10a      	bne.n	8005d40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe0e 	bl	8005968 <HAL_UARTEx_RxEventCallback>
 8005d4c:	e002      	b.n	8005d54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb f932 	bl	8000fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	e002      	b.n	8005d5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3730      	adds	r7, #48	@ 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d6c:	b0c0      	sub	sp, #256	@ 0x100
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	68d9      	ldr	r1, [r3, #12]
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	ea40 0301 	orr.w	r3, r0, r1
 8005d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dc0:	f021 010c 	bic.w	r1, r1, #12
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	6999      	ldr	r1, [r3, #24]
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	ea40 0301 	orr.w	r3, r0, r1
 8005dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b8f      	ldr	r3, [pc, #572]	@ (8006034 <UART_SetConfig+0x2cc>)
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d005      	beq.n	8005e08 <UART_SetConfig+0xa0>
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b8d      	ldr	r3, [pc, #564]	@ (8006038 <UART_SetConfig+0x2d0>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d104      	bne.n	8005e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7fe fbd0 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 8005e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e10:	e003      	b.n	8005e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7fe fbb7 	bl	8004584 <HAL_RCC_GetPCLK1Freq>
 8005e16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e24:	f040 810c 	bne.w	8006040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	1891      	adds	r1, r2, r2
 8005e40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e42:	415b      	adcs	r3, r3
 8005e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	eb12 0801 	adds.w	r8, r2, r1
 8005e50:	4629      	mov	r1, r5
 8005e52:	eb43 0901 	adc.w	r9, r3, r1
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	f04f 0300 	mov.w	r3, #0
 8005e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e6a:	4690      	mov	r8, r2
 8005e6c:	4699      	mov	r9, r3
 8005e6e:	4623      	mov	r3, r4
 8005e70:	eb18 0303 	adds.w	r3, r8, r3
 8005e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e78:	462b      	mov	r3, r5
 8005e7a:	eb49 0303 	adc.w	r3, r9, r3
 8005e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e96:	460b      	mov	r3, r1
 8005e98:	18db      	adds	r3, r3, r3
 8005e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005eac:	f7fa fd06 	bl	80008bc <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4b61      	ldr	r3, [pc, #388]	@ (800603c <UART_SetConfig+0x2d4>)
 8005eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	011c      	lsls	r4, r3, #4
 8005ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f00:	4692      	mov	sl, r2
 8005f02:	469b      	mov	fp, r3
 8005f04:	4643      	mov	r3, r8
 8005f06:	eb1a 0303 	adds.w	r3, sl, r3
 8005f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f0e:	464b      	mov	r3, r9
 8005f10:	eb4b 0303 	adc.w	r3, fp, r3
 8005f14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	18db      	adds	r3, r3, r3
 8005f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f32:	4613      	mov	r3, r2
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f42:	f7fa fcbb 	bl	80008bc <__aeabi_uldivmod>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800603c <UART_SetConfig+0x2d4>)
 8005f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	2264      	movs	r2, #100	@ 0x64
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	1acb      	subs	r3, r1, r3
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f62:	4b36      	ldr	r3, [pc, #216]	@ (800603c <UART_SetConfig+0x2d4>)
 8005f64:	fba3 2302 	umull	r2, r3, r3, r2
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f70:	441c      	add	r4, r3
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f84:	4642      	mov	r2, r8
 8005f86:	464b      	mov	r3, r9
 8005f88:	1891      	adds	r1, r2, r2
 8005f8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f8c:	415b      	adcs	r3, r3
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f94:	4641      	mov	r1, r8
 8005f96:	1851      	adds	r1, r2, r1
 8005f98:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	414b      	adcs	r3, r1
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fac:	4659      	mov	r1, fp
 8005fae:	00cb      	lsls	r3, r1, #3
 8005fb0:	4651      	mov	r1, sl
 8005fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	00ca      	lsls	r2, r1, #3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	189b      	adds	r3, r3, r2
 8005fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fc8:	464b      	mov	r3, r9
 8005fca:	460a      	mov	r2, r1
 8005fcc:	eb42 0303 	adc.w	r3, r2, r3
 8005fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fe8:	460b      	mov	r3, r1
 8005fea:	18db      	adds	r3, r3, r3
 8005fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fee:	4613      	mov	r3, r2
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ffe:	f7fa fc5d 	bl	80008bc <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <UART_SetConfig+0x2d4>)
 8006008:	fba3 1302 	umull	r1, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2164      	movs	r1, #100	@ 0x64
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	3332      	adds	r3, #50	@ 0x32
 800601a:	4a08      	ldr	r2, [pc, #32]	@ (800603c <UART_SetConfig+0x2d4>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 0207 	and.w	r2, r3, #7
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4422      	add	r2, r4
 800602e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006030:	e106      	b.n	8006240 <UART_SetConfig+0x4d8>
 8006032:	bf00      	nop
 8006034:	40011000 	.word	0x40011000
 8006038:	40011400 	.word	0x40011400
 800603c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800604a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800604e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006052:	4642      	mov	r2, r8
 8006054:	464b      	mov	r3, r9
 8006056:	1891      	adds	r1, r2, r2
 8006058:	6239      	str	r1, [r7, #32]
 800605a:	415b      	adcs	r3, r3
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
 800605e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006062:	4641      	mov	r1, r8
 8006064:	1854      	adds	r4, r2, r1
 8006066:	4649      	mov	r1, r9
 8006068:	eb43 0501 	adc.w	r5, r3, r1
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	00eb      	lsls	r3, r5, #3
 8006076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607a:	00e2      	lsls	r2, r4, #3
 800607c:	4614      	mov	r4, r2
 800607e:	461d      	mov	r5, r3
 8006080:	4643      	mov	r3, r8
 8006082:	18e3      	adds	r3, r4, r3
 8006084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006088:	464b      	mov	r3, r9
 800608a:	eb45 0303 	adc.w	r3, r5, r3
 800608e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800609e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060ae:	4629      	mov	r1, r5
 80060b0:	008b      	lsls	r3, r1, #2
 80060b2:	4621      	mov	r1, r4
 80060b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b8:	4621      	mov	r1, r4
 80060ba:	008a      	lsls	r2, r1, #2
 80060bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060c0:	f7fa fbfc 	bl	80008bc <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4b60      	ldr	r3, [pc, #384]	@ (800624c <UART_SetConfig+0x4e4>)
 80060ca:	fba3 2302 	umull	r2, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	011c      	lsls	r4, r3, #4
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060e4:	4642      	mov	r2, r8
 80060e6:	464b      	mov	r3, r9
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	61b9      	str	r1, [r7, #24]
 80060ec:	415b      	adcs	r3, r3
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f4:	4641      	mov	r1, r8
 80060f6:	1851      	adds	r1, r2, r1
 80060f8:	6139      	str	r1, [r7, #16]
 80060fa:	4649      	mov	r1, r9
 80060fc:	414b      	adcs	r3, r1
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800610c:	4659      	mov	r1, fp
 800610e:	00cb      	lsls	r3, r1, #3
 8006110:	4651      	mov	r1, sl
 8006112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006116:	4651      	mov	r1, sl
 8006118:	00ca      	lsls	r2, r1, #3
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	4603      	mov	r3, r0
 8006120:	4642      	mov	r2, r8
 8006122:	189b      	adds	r3, r3, r2
 8006124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006128:	464b      	mov	r3, r9
 800612a:	460a      	mov	r2, r1
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800613e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800614c:	4649      	mov	r1, r9
 800614e:	008b      	lsls	r3, r1, #2
 8006150:	4641      	mov	r1, r8
 8006152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006156:	4641      	mov	r1, r8
 8006158:	008a      	lsls	r2, r1, #2
 800615a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800615e:	f7fa fbad 	bl	80008bc <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4611      	mov	r1, r2
 8006168:	4b38      	ldr	r3, [pc, #224]	@ (800624c <UART_SetConfig+0x4e4>)
 800616a:	fba3 2301 	umull	r2, r3, r3, r1
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	2264      	movs	r2, #100	@ 0x64
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	1acb      	subs	r3, r1, r3
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	3332      	adds	r3, #50	@ 0x32
 800617c:	4a33      	ldr	r2, [pc, #204]	@ (800624c <UART_SetConfig+0x4e4>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006188:	441c      	add	r4, r3
 800618a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618e:	2200      	movs	r2, #0
 8006190:	673b      	str	r3, [r7, #112]	@ 0x70
 8006192:	677a      	str	r2, [r7, #116]	@ 0x74
 8006194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	1891      	adds	r1, r2, r2
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	415b      	adcs	r3, r3
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061a8:	4641      	mov	r1, r8
 80061aa:	1851      	adds	r1, r2, r1
 80061ac:	6039      	str	r1, [r7, #0]
 80061ae:	4649      	mov	r1, r9
 80061b0:	414b      	adcs	r3, r1
 80061b2:	607b      	str	r3, [r7, #4]
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061c0:	4659      	mov	r1, fp
 80061c2:	00cb      	lsls	r3, r1, #3
 80061c4:	4651      	mov	r1, sl
 80061c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ca:	4651      	mov	r1, sl
 80061cc:	00ca      	lsls	r2, r1, #3
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	4642      	mov	r2, r8
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061da:	464b      	mov	r3, r9
 80061dc:	460a      	mov	r2, r1
 80061de:	eb42 0303 	adc.w	r3, r2, r3
 80061e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	f04f 0300 	mov.w	r3, #0
 80061f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061fc:	4649      	mov	r1, r9
 80061fe:	008b      	lsls	r3, r1, #2
 8006200:	4641      	mov	r1, r8
 8006202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006206:	4641      	mov	r1, r8
 8006208:	008a      	lsls	r2, r1, #2
 800620a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800620e:	f7fa fb55 	bl	80008bc <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4b0d      	ldr	r3, [pc, #52]	@ (800624c <UART_SetConfig+0x4e4>)
 8006218:	fba3 1302 	umull	r1, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	2164      	movs	r1, #100	@ 0x64
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	3332      	adds	r3, #50	@ 0x32
 800622a:	4a08      	ldr	r2, [pc, #32]	@ (800624c <UART_SetConfig+0x4e4>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4422      	add	r2, r4
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006246:	46bd      	mov	sp, r7
 8006248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800624c:	51eb851f 	.word	0x51eb851f

08006250 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
    {
 8006258:	4a04      	ldr	r2, [pc, #16]	@ (800626c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
    }
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	0800ab60 	.word	0x0800ab60

08006270 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
    }
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ffe9 	bl	8006250 <_ZN8touchgfx4FontD1Ev>
 800627e:	2114      	movs	r1, #20
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 faa5 	bl	80077d0 <_ZdlPvj>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8006290:	b590      	push	{r4, r7, lr}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e010      	b.n	80062c8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	681c      	ldr	r4, [r3, #0]
 80062b6:	f107 030f 	add.w	r3, r7, #15
 80062ba:	f107 0210 	add.w	r2, r7, #16
 80062be:	8879      	ldrh	r1, [r7, #2]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	47a0      	blx	r4
 80062c4:	6178      	str	r0, [r7, #20]
        return glyph;
 80062c6:	697b      	ldr	r3, [r7, #20]
    }
 80062c8:	4618      	mov	r0, r3
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd90      	pop	{r4, r7, pc}

080062d0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	89db      	ldrh	r3, [r3, #14]
    }
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8a1b      	ldrh	r3, [r3, #16]
    }
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	88db      	ldrh	r3, [r3, #6]
    }
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	889b      	ldrh	r3, [r3, #4]
    }
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7a9b      	ldrb	r3, [r3, #10]
 800633c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8006340:	b2db      	uxtb	r3, r3
    }
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	7a9b      	ldrb	r3, [r3, #10]
 800635a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800635e:	b2db      	uxtb	r3, r3
    }
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    {
        return false;
 8006374:	2300      	movs	r3, #0
    }
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	ee07 3a90 	vmov	s15, r3
    }
 8006392:	eeb0 0a67 	vmov.f32	s0, s15
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	4a05      	ldr	r2, [pc, #20]	@ (80063c0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ff4d 	bl	8006250 <_ZN8touchgfx4FontD1Ev>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	0800abc4 	.word	0x0800abc4

080063c4 <_ZN8touchgfx9ConstFontD0Ev>:
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ffe7 	bl	80063a0 <_ZN8touchgfx9ConstFontD1Ev>
 80063d2:	211c      	movs	r1, #28
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f9fb 	bl	80077d0 <_ZdlPvj>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	4a05      	ldr	r2, [pc, #20]	@ (8006404 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ffd3 	bl	80063a0 <_ZN8touchgfx9ConstFontD1Ev>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	0800aaf8 	.word	0x0800aaf8

08006408 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff ffe7 	bl	80063e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8006416:	212c      	movs	r1, #44	@ 0x2c
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 f9d9 	bl	80077d0 <_ZdlPvj>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8006458:	b580      	push	{r7, lr}
 800645a:	b08e      	sub	sp, #56	@ 0x38
 800645c:	af0a      	add	r7, sp, #40	@ 0x28
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	460b      	mov	r3, r1
 8006468:	80fb      	strh	r3, [r7, #6]
 800646a:	4613      	mov	r3, r2
 800646c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	88b9      	ldrh	r1, [r7, #4]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006478:	9308      	str	r3, [sp, #32]
 800647a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006482:	9306      	str	r3, [sp, #24]
 8006484:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006488:	9305      	str	r3, [sp, #20]
 800648a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648e:	9304      	str	r3, [sp, #16]
 8006490:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006494:	9303      	str	r3, [sp, #12]
 8006496:	f897 3020 	ldrb.w	r3, [r7, #32]
 800649a:	9302      	str	r3, [sp, #8]
 800649c:	7f3b      	ldrb	r3, [r7, #28]
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	8b3b      	ldrh	r3, [r7, #24]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	460b      	mov	r3, r1
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	f000 fbf4 	bl	8006c94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80064ac:	4a09      	ldr	r2, [pc, #36]	@ (80064d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064b6:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064bc:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c2:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c8:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	0800aaf8 	.word	0x0800aaf8

080064d8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3302      	adds	r3, #2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	461a      	mov	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	889b      	ldrh	r3, [r3, #4]
 800650a:	0adb      	lsrs	r3, r3, #11
 800650c:	b29b      	uxth	r3, r3
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4413      	add	r3, r2
}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800652a:	b480      	push	{r7}
 800652c:	b089      	sub	sp, #36	@ 0x24
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	460b      	mov	r3, r1
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	7b1b      	ldrb	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8006546:	2300      	movs	r3, #0
 8006548:	e032      	b.n	80065b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1a      	ldr	r2, [r3, #32]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	7b5b      	ldrb	r3, [r3, #13]
 8006556:	b21b      	sxth	r3, r3
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	b21b      	sxth	r3, r3
 800655c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006560:	b219      	sxth	r1, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	7adb      	ldrb	r3, [r3, #11]
 8006566:	b21b      	sxth	r3, r3
 8006568:	430b      	orrs	r3, r1
 800656a:	b21b      	sxth	r3, r3
 800656c:	b29b      	uxth	r3, r3
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7b1b      	ldrb	r3, [r3, #12]
 8006578:	837b      	strh	r3, [r7, #26]
 800657a:	e013      	b.n	80065a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	897a      	ldrh	r2, [r7, #10]
 8006582:	429a      	cmp	r2, r3
 8006584:	d103      	bne.n	800658e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800658c:	e010      	b.n	80065b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	897a      	ldrh	r2, [r7, #10]
 8006594:	429a      	cmp	r2, r3
 8006596:	d309      	bcc.n	80065ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8006598:	8b7b      	ldrh	r3, [r7, #26]
 800659a:	3b01      	subs	r3, #1
 800659c:	837b      	strh	r3, [r7, #26]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	3304      	adds	r3, #4
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	8b7b      	ldrh	r3, [r7, #26]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e8      	bne.n	800657c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 80065aa:	e000      	b.n	80065ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 80065ac:	bf00      	nop
        }
    }
    return 0;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3724      	adds	r7, #36	@ 0x24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
 80065c0:	4801      	ldr	r0, [pc, #4]	@ (80065c8 <__tcf_0+0xc>)
 80065c2:	f7ff ff0f 	bl	80063e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200002c8 	.word	0x200002c8

080065cc <_Z23getFont_verdana_10_4bppv>:
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08e      	sub	sp, #56	@ 0x38
 80065d0:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80065d2:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f3bf 8f5b 	dmb	ish
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d030      	beq.n	800664e <_Z23getFont_verdana_10_4bppv+0x82>
 80065ec:	481a      	ldr	r0, [pc, #104]	@ (8006658 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80065ee:	f001 f8f1 	bl	80077d4 <__cxa_guard_acquire>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d025      	beq.n	800664e <_Z23getFont_verdana_10_4bppv+0x82>
 8006602:	2300      	movs	r3, #0
 8006604:	930c      	str	r3, [sp, #48]	@ 0x30
 8006606:	2300      	movs	r3, #0
 8006608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800660a:	2300      	movs	r3, #0
 800660c:	930a      	str	r3, [sp, #40]	@ 0x28
 800660e:	233f      	movs	r3, #63	@ 0x3f
 8006610:	9309      	str	r3, [sp, #36]	@ 0x24
 8006612:	4b12      	ldr	r3, [pc, #72]	@ (800665c <_Z23getFont_verdana_10_4bppv+0x90>)
 8006614:	9308      	str	r3, [sp, #32]
 8006616:	4b12      	ldr	r3, [pc, #72]	@ (8006660 <_Z23getFont_verdana_10_4bppv+0x94>)
 8006618:	9307      	str	r3, [sp, #28]
 800661a:	2300      	movs	r3, #0
 800661c:	9306      	str	r3, [sp, #24]
 800661e:	2300      	movs	r3, #0
 8006620:	9305      	str	r3, [sp, #20]
 8006622:	2301      	movs	r3, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	2304      	movs	r3, #4
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	2300      	movs	r3, #0
 800662c:	9302      	str	r3, [sp, #8]
 800662e:	2300      	movs	r3, #0
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	230a      	movs	r3, #10
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	230a      	movs	r3, #10
 8006638:	2201      	movs	r2, #1
 800663a:	490a      	ldr	r1, [pc, #40]	@ (8006664 <_Z23getFont_verdana_10_4bppv+0x98>)
 800663c:	480a      	ldr	r0, [pc, #40]	@ (8006668 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800663e:	f7ff ff0b 	bl	8006458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006642:	480a      	ldr	r0, [pc, #40]	@ (800666c <_Z23getFont_verdana_10_4bppv+0xa0>)
 8006644:	f001 f910 	bl	8007868 <atexit>
 8006648:	4803      	ldr	r0, [pc, #12]	@ (8006658 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800664a:	f001 f8cf 	bl	80077ec <__cxa_guard_release>
    return verdana_10_4bpp;
 800664e:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	200002f4 	.word	0x200002f4
 800665c:	0800be34 	.word	0x0800be34
 8006660:	0800be6c 	.word	0x0800be6c
 8006664:	0800bd34 	.word	0x0800bd34
 8006668:	200002c8 	.word	0x200002c8
 800666c:	080065bd 	.word	0x080065bd

08006670 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__tcf_0+0xc>)
 8006676:	f7ff feb5 	bl	80063e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800667a:	bd80      	pop	{r7, pc}
 800667c:	200002f8 	.word	0x200002f8

08006680 <_Z23getFont_verdana_20_4bppv>:
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	@ 0x38
 8006684:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006686:	4b21      	ldr	r3, [pc, #132]	@ (800670c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f3bf 8f5b 	dmb	ish
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf0c      	ite	eq
 8006696:	2301      	moveq	r3, #1
 8006698:	2300      	movne	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d030      	beq.n	8006702 <_Z23getFont_verdana_20_4bppv+0x82>
 80066a0:	481a      	ldr	r0, [pc, #104]	@ (800670c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80066a2:	f001 f897 	bl	80077d4 <__cxa_guard_acquire>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d025      	beq.n	8006702 <_Z23getFont_verdana_20_4bppv+0x82>
 80066b6:	2300      	movs	r3, #0
 80066b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80066ba:	2300      	movs	r3, #0
 80066bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066be:	2300      	movs	r3, #0
 80066c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c2:	233f      	movs	r3, #63	@ 0x3f
 80066c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <_Z23getFont_verdana_20_4bppv+0x90>)
 80066c8:	9308      	str	r3, [sp, #32]
 80066ca:	4b12      	ldr	r3, [pc, #72]	@ (8006714 <_Z23getFont_verdana_20_4bppv+0x94>)
 80066cc:	9307      	str	r3, [sp, #28]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9306      	str	r3, [sp, #24]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9305      	str	r3, [sp, #20]
 80066d6:	2301      	movs	r3, #1
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	2304      	movs	r3, #4
 80066dc:	9303      	str	r3, [sp, #12]
 80066de:	2300      	movs	r3, #0
 80066e0:	9302      	str	r3, [sp, #8]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	2314      	movs	r3, #20
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2314      	movs	r3, #20
 80066ec:	2201      	movs	r2, #1
 80066ee:	490a      	ldr	r1, [pc, #40]	@ (8006718 <_Z23getFont_verdana_20_4bppv+0x98>)
 80066f0:	480a      	ldr	r0, [pc, #40]	@ (800671c <_Z23getFont_verdana_20_4bppv+0x9c>)
 80066f2:	f7ff feb1 	bl	8006458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80066f6:	480a      	ldr	r0, [pc, #40]	@ (8006720 <_Z23getFont_verdana_20_4bppv+0xa0>)
 80066f8:	f001 f8b6 	bl	8007868 <atexit>
 80066fc:	4803      	ldr	r0, [pc, #12]	@ (800670c <_Z23getFont_verdana_20_4bppv+0x8c>)
 80066fe:	f001 f875 	bl	80077ec <__cxa_guard_release>
    return verdana_20_4bpp;
 8006702:	4b06      	ldr	r3, [pc, #24]	@ (800671c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000324 	.word	0x20000324
 8006710:	0800be38 	.word	0x0800be38
 8006714:	0800be70 	.word	0x0800be70
 8006718:	0800bd44 	.word	0x0800bd44
 800671c:	200002f8 	.word	0x200002f8
 8006720:	08006671 	.word	0x08006671

08006724 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
 8006728:	4801      	ldr	r0, [pc, #4]	@ (8006730 <__tcf_0+0xc>)
 800672a:	f7ff fe5b 	bl	80063e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000328 	.word	0x20000328

08006734 <_Z23getFont_verdana_40_4bppv>:
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08e      	sub	sp, #56	@ 0x38
 8006738:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 48, 40, 0, 0, 4, 1, 0, 1, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800673a:	4b21      	ldr	r3, [pc, #132]	@ (80067c0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f3bf 8f5b 	dmb	ish
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d030      	beq.n	80067b6 <_Z23getFont_verdana_40_4bppv+0x82>
 8006754:	481a      	ldr	r0, [pc, #104]	@ (80067c0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8006756:	f001 f83d 	bl	80077d4 <__cxa_guard_acquire>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	bf14      	ite	ne
 8006760:	2301      	movne	r3, #1
 8006762:	2300      	moveq	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d025      	beq.n	80067b6 <_Z23getFont_verdana_40_4bppv+0x82>
 800676a:	2300      	movs	r3, #0
 800676c:	930c      	str	r3, [sp, #48]	@ 0x30
 800676e:	2300      	movs	r3, #0
 8006770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006772:	2300      	movs	r3, #0
 8006774:	930a      	str	r3, [sp, #40]	@ 0x28
 8006776:	233f      	movs	r3, #63	@ 0x3f
 8006778:	9309      	str	r3, [sp, #36]	@ 0x24
 800677a:	4b12      	ldr	r3, [pc, #72]	@ (80067c4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800677c:	9308      	str	r3, [sp, #32]
 800677e:	4b12      	ldr	r3, [pc, #72]	@ (80067c8 <_Z23getFont_verdana_40_4bppv+0x94>)
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	2301      	movs	r3, #1
 8006784:	9306      	str	r3, [sp, #24]
 8006786:	2300      	movs	r3, #0
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	2301      	movs	r3, #1
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	2304      	movs	r3, #4
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	2300      	movs	r3, #0
 8006794:	9302      	str	r3, [sp, #8]
 8006796:	2300      	movs	r3, #0
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	2328      	movs	r3, #40	@ 0x28
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	2330      	movs	r3, #48	@ 0x30
 80067a0:	2210      	movs	r2, #16
 80067a2:	490a      	ldr	r1, [pc, #40]	@ (80067cc <_Z23getFont_verdana_40_4bppv+0x98>)
 80067a4:	480a      	ldr	r0, [pc, #40]	@ (80067d0 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80067a6:	f7ff fe57 	bl	8006458 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80067aa:	480a      	ldr	r0, [pc, #40]	@ (80067d4 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80067ac:	f001 f85c 	bl	8007868 <atexit>
 80067b0:	4803      	ldr	r0, [pc, #12]	@ (80067c0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80067b2:	f001 f81b 	bl	80077ec <__cxa_guard_release>
    return verdana_40_4bpp;
 80067b6:	4b06      	ldr	r3, [pc, #24]	@ (80067d0 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000354 	.word	0x20000354
 80067c4:	0800be3c 	.word	0x0800be3c
 80067c8:	0800be74 	.word	0x0800be74
 80067cc:	0800bd54 	.word	0x0800bd54
 80067d0:	20000328 	.word	0x20000328
 80067d4:	08006725 	.word	0x08006725

080067d8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	460b      	mov	r3, r1
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	817b      	strh	r3, [r7, #10]
        return 0;
 80067e6:	2300      	movs	r3, #0
    }
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
        return 0;
 80067fc:	2300      	movs	r3, #0
    }
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
        return 0;
 8006812:	2300      	movs	r3, #0
    }
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006820:	b40e      	push	{r1, r2, r3}
 8006822:	b580      	push	{r7, lr}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800682a:	f107 0320 	add.w	r3, r7, #32
 800682e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	2100      	movs	r1, #0
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f902 	bl	8006a40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800683c:	4603      	mov	r3, r0
 800683e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006840:	89fb      	ldrh	r3, [r7, #14]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800684c:	b003      	add	sp, #12
 800684e:	4770      	bx	lr

08006850 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006850:	b40c      	push	{r2, r3}
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	460b      	mov	r3, r1
 800685c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800685e:	f107 031c 	add.w	r3, r7, #28
 8006862:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006864:	78f9      	ldrb	r1, [r7, #3]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8e8 	bl	8006a40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8006870:	4603      	mov	r3, r0
 8006872:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006874:	89fb      	ldrh	r3, [r7, #14]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006880:	b002      	add	sp, #8
 8006882:	4770      	bx	lr

08006884 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	@ 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006894:	2b00      	cmp	r3, #0
 8006896:	d016      	beq.n	80068c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3322      	adds	r3, #34	@ 0x22
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	8adb      	ldrh	r3, [r3, #22]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80068a6:	4b43      	ldr	r3, [pc, #268]	@ (80069b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80068a8:	4a43      	ldr	r2, [pc, #268]	@ (80069b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80068aa:	21c5      	movs	r1, #197	@ 0xc5
 80068ac:	4843      	ldr	r0, [pc, #268]	@ (80069bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80068ae:	f000 ffbd 	bl	800782c <__assert_func>
            return buffer[pos];
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	8a9b      	ldrh	r3, [r3, #20]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d06a      	beq.n	80069a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 ff60 	bl	8007792 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3322      	adds	r3, #34	@ 0x22
 80068d6:	623b      	str	r3, [r7, #32]
 80068d8:	2301      	movs	r3, #1
 80068da:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	8adb      	ldrh	r3, [r3, #22]
 80068e0:	8bfa      	ldrh	r2, [r7, #30]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d305      	bcc.n	80068f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80068e6:	4b36      	ldr	r3, [pc, #216]	@ (80069c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80068e8:	4a36      	ldr	r2, [pc, #216]	@ (80069c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80068ea:	21cb      	movs	r1, #203	@ 0xcb
 80068ec:	4833      	ldr	r0, [pc, #204]	@ (80069bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80068ee:	f000 ff9d 	bl	800782c <__assert_func>
            const uint16_t index = pos + offset;
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	8a9a      	ldrh	r2, [r3, #20]
 80068f6:	8bfb      	ldrh	r3, [r7, #30]
 80068f8:	4413      	add	r3, r2
 80068fa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	2b09      	cmp	r3, #9
 8006900:	d801      	bhi.n	8006906 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8006902:	8bbb      	ldrh	r3, [r7, #28]
 8006904:	e001      	b.n	800690a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8006906:	8bbb      	ldrh	r3, [r7, #28]
 8006908:	3b0a      	subs	r3, #10
 800690a:	6a3a      	ldr	r2, [r7, #32]
 800690c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006910:	f640 123f 	movw	r2, #2367	@ 0x93f
 8006914:	4293      	cmp	r3, r2
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d03f      	beq.n	80069a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3322      	adds	r3, #34	@ 0x22
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	3222      	adds	r2, #34	@ 0x22
 800692a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	8ad2      	ldrh	r2, [r2, #22]
 8006930:	2a00      	cmp	r2, #0
 8006932:	d105      	bne.n	8006940 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8006934:	4b1f      	ldr	r3, [pc, #124]	@ (80069b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006936:	4a20      	ldr	r2, [pc, #128]	@ (80069b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006938:	21c5      	movs	r1, #197	@ 0xc5
 800693a:	4820      	ldr	r0, [pc, #128]	@ (80069bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800693c:	f000 ff76 	bl	800782c <__assert_func>
            return buffer[pos];
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	8a92      	ldrh	r2, [r2, #20]
 8006944:	4611      	mov	r1, r2
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	4613      	mov	r3, r2
 8006950:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	8adb      	ldrh	r3, [r3, #22]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d806      	bhi.n	8006968 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800695a:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800695c:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800695e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8006962:	4816      	ldr	r0, [pc, #88]	@ (80069bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006964:	f000 ff62 	bl	800782c <__assert_func>
            const uint16_t index = pos + 1;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	8a9b      	ldrh	r3, [r3, #20]
 800696c:	3301      	adds	r3, #1
 800696e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8006970:	89bb      	ldrh	r3, [r7, #12]
 8006972:	2b09      	cmp	r3, #9
 8006974:	d801      	bhi.n	800697a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8006976:	89bb      	ldrh	r3, [r7, #12]
 8006978:	e000      	b.n	800697c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800697a:	2300      	movs	r3, #0
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	89f9      	ldrh	r1, [r7, #14]
 8006980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8006984:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3322      	adds	r3, #34	@ 0x22
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	f640 133f 	movw	r3, #2367	@ 0x93f
 8006990:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	8a9b      	ldrh	r3, [r3, #20]
 8006996:	4619      	mov	r1, r3
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	8afa      	ldrh	r2, [r7, #22]
 800699c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80069a0:	bf00      	nop
        }
    }
    return getNextChar();
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fdf8 	bl	8007598 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80069a8:	4603      	mov	r3, r0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	@ 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08008ef8 	.word	0x08008ef8
 80069b8:	08008f04 	.word	0x08008f04
 80069bc:	08008fb0 	.word	0x08008fb0
 80069c0:	08008ff8 	.word	0x08008ff8
 80069c4:	08009008 	.word	0x08009008
 80069c8:	080090dc 	.word	0x080090dc
 80069cc:	080090e8 	.word	0x080090e8

080069d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fda4 	bl	8007526 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <_Z41__static_initialization_and_destruction_0v>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
    &(getFont_verdana_20_4bpp()),
 80069ec:	f7ff fe48 	bl	8006680 <_Z23getFont_verdana_20_4bppv>
 80069f0:	4603      	mov	r3, r0
};
 80069f2:	4a07      	ldr	r2, [pc, #28]	@ (8006a10 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80069f4:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80069f6:	f7ff fe9d 	bl	8006734 <_Z23getFont_verdana_40_4bppv>
 80069fa:	4603      	mov	r3, r0
};
 80069fc:	4a04      	ldr	r2, [pc, #16]	@ (8006a10 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80069fe:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8006a00:	f7ff fde4 	bl	80065cc <_Z23getFont_verdana_10_4bppv>
 8006a04:	4603      	mov	r3, r0
};
 8006a06:	4a02      	ldr	r2, [pc, #8]	@ (8006a10 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8006a08:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000358 	.word	0x20000358

08006a14 <_GLOBAL__sub_I_touchgfx_fonts>:
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	f7ff ffe6 	bl	80069e8 <_Z41__static_initialization_and_destruction_0v>
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8006a20:	4b01      	ldr	r3, [pc, #4]	@ (8006a28 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	4770      	bx	lr
 8006a28:	20000364 	.word	0x20000364

08006a2c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8006a2c:	4b03      	ldr	r3, [pc, #12]	@ (8006a3c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	805a      	strh	r2, [r3, #2]
 8006a34:	809a      	strh	r2, [r3, #4]
 8006a36:	80da      	strh	r2, [r3, #6]
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000368 	.word	0x20000368

08006a40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	4606      	mov	r6, r0
 8006a46:	b09d      	sub	sp, #116	@ 0x74
 8006a48:	a803      	add	r0, sp, #12
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	468a      	mov	sl, r1
 8006a4e:	461d      	mov	r5, r3
 8006a50:	f000 f9b2 	bl	8006db8 <_ZN8touchgfx12TextProviderC1Ev>
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	4630      	mov	r0, r6
 8006a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5a:	4798      	blx	r3
 8006a5c:	6833      	ldr	r3, [r6, #0]
 8006a5e:	4607      	mov	r7, r0
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	4630      	mov	r0, r6
 8006a64:	4798      	blx	r3
 8006a66:	462a      	mov	r2, r5
 8006a68:	9000      	str	r0, [sp, #0]
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	a803      	add	r0, sp, #12
 8006a70:	f000 f9f5 	bl	8006e5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8006a74:	2500      	movs	r5, #0
 8006a76:	462c      	mov	r4, r5
 8006a78:	46a9      	mov	r9, r5
 8006a7a:	46a8      	mov	r8, r5
 8006a7c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8006a80:	2300      	movs	r3, #0
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	d002      	beq.n	8006a92 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8006a8c:	455c      	cmp	r4, fp
 8006a8e:	bf18      	it	ne
 8006a90:	4625      	movne	r5, r4
 8006a92:	ab02      	add	r3, sp, #8
 8006a94:	4632      	mov	r2, r6
 8006a96:	4651      	mov	r1, sl
 8006a98:	a803      	add	r0, sp, #12
 8006a9a:	f000 fcfb 	bl	8007494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	b108      	cbz	r0, 8006aa6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8006aa2:	280a      	cmp	r0, #10
 8006aa4:	d10a      	bne.n	8006abc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8006aa6:	45c1      	cmp	r9, r8
 8006aa8:	bf38      	it	cc
 8006aaa:	46c1      	movcc	r9, r8
 8006aac:	f04f 0800 	mov.w	r8, #0
 8006ab0:	2c00      	cmp	r4, #0
 8006ab2:	d1e5      	bne.n	8006a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	b01d      	add	sp, #116	@ 0x74
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	9a02      	ldr	r2, [sp, #8]
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	d0de      	beq.n	8006a80 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8006ac2:	7b57      	ldrb	r7, [r2, #13]
 8006ac4:	6833      	ldr	r3, [r6, #0]
 8006ac6:	8894      	ldrh	r4, [r2, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aca:	007f      	lsls	r7, r7, #1
 8006acc:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8006ad0:	7a97      	ldrb	r7, [r2, #10]
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4307      	orrs	r7, r0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	4798      	blx	r3
 8006ada:	4438      	add	r0, r7
 8006adc:	4480      	add	r8, r0
 8006ade:	fa1f f888 	uxth.w	r8, r8
 8006ae2:	e7e5      	b.n	8006ab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08006ae4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8006ae4:	b508      	push	{r3, lr}
 8006ae6:	6803      	ldr	r3, [r0, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4798      	blx	r3
 8006aec:	b128      	cbz	r0, 8006afa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8006aee:	7b43      	ldrb	r3, [r0, #13]
 8006af0:	7a80      	ldrb	r0, [r0, #10]
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af8:	4318      	orrs	r0, r3
 8006afa:	bd08      	pop	{r3, pc}

08006afc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8006afc:	b40e      	push	{r1, r2, r3}
 8006afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b00:	b09e      	sub	sp, #120	@ 0x78
 8006b02:	ab23      	add	r3, sp, #140	@ 0x8c
 8006b04:	4605      	mov	r5, r0
 8006b06:	f853 4b04 	ldr.w	r4, [r3], #4
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	a805      	add	r0, sp, #20
 8006b0e:	f000 f953 	bl	8006db8 <_ZN8touchgfx12TextProviderC1Ev>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	4628      	mov	r0, r5
 8006b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b18:	4798      	blx	r3
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b20:	4628      	mov	r0, r5
 8006b22:	4798      	blx	r3
 8006b24:	4633      	mov	r3, r6
 8006b26:	ae1e      	add	r6, sp, #120	@ 0x78
 8006b28:	4621      	mov	r1, r4
 8006b2a:	9000      	str	r0, [sp, #0]
 8006b2c:	9a03      	ldr	r2, [sp, #12]
 8006b2e:	2400      	movs	r4, #0
 8006b30:	a805      	add	r0, sp, #20
 8006b32:	f000 f994 	bl	8006e5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8006b36:	f846 4d68 	str.w	r4, [r6, #-104]!
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4633      	mov	r3, r6
 8006b3e:	4621      	mov	r1, r4
 8006b40:	a805      	add	r0, sp, #20
 8006b42:	f000 fca7 	bl	8007494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006b46:	b1f0      	cbz	r0, 8006b86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8006b48:	280a      	cmp	r0, #10
 8006b4a:	d018      	beq.n	8006b7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8006b4c:	9f04      	ldr	r7, [sp, #16]
 8006b4e:	b1b7      	cbz	r7, 8006b7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8006b50:	7b78      	ldrb	r0, [r7, #13]
 8006b52:	7a3b      	ldrb	r3, [r7, #8]
 8006b54:	88ea      	ldrh	r2, [r5, #6]
 8006b56:	00c1      	lsls	r1, r0, #3
 8006b58:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8006b5c:	4319      	orrs	r1, r3
 8006b5e:	0643      	lsls	r3, r0, #25
 8006b60:	bf44      	itt	mi
 8006b62:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8006b66:	b219      	sxthmi	r1, r3
 8006b68:	0100      	lsls	r0, r0, #4
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8006b70:	4303      	orrs	r3, r0
 8006b72:	4413      	add	r3, r2
 8006b74:	1a5b      	subs	r3, r3, r1
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	bfb8      	it	lt
 8006b7c:	461c      	movlt	r4, r3
 8006b7e:	4633      	mov	r3, r6
 8006b80:	462a      	mov	r2, r5
 8006b82:	2100      	movs	r1, #0
 8006b84:	e7dc      	b.n	8006b40 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8006b86:	b2a0      	uxth	r0, r4
 8006b88:	b01e      	add	sp, #120	@ 0x78
 8006b8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006b8e:	b003      	add	sp, #12
 8006b90:	4770      	bx	lr

08006b92 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8006b92:	7a43      	ldrb	r3, [r0, #9]
 8006b94:	8880      	ldrh	r0, [r0, #4]
 8006b96:	4418      	add	r0, r3
 8006b98:	b280      	uxth	r0, r0
 8006b9a:	4770      	bx	lr

08006b9c <_ZNK8touchgfx4Font13getFontHeightEv>:
 8006b9c:	6803      	ldr	r3, [r0, #0]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba0:	4718      	bx	r3

08006ba2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8006ba2:	b40e      	push	{r1, r2, r3}
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	b09d      	sub	sp, #116	@ 0x74
 8006ba8:	ab21      	add	r3, sp, #132	@ 0x84
 8006baa:	4604      	mov	r4, r0
 8006bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	a803      	add	r0, sp, #12
 8006bb4:	f000 f900 	bl	8006db8 <_ZN8touchgfx12TextProviderC1Ev>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbe:	4798      	blx	r3
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4798      	blx	r3
 8006bca:	4633      	mov	r3, r6
 8006bcc:	9000      	str	r0, [sp, #0]
 8006bce:	9a02      	ldr	r2, [sp, #8]
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	a803      	add	r0, sp, #12
 8006bd4:	f000 f943 	bl	8006e5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8006bd8:	a803      	add	r0, sp, #12
 8006bda:	f000 fcdd 	bl	8007598 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006bde:	2401      	movs	r4, #1
 8006be0:	b2a3      	uxth	r3, r4
 8006be2:	b140      	cbz	r0, 8006bf6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8006be4:	280a      	cmp	r0, #10
 8006be6:	bf08      	it	eq
 8006be8:	3301      	addeq	r3, #1
 8006bea:	a803      	add	r0, sp, #12
 8006bec:	bf08      	it	eq
 8006bee:	b21c      	sxtheq	r4, r3
 8006bf0:	f000 fcd2 	bl	8007598 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006bf4:	e7f4      	b.n	8006be0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	b01d      	add	sp, #116	@ 0x74
 8006bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bfe:	b003      	add	sp, #12
 8006c00:	4770      	bx	lr

08006c02 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8006c02:	b40e      	push	{r1, r2, r3}
 8006c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c06:	b09e      	sub	sp, #120	@ 0x78
 8006c08:	ab23      	add	r3, sp, #140	@ 0x8c
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c10:	9303      	str	r3, [sp, #12]
 8006c12:	a805      	add	r0, sp, #20
 8006c14:	f000 f8d0 	bl	8006db8 <_ZN8touchgfx12TextProviderC1Ev>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1e:	4798      	blx	r3
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	4606      	mov	r6, r0
 8006c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c26:	4620      	mov	r0, r4
 8006c28:	4798      	blx	r3
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	9000      	str	r0, [sp, #0]
 8006c30:	9a03      	ldr	r2, [sp, #12]
 8006c32:	a805      	add	r0, sp, #20
 8006c34:	ad1e      	add	r5, sp, #120	@ 0x78
 8006c36:	f000 f912 	bl	8006e5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8006c40:	4622      	mov	r2, r4
 8006c42:	462b      	mov	r3, r5
 8006c44:	a805      	add	r0, sp, #20
 8006c46:	f000 fc25 	bl	8007494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006c4a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8006c4e:	b1d8      	cbz	r0, 8006c88 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8006c50:	280a      	cmp	r0, #10
 8006c52:	d012      	beq.n	8006c7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8006c54:	9804      	ldr	r0, [sp, #16]
 8006c56:	b180      	cbz	r0, 8006c7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8006c58:	7b47      	ldrb	r7, [r0, #13]
 8006c5a:	88e2      	ldrh	r2, [r4, #6]
 8006c5c:	00fb      	lsls	r3, r7, #3
 8006c5e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8006c62:	7a03      	ldrb	r3, [r0, #8]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	0679      	lsls	r1, r7, #25
 8006c68:	bf44      	itt	mi
 8006c6a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8006c6e:	b21b      	sxthmi	r3, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	b21b      	sxth	r3, r3
 8006c74:	429e      	cmp	r6, r3
 8006c76:	bfa8      	it	ge
 8006c78:	461e      	movge	r6, r3
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	2100      	movs	r1, #0
 8006c80:	a805      	add	r0, sp, #20
 8006c82:	f000 fc07 	bl	8007494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8006c86:	e7e2      	b.n	8006c4e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	b01e      	add	sp, #120	@ 0x78
 8006c8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006c90:	b003      	add	sp, #12
 8006c92:	4770      	bx	lr

08006c94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8006c94:	b530      	push	{r4, r5, lr}
 8006c96:	8083      	strh	r3, [r0, #4]
 8006c98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006c9c:	80c3      	strh	r3, [r0, #6]
 8006c9e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006ca2:	7203      	strb	r3, [r0, #8]
 8006ca4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006ca8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8006cac:	7243      	strb	r3, [r0, #9]
 8006cae:	7a83      	ldrb	r3, [r0, #10]
 8006cb0:	6141      	str	r1, [r0, #20]
 8006cb2:	f365 0306 	bfi	r3, r5, #0, #7
 8006cb6:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8006cba:	8302      	strh	r2, [r0, #24]
 8006cbc:	f365 13c7 	bfi	r3, r5, #7, #1
 8006cc0:	7283      	strb	r3, [r0, #10]
 8006cc2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8006cc6:	72c3      	strb	r3, [r0, #11]
 8006cc8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8006ccc:	7303      	strb	r3, [r0, #12]
 8006cce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8006cd2:	81c3      	strh	r3, [r0, #14]
 8006cd4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8006cd8:	8203      	strh	r3, [r0, #16]
 8006cda:	4b01      	ldr	r3, [pc, #4]	@ (8006ce0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8006cdc:	6003      	str	r3, [r0, #0]
 8006cde:	bd30      	pop	{r4, r5, pc}
 8006ce0:	0800abc4 	.word	0x0800abc4

08006ce4 <_ZNK8touchgfx9ConstFont4findEt>:
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce6:	6944      	ldr	r4, [r0, #20]
 8006ce8:	b3bc      	cbz	r4, 8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006cea:	88a3      	ldrh	r3, [r4, #4]
 8006cec:	8b02      	ldrh	r2, [r0, #24]
 8006cee:	1acb      	subs	r3, r1, r3
 8006cf0:	f102 32ff 	add.w	r2, r2, #4294967295
 8006cf4:	d431      	bmi.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	dd0c      	ble.n	8006d14 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8006cfa:	230e      	movs	r3, #14
 8006cfc:	fb03 4302 	mla	r3, r3, r2, r4
 8006d00:	889b      	ldrh	r3, [r3, #4]
 8006d02:	1a5b      	subs	r3, r3, r1
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	db27      	blt.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfbc      	itt	lt
 8006d0e:	2302      	movlt	r3, #2
 8006d10:	fb92 f3f3 	sdivlt	r3, r2, r3
 8006d14:	2500      	movs	r5, #0
 8006d16:	260e      	movs	r6, #14
 8006d18:	4295      	cmp	r5, r2
 8006d1a:	dc1e      	bgt.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d1c:	fb06 4003 	mla	r0, r6, r3, r4
 8006d20:	8887      	ldrh	r7, [r0, #4]
 8006d22:	42b9      	cmp	r1, r7
 8006d24:	d01a      	beq.n	8006d5c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8006d26:	d20d      	bcs.n	8006d44 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8006d28:	1e5a      	subs	r2, r3, #1
 8006d2a:	4295      	cmp	r5, r2
 8006d2c:	dc15      	bgt.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d2e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8006d32:	1a5b      	subs	r3, r3, r1
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	429a      	cmp	r2, r3
 8006d38:	db0f      	blt.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d3a:	429d      	cmp	r5, r3
 8006d3c:	ddec      	ble.n	8006d18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006d3e:	1953      	adds	r3, r2, r5
 8006d40:	105b      	asrs	r3, r3, #1
 8006d42:	e7e9      	b.n	8006d18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006d44:	1c5d      	adds	r5, r3, #1
 8006d46:	42aa      	cmp	r2, r5
 8006d48:	db07      	blt.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d4a:	8a43      	ldrh	r3, [r0, #18]
 8006d4c:	1acb      	subs	r3, r1, r3
 8006d4e:	442b      	add	r3, r5
 8006d50:	429d      	cmp	r5, r3
 8006d52:	dc02      	bgt.n	8006d5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8006d54:	429a      	cmp	r2, r3
 8006d56:	dadf      	bge.n	8006d18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8006d58:	e7f1      	b.n	8006d3e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8006d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d60:	4604      	mov	r4, r0
 8006d62:	4617      	mov	r7, r2
 8006d64:	461e      	mov	r6, r3
 8006d66:	b911      	cbnz	r1, 8006d6e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8006d68:	2500      	movs	r5, #0
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6e:	290a      	cmp	r1, #10
 8006d70:	d0fa      	beq.n	8006d68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006d72:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8006d76:	4291      	cmp	r1, r2
 8006d78:	d0f6      	beq.n	8006d68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006d7a:	f242 020b 	movw	r2, #8203	@ 0x200b
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d0f2      	beq.n	8006d68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006d82:	f7ff ffaf 	bl	8006ce4 <_ZNK8touchgfx9ConstFont4findEt>
 8006d86:	4605      	mov	r5, r0
 8006d88:	b950      	cbnz	r0, 8006da0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	4798      	blx	r3
 8006d92:	4601      	mov	r1, r0
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7ff ffa5 	bl	8006ce4 <_ZNK8touchgfx9ConstFont4findEt>
 8006d9a:	4605      	mov	r5, r0
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d0e3      	beq.n	8006d68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	4629      	mov	r1, r5
 8006da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da6:	4620      	mov	r0, r4
 8006da8:	4798      	blx	r3
 8006daa:	6038      	str	r0, [r7, #0]
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	4620      	mov	r0, r4
 8006db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db2:	4798      	blx	r3
 8006db4:	7030      	strb	r0, [r6, #0]
 8006db6:	e7d8      	b.n	8006d6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08006db8 <_ZN8touchgfx12TextProviderC1Ev>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	2500      	movs	r5, #0
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	e9c0 5500 	strd	r5, r5, [r0]
 8006dc4:	7403      	strb	r3, [r0, #16]
 8006dc6:	6145      	str	r5, [r0, #20]
 8006dc8:	7605      	strb	r5, [r0, #24]
 8006dca:	83c5      	strh	r5, [r0, #30]
 8006dcc:	8405      	strh	r5, [r0, #32]
 8006dce:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8006dd0:	8705      	strh	r5, [r0, #56]	@ 0x38
 8006dd2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8006dd4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8006dd8:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8006ddc:	220e      	movs	r2, #14
 8006dde:	4629      	mov	r1, r5
 8006de0:	304c      	adds	r0, #76	@ 0x4c
 8006de2:	f000 ff7b 	bl	8007cdc <memset>
 8006de6:	2301      	movs	r3, #1
 8006de8:	4620      	mov	r0, r4
 8006dea:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8006dee:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8006df2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8006df6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8006dfa:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8006dfe:	f7ff fde7 	bl	80069d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8006e02:	4620      	mov	r0, r4
 8006e04:	bd38      	pop	{r3, r4, r5, pc}

08006e06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8006e06:	b530      	push	{r4, r5, lr}
 8006e08:	2500      	movs	r5, #0
 8006e0a:	2401      	movs	r4, #1
 8006e0c:	6843      	ldr	r3, [r0, #4]
 8006e0e:	b913      	cbnz	r3, 8006e16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8006e10:	6803      	ldr	r3, [r0, #0]
 8006e12:	b313      	cbz	r3, 8006e5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8006e14:	6043      	str	r3, [r0, #4]
 8006e16:	7e03      	ldrb	r3, [r0, #24]
 8006e18:	b143      	cbz	r3, 8006e2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8006e1a:	6943      	ldr	r3, [r0, #20]
 8006e1c:	b12b      	cbz	r3, 8006e2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8006e1e:	881a      	ldrh	r2, [r3, #0]
 8006e20:	b11a      	cbz	r2, 8006e2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8006e22:	1c9a      	adds	r2, r3, #2
 8006e24:	6142      	str	r2, [r0, #20]
 8006e26:	8818      	ldrh	r0, [r3, #0]
 8006e28:	bd30      	pop	{r4, r5, pc}
 8006e2a:	7605      	strb	r5, [r0, #24]
 8006e2c:	6843      	ldr	r3, [r0, #4]
 8006e2e:	8819      	ldrh	r1, [r3, #0]
 8006e30:	b199      	cbz	r1, 8006e5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	2902      	cmp	r1, #2
 8006e36:	6042      	str	r2, [r0, #4]
 8006e38:	d1f5      	bne.n	8006e26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8006e3a:	7c03      	ldrb	r3, [r0, #16]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d8e5      	bhi.n	8006e0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	3302      	adds	r3, #2
 8006e44:	7402      	strb	r2, [r0, #16]
 8006e46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006e4a:	6143      	str	r3, [r0, #20]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0dd      	beq.n	8006e0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0da      	beq.n	8006e0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006e56:	7604      	strb	r4, [r0, #24]
 8006e58:	e7d8      	b.n	8006e0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e7e4      	b.n	8006e28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08006e5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8006e5e:	b430      	push	{r4, r5}
 8006e60:	6001      	str	r1, [r0, #0]
 8006e62:	2100      	movs	r1, #0
 8006e64:	6041      	str	r1, [r0, #4]
 8006e66:	6815      	ldr	r5, [r2, #0]
 8006e68:	6085      	str	r5, [r0, #8]
 8006e6a:	6852      	ldr	r2, [r2, #4]
 8006e6c:	6443      	str	r3, [r0, #68]	@ 0x44
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	60c2      	str	r2, [r0, #12]
 8006e72:	7401      	strb	r1, [r0, #16]
 8006e74:	6141      	str	r1, [r0, #20]
 8006e76:	7601      	strb	r1, [r0, #24]
 8006e78:	8701      	strh	r1, [r0, #56]	@ 0x38
 8006e7a:	8401      	strh	r1, [r0, #32]
 8006e7c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8006e80:	6483      	str	r3, [r0, #72]	@ 0x48
 8006e82:	bc30      	pop	{r4, r5}
 8006e84:	f7ff bda4 	b.w	80069d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08006e88 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8006e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	b1e9      	cbz	r1, 8006ecc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8006e90:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8006e94:	460b      	mov	r3, r1
 8006e96:	f101 0708 	add.w	r7, r1, #8
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	4626      	mov	r6, r4
 8006ea2:	c603      	stmia	r6!, {r0, r1}
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	42bb      	cmp	r3, r7
 8006ea8:	4634      	mov	r4, r6
 8006eaa:	d1f7      	bne.n	8006e9c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	6030      	str	r0, [r6, #0]
 8006eb0:	889b      	ldrh	r3, [r3, #4]
 8006eb2:	80b3      	strh	r3, [r6, #4]
 8006eb4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8006eb8:	015b      	lsls	r3, r3, #5
 8006eba:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8006ebe:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	425b      	negs	r3, r3
 8006ec6:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8006eca:	4610      	mov	r0, r2
 8006ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ece <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8006ece:	b538      	push	{r3, r4, r5, lr}
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	6811      	ldr	r1, [r2, #0]
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	68cd      	ldr	r5, [r1, #12]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	47a8      	blx	r5
 8006edc:	2800      	cmp	r0, #0
 8006ede:	bf08      	it	eq
 8006ee0:	4620      	moveq	r0, r4
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}

08006ee4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8006ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee8:	468c      	mov	ip, r1
 8006eea:	4605      	mov	r5, r0
 8006eec:	4614      	mov	r4, r2
 8006eee:	b942      	cbnz	r2, 8006f02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8006ef0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8006ef4:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8006ef8:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8006efc:	4620      	mov	r0, r4
 8006efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f02:	7b50      	ldrb	r0, [r2, #13]
 8006f04:	8893      	ldrh	r3, [r2, #4]
 8006f06:	0106      	lsls	r6, r0, #4
 8006f08:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8006f0c:	79e6      	ldrb	r6, [r4, #7]
 8006f0e:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8006f12:	4316      	orrs	r6, r2
 8006f14:	185a      	adds	r2, r3, r1
 8006f16:	b291      	uxth	r1, r2
 8006f18:	291d      	cmp	r1, #29
 8006f1a:	b2b7      	uxth	r7, r6
 8006f1c:	d87e      	bhi.n	800701c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 8006f1e:	2201      	movs	r2, #1
 8006f20:	408a      	lsls	r2, r1
 8006f22:	498a      	ldr	r1, [pc, #552]	@ (800714c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 8006f24:	420a      	tst	r2, r1
 8006f26:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8006f2a:	d12d      	bne.n	8006f88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8006f2c:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8006f30:	d074      	beq.n	800701c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 8006f32:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8006f36:	4623      	mov	r3, r4
 8006f38:	f104 0e08 	add.w	lr, r4, #8
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	4694      	mov	ip, r2
 8006f44:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8006f48:	3308      	adds	r3, #8
 8006f4a:	4573      	cmp	r3, lr
 8006f4c:	4662      	mov	r2, ip
 8006f4e:	d1f6      	bne.n	8006f3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f8cc 0000 	str.w	r0, [ip]
 8006f56:	889b      	ldrh	r3, [r3, #4]
 8006f58:	f8ac 3004 	strh.w	r3, [ip, #4]
 8006f5c:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8006f60:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8006f64:	b2b3      	uxth	r3, r6
 8006f66:	1aca      	subs	r2, r1, r3
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8006f6e:	10d2      	asrs	r2, r2, #3
 8006f70:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8006f74:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8006f78:	4302      	orrs	r2, r0
 8006f7a:	1bcf      	subs	r7, r1, r7
 8006f7c:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8006f80:	1afb      	subs	r3, r7, r3
 8006f82:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8006f86:	e7b9      	b.n	8006efc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8006f88:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	f104 0808 	add.w	r8, r4, #8
 8006f92:	4614      	mov	r4, r2
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	6859      	ldr	r1, [r3, #4]
 8006f98:	4696      	mov	lr, r2
 8006f9a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	4543      	cmp	r3, r8
 8006fa2:	4672      	mov	r2, lr
 8006fa4:	d1f6      	bne.n	8006f94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	f8ce 0000 	str.w	r0, [lr]
 8006fac:	889b      	ldrh	r3, [r3, #4]
 8006fae:	f8ae 3004 	strh.w	r3, [lr, #4]
 8006fb2:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8006fb4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006fb8:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8006fba:	f640 6333 	movw	r3, #3635	@ 0xe33
 8006fbe:	4299      	cmp	r1, r3
 8006fc0:	d111      	bne.n	8006fe6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8006fc2:	f8dc 3000 	ldr.w	r3, [ip]
 8006fc6:	4660      	mov	r0, ip
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	4798      	blx	r3
 8006fcc:	7b41      	ldrb	r1, [r0, #13]
 8006fce:	00cb      	lsls	r3, r1, #3
 8006fd0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8006fd4:	7a03      	ldrb	r3, [r0, #8]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	064a      	lsls	r2, r1, #25
 8006fda:	bf44      	itt	mi
 8006fdc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8006fe0:	b21b      	sxthmi	r3, r3
 8006fe2:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8006fe6:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8006fea:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8006fee:	443b      	add	r3, r7
 8006ff0:	4433      	add	r3, r6
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8006ff8:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8006ffc:	10db      	asrs	r3, r3, #3
 8006ffe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007002:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007006:	4313      	orrs	r3, r2
 8007008:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800700c:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8007010:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800701a:	e76f      	b.n	8006efc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800701c:	f023 0204 	bic.w	r2, r3, #4
 8007020:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8007024:	428a      	cmp	r2, r1
 8007026:	d003      	beq.n	8007030 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 8007028:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800702c:	4293      	cmp	r3, r2
 800702e:	d137      	bne.n	80070a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8007030:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8007034:	4622      	mov	r2, r4
 8007036:	f104 0808 	add.w	r8, r4, #8
 800703a:	4634      	mov	r4, r6
 800703c:	6810      	ldr	r0, [r2, #0]
 800703e:	6851      	ldr	r1, [r2, #4]
 8007040:	46b6      	mov	lr, r6
 8007042:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8007046:	3208      	adds	r2, #8
 8007048:	4542      	cmp	r2, r8
 800704a:	4676      	mov	r6, lr
 800704c:	d1f6      	bne.n	800703c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800704e:	6810      	ldr	r0, [r2, #0]
 8007050:	f8ce 0000 	str.w	r0, [lr]
 8007054:	8892      	ldrh	r2, [r2, #4]
 8007056:	f8ae 2004 	strh.w	r2, [lr, #4]
 800705a:	3b01      	subs	r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	4662      	mov	r2, ip
 8007060:	4621      	mov	r1, r4
 8007062:	4628      	mov	r0, r5
 8007064:	f7ff ff33 	bl	8006ece <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8007068:	7b41      	ldrb	r1, [r0, #13]
 800706a:	00cb      	lsls	r3, r1, #3
 800706c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8007070:	7a03      	ldrb	r3, [r0, #8]
 8007072:	0648      	lsls	r0, r1, #25
 8007074:	ea43 0302 	orr.w	r3, r3, r2
 8007078:	bf44      	itt	mi
 800707a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800707e:	b21b      	sxthmi	r3, r3
 8007080:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8007084:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8007088:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007092:	4313      	orrs	r3, r2
 8007094:	115a      	asrs	r2, r3, #5
 8007096:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800709a:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800709e:	e046      	b.n	800712e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 80070a0:	00c2      	lsls	r2, r0, #3
 80070a2:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80070a6:	7a22      	ldrb	r2, [r4, #8]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	0641      	lsls	r1, r0, #25
 80070ac:	bf44      	itt	mi
 80070ae:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80070b2:	b212      	sxthmi	r2, r2
 80070b4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80070b8:	f640 6109 	movw	r1, #3593	@ 0xe09
 80070bc:	f023 0210 	bic.w	r2, r3, #16
 80070c0:	428a      	cmp	r2, r1
 80070c2:	d003      	beq.n	80070cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 80070c4:	f640 6213 	movw	r2, #3603	@ 0xe13
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d13d      	bne.n	8007148 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 80070cc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80070d0:	f104 0808 	add.w	r8, r4, #8
 80070d4:	4696      	mov	lr, r2
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	4616      	mov	r6, r2
 80070dc:	c603      	stmia	r6!, {r0, r1}
 80070de:	3408      	adds	r4, #8
 80070e0:	4544      	cmp	r4, r8
 80070e2:	4632      	mov	r2, r6
 80070e4:	d1f7      	bne.n	80070d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80070e6:	6820      	ldr	r0, [r4, #0]
 80070e8:	6030      	str	r0, [r6, #0]
 80070ea:	88a1      	ldrh	r1, [r4, #4]
 80070ec:	80b1      	strh	r1, [r6, #4]
 80070ee:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 80070f2:	0076      	lsls	r6, r6, #1
 80070f4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80070f8:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 80070fc:	4316      	orrs	r6, r2
 80070fe:	f640 6213 	movw	r2, #3603	@ 0xe13
 8007102:	4293      	cmp	r3, r2
 8007104:	bf1a      	itte	ne
 8007106:	f103 33ff 	addne.w	r3, r3, #4294967295
 800710a:	b29b      	uxthne	r3, r3
 800710c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8007110:	4662      	mov	r2, ip
 8007112:	4671      	mov	r1, lr
 8007114:	4628      	mov	r0, r5
 8007116:	4674      	mov	r4, lr
 8007118:	f7ff fed9 	bl	8006ece <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800711c:	7b43      	ldrb	r3, [r0, #13]
 800711e:	7a82      	ldrb	r2, [r0, #10]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007126:	4313      	orrs	r3, r2
 8007128:	1af6      	subs	r6, r6, r3
 800712a:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800712e:	7b61      	ldrb	r1, [r4, #13]
 8007130:	00cb      	lsls	r3, r1, #3
 8007132:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8007136:	7a23      	ldrb	r3, [r4, #8]
 8007138:	4313      	orrs	r3, r2
 800713a:	064a      	lsls	r2, r1, #25
 800713c:	bf44      	itt	mi
 800713e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8007142:	b21b      	sxthmi	r3, r3
 8007144:	1bdb      	subs	r3, r3, r7
 8007146:	e71c      	b.n	8006f82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8007148:	2300      	movs	r3, #0
 800714a:	e7a6      	b.n	800709a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800714c:	3fc00079 	.word	0x3fc00079

08007150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8007150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007154:	4604      	mov	r4, r0
 8007156:	b942      	cbnz	r2, 800716a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8007158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800715c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8007160:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8007164:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8007168:	e047      	b.n	80071fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800716a:	7b51      	ldrb	r1, [r2, #13]
 800716c:	8893      	ldrh	r3, [r2, #4]
 800716e:	010d      	lsls	r5, r1, #4
 8007170:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8007174:	79d5      	ldrb	r5, [r2, #7]
 8007176:	4305      	orrs	r5, r0
 8007178:	2d04      	cmp	r5, #4
 800717a:	bfcc      	ite	gt
 800717c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8007180:	f04f 0e01 	movle.w	lr, #1
 8007184:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8007188:	f200 80ab 	bhi.w	80072e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800718c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8007190:	4283      	cmp	r3, r0
 8007192:	d216      	bcs.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007194:	f240 605b 	movw	r0, #1627	@ 0x65b
 8007198:	4283      	cmp	r3, r0
 800719a:	d859      	bhi.n	8007250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800719c:	f240 6057 	movw	r0, #1623	@ 0x657
 80071a0:	4283      	cmp	r3, r0
 80071a2:	d20e      	bcs.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80071a4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80071a8:	d24a      	bcs.n	8007240 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80071aa:	f240 604e 	movw	r0, #1614	@ 0x64e
 80071ae:	4283      	cmp	r3, r0
 80071b0:	d207      	bcs.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80071b2:	f240 601a 	movw	r0, #1562	@ 0x61a
 80071b6:	4283      	cmp	r3, r0
 80071b8:	d02a      	beq.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80071ba:	d821      	bhi.n	8007200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80071bc:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80071c0:	d35b      	bcc.n	800727a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80071c2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80071c6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80071ca:	f040 80d0 	bne.w	800736e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80071ce:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80071d2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80071d6:	f040 80ca 	bne.w	800736e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80071da:	00cb      	lsls	r3, r1, #3
 80071dc:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80071e0:	7a13      	ldrb	r3, [r2, #8]
 80071e2:	0649      	lsls	r1, r1, #25
 80071e4:	ea43 0300 	orr.w	r3, r3, r0
 80071e8:	bf44      	itt	mi
 80071ea:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80071ee:	b21b      	sxthmi	r3, r3
 80071f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80071f4:	1b5d      	subs	r5, r3, r5
 80071f6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80071fa:	4610      	mov	r0, r2
 80071fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007200:	f240 604b 	movw	r0, #1611	@ 0x64b
 8007204:	4283      	cmp	r3, r0
 8007206:	d338      	bcc.n	800727a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8007208:	f240 604c 	movw	r0, #1612	@ 0x64c
 800720c:	4283      	cmp	r3, r0
 800720e:	d9d8      	bls.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007210:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8007214:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8007218:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800721c:	f040 80f2 	bne.w	8007404 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8007220:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8007224:	f040 80ee 	bne.w	8007404 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8007228:	00cb      	lsls	r3, r1, #3
 800722a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800722e:	7a13      	ldrb	r3, [r2, #8]
 8007230:	064e      	lsls	r6, r1, #25
 8007232:	ea43 0300 	orr.w	r3, r3, r0
 8007236:	bf44      	itt	mi
 8007238:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800723c:	b21b      	sxthmi	r3, r3
 800723e:	e7d9      	b.n	80071f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8007240:	f240 6054 	movw	r0, #1620	@ 0x654
 8007244:	4283      	cmp	r3, r0
 8007246:	d8e3      	bhi.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8007248:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800724c:	d9e0      	bls.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800724e:	e7b8      	b.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007250:	f240 6074 	movw	r0, #1652	@ 0x674
 8007254:	4283      	cmp	r3, r0
 8007256:	d0b4      	beq.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007258:	d82d      	bhi.n	80072b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800725a:	f240 605e 	movw	r0, #1630	@ 0x65e
 800725e:	4283      	cmp	r3, r0
 8007260:	d804      	bhi.n	800726c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8007262:	f240 605d 	movw	r0, #1629	@ 0x65d
 8007266:	4283      	cmp	r3, r0
 8007268:	d3d2      	bcc.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800726a:	e7aa      	b.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800726c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8007270:	4283      	cmp	r3, r0
 8007272:	d0cd      	beq.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8007274:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8007278:	d0a3      	beq.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800727a:	00cb      	lsls	r3, r1, #3
 800727c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8007280:	7a13      	ldrb	r3, [r2, #8]
 8007282:	0649      	lsls	r1, r1, #25
 8007284:	ea43 0300 	orr.w	r3, r3, r0
 8007288:	bf44      	itt	mi
 800728a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800728e:	b21b      	sxthmi	r3, r3
 8007290:	1b5d      	subs	r5, r3, r5
 8007292:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8007296:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800729a:	7b53      	ldrb	r3, [r2, #13]
 800729c:	015b      	lsls	r3, r3, #5
 800729e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80072a2:	7993      	ldrb	r3, [r2, #6]
 80072a4:	430b      	orrs	r3, r1
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	2105      	movs	r1, #5
 80072aa:	fb93 f3f1 	sdiv	r3, r3, r1
 80072ae:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80072b2:	440b      	add	r3, r1
 80072b4:	e756      	b.n	8007164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80072b6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80072ba:	4283      	cmp	r3, r0
 80072bc:	d809      	bhi.n	80072d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80072be:	f240 60df 	movw	r0, #1759	@ 0x6df
 80072c2:	4283      	cmp	r3, r0
 80072c4:	f4bf af7d 	bcs.w	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80072c8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80072cc:	2b05      	cmp	r3, #5
 80072ce:	d8d4      	bhi.n	800727a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80072d0:	e777      	b.n	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80072d2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80072d6:	4283      	cmp	r3, r0
 80072d8:	d09a      	beq.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80072da:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80072de:	4283      	cmp	r3, r0
 80072e0:	e7ca      	b.n	8007278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80072e2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80072e6:	d22b      	bcs.n	8007340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80072e8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80072ec:	4283      	cmp	r3, r0
 80072ee:	d28f      	bcs.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80072f0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80072f4:	4283      	cmp	r3, r0
 80072f6:	d816      	bhi.n	8007326 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80072f8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80072fc:	4283      	cmp	r3, r0
 80072fe:	f4bf af60 	bcs.w	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007302:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8007306:	4283      	cmp	r3, r0
 8007308:	d80a      	bhi.n	8007320 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800730a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800730e:	4283      	cmp	r3, r0
 8007310:	f4bf af57 	bcs.w	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007314:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8007318:	4283      	cmp	r3, r0
 800731a:	f43f af79 	beq.w	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800731e:	e7ac      	b.n	800727a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8007320:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8007324:	e7f8      	b.n	8007318 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8007326:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800732a:	4283      	cmp	r3, r0
 800732c:	d802      	bhi.n	8007334 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800732e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8007332:	e798      	b.n	8007266 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8007334:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8007338:	4283      	cmp	r3, r0
 800733a:	f47f af42 	bne.w	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800733e:	e767      	b.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8007340:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8007344:	4283      	cmp	r3, r0
 8007346:	f43f af63 	beq.w	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800734a:	d802      	bhi.n	8007352 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800734c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8007350:	e7f2      	b.n	8007338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8007352:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8007356:	4283      	cmp	r3, r0
 8007358:	d805      	bhi.n	8007366 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800735a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800735e:	4283      	cmp	r3, r0
 8007360:	f4ff af2f 	bcc.w	80071c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8007364:	e754      	b.n	8007210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8007366:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800736a:	4283      	cmp	r3, r0
 800736c:	e7af      	b.n	80072ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800736e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8007372:	4617      	mov	r7, r2
 8007374:	f102 0808 	add.w	r8, r2, #8
 8007378:	4666      	mov	r6, ip
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	46e6      	mov	lr, ip
 8007380:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8007384:	3708      	adds	r7, #8
 8007386:	4547      	cmp	r7, r8
 8007388:	46f4      	mov	ip, lr
 800738a:	d1f6      	bne.n	800737a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800738c:	6838      	ldr	r0, [r7, #0]
 800738e:	f8ce 0000 	str.w	r0, [lr]
 8007392:	88b9      	ldrh	r1, [r7, #4]
 8007394:	f8ae 1004 	strh.w	r1, [lr, #4]
 8007398:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800739c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80073a0:	d009      	beq.n	80073b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80073a2:	7b51      	ldrb	r1, [r2, #13]
 80073a4:	7992      	ldrb	r2, [r2, #6]
 80073a6:	0149      	lsls	r1, r1, #5
 80073a8:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80073ac:	4311      	orrs	r1, r2
 80073ae:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80073b2:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80073b6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80073ba:	b2ad      	uxth	r5, r5
 80073bc:	d00d      	beq.n	80073da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80073be:	442b      	add	r3, r5
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80073c6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80073ca:	10db      	asrs	r3, r3, #3
 80073cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073d4:	4313      	orrs	r3, r2
 80073d6:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80073da:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80073de:	00cb      	lsls	r3, r1, #3
 80073e0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80073e4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80073e8:	064f      	lsls	r7, r1, #25
 80073ea:	ea43 0302 	orr.w	r3, r3, r2
 80073ee:	bf44      	itt	mi
 80073f0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80073f4:	b21b      	sxthmi	r3, r3
 80073f6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80073fa:	1b5b      	subs	r3, r3, r5
 80073fc:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8007400:	4632      	mov	r2, r6
 8007402:	e6fa      	b.n	80071fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8007404:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8007408:	4617      	mov	r7, r2
 800740a:	f102 0908 	add.w	r9, r2, #8
 800740e:	4666      	mov	r6, ip
 8007410:	6838      	ldr	r0, [r7, #0]
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	46e0      	mov	r8, ip
 8007416:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800741a:	3708      	adds	r7, #8
 800741c:	454f      	cmp	r7, r9
 800741e:	46c4      	mov	ip, r8
 8007420:	d1f6      	bne.n	8007410 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f8c8 0000 	str.w	r0, [r8]
 8007428:	88b9      	ldrh	r1, [r7, #4]
 800742a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800742e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8007432:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8007436:	d009      	beq.n	800744c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8007438:	7b51      	ldrb	r1, [r2, #13]
 800743a:	7992      	ldrb	r2, [r2, #6]
 800743c:	0149      	lsls	r1, r1, #5
 800743e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8007442:	4311      	orrs	r1, r2
 8007444:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8007448:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800744c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8007450:	d00e      	beq.n	8007470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8007452:	eba3 030e 	sub.w	r3, r3, lr
 8007456:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800745a:	b29b      	uxth	r3, r3
 800745c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8007460:	10db      	asrs	r3, r3, #3
 8007462:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007466:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800746a:	4313      	orrs	r3, r2
 800746c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8007470:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8007474:	00cb      	lsls	r3, r1, #3
 8007476:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800747a:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800747e:	0648      	lsls	r0, r1, #25
 8007480:	ea43 0302 	orr.w	r3, r3, r2
 8007484:	bf44      	itt	mi
 8007486:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800748a:	b21b      	sxthmi	r3, r3
 800748c:	1b5d      	subs	r5, r3, r5
 800748e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8007492:	e7b5      	b.n	8007400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08007494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8007494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007498:	461e      	mov	r6, r3
 800749a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800749c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80074a0:	4604      	mov	r4, r0
 80074a2:	4617      	mov	r7, r2
 80074a4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80074a8:	f7ff f9ec 	bl	8006884 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80074ac:	4605      	mov	r5, r0
 80074ae:	b918      	cbnz	r0, 80074b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4628      	mov	r0, r5
 80074b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	4601      	mov	r1, r0
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	4638      	mov	r0, r7
 80074c0:	4798      	blx	r3
 80074c2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80074c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074ca:	4602      	mov	r2, r0
 80074cc:	6030      	str	r0, [r6, #0]
 80074ce:	d213      	bcs.n	80074f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80074d0:	4643      	mov	r3, r8
 80074d2:	4639      	mov	r1, r7
 80074d4:	4620      	mov	r0, r4
 80074d6:	f7ff fe3b 	bl	8007150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80074da:	6030      	str	r0, [r6, #0]
 80074dc:	6833      	ldr	r3, [r6, #0]
 80074de:	b143      	cbz	r3, 80074f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80074e0:	7b5a      	ldrb	r2, [r3, #13]
 80074e2:	7a9b      	ldrb	r3, [r3, #10]
 80074e4:	0052      	lsls	r2, r2, #1
 80074e6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80074ea:	4313      	orrs	r3, r2
 80074ec:	bf0c      	ite	eq
 80074ee:	2301      	moveq	r3, #1
 80074f0:	2300      	movne	r3, #0
 80074f2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80074f6:	e7dc      	b.n	80074b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80074f8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007500:	d804      	bhi.n	800750c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8007502:	4639      	mov	r1, r7
 8007504:	4620      	mov	r0, r4
 8007506:	f7ff fced 	bl	8006ee4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800750a:	e7e6      	b.n	80074da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800750c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0e3      	beq.n	80074dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8007514:	f640 1302 	movw	r3, #2306	@ 0x902
 8007518:	429d      	cmp	r5, r3
 800751a:	d1df      	bne.n	80074dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800751c:	4601      	mov	r1, r0
 800751e:	4620      	mov	r0, r4
 8007520:	f7ff fcb2 	bl	8006e88 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8007524:	e7d9      	b.n	80074da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08007526 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800752e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8007530:	b1f1      	cbz	r1, 8007570 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8007532:	2b0a      	cmp	r3, #10
 8007534:	d02f      	beq.n	8007596 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8007536:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007538:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800753c:	3901      	subs	r1, #1
 800753e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8007540:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8007544:	1c51      	adds	r1, r2, #1
 8007546:	b289      	uxth	r1, r1
 8007548:	2901      	cmp	r1, #1
 800754a:	bf84      	itt	hi
 800754c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007550:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8007552:	f103 0201 	add.w	r2, r3, #1
 8007556:	8722      	strh	r2, [r4, #56]	@ 0x38
 8007558:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800755a:	bf98      	it	ls
 800755c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800755e:	4413      	add	r3, r2
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b09      	cmp	r3, #9
 8007564:	bf88      	it	hi
 8007566:	3b0a      	subhi	r3, #10
 8007568:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800756c:	8458      	strh	r0, [r3, #34]	@ 0x22
 800756e:	e7dc      	b.n	800752a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8007570:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8007572:	2b0a      	cmp	r3, #10
 8007574:	d00f      	beq.n	8007596 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fc45 	bl	8006e06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800757c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	8722      	strh	r2, [r4, #56]	@ 0x38
 8007582:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8007584:	4413      	add	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b09      	cmp	r3, #9
 800758a:	bf88      	it	hi
 800758c:	3b0a      	subhi	r3, #10
 800758e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007592:	8458      	strh	r0, [r3, #34]	@ 0x22
 8007594:	e7ec      	b.n	8007570 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8007596:	bd10      	pop	{r4, pc}

08007598 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800759c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80075a0:	4604      	mov	r4, r0
 80075a2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80075a4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80075a6:	3a01      	subs	r2, #1
 80075a8:	8702      	strh	r2, [r0, #56]	@ 0x38
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	b292      	uxth	r2, r2
 80075ae:	2a09      	cmp	r2, #9
 80075b0:	bf86      	itte	hi
 80075b2:	3b09      	subhi	r3, #9
 80075b4:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80075b6:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80075b8:	f7ff ffb5 	bl	8007526 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80075bc:	8c23      	ldrh	r3, [r4, #32]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	bf9c      	itt	ls
 80075c2:	3301      	addls	r3, #1
 80075c4:	8423      	strhls	r3, [r4, #32]
 80075c6:	8be3      	ldrh	r3, [r4, #30]
 80075c8:	b90b      	cbnz	r3, 80075ce <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80075ca:	2302      	movs	r3, #2
 80075cc:	83e3      	strh	r3, [r4, #30]
 80075ce:	8be3      	ldrh	r3, [r4, #30]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	83e3      	strh	r3, [r4, #30]
 80075d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80075da:	4628      	mov	r0, r5
 80075dc:	8365      	strh	r5, [r4, #26]
 80075de:	bd38      	pop	{r3, r4, r5, pc}

080075e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80075e0:	428a      	cmp	r2, r1
 80075e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80075e8:	d931      	bls.n	800764e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 80075ea:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80075ec:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80075f0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80075f4:	19ee      	adds	r6, r5, r7
 80075f6:	1a54      	subs	r4, r2, r1
 80075f8:	3e01      	subs	r6, #1
 80075fa:	fa1f fe84 	uxth.w	lr, r4
 80075fe:	b2b4      	uxth	r4, r6
 8007600:	eba4 090e 	sub.w	r9, r4, lr
 8007604:	fa1f f989 	uxth.w	r9, r9
 8007608:	2c09      	cmp	r4, #9
 800760a:	4626      	mov	r6, r4
 800760c:	bf88      	it	hi
 800760e:	f1a4 060a 	subhi.w	r6, r4, #10
 8007612:	f1bc 0f00 	cmp.w	ip, #0
 8007616:	bf08      	it	eq
 8007618:	f04f 0c02 	moveq.w	ip, #2
 800761c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8007620:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007624:	fa1f fc8c 	uxth.w	ip, ip
 8007628:	3c01      	subs	r4, #1
 800762a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800762e:	b2a4      	uxth	r4, r4
 8007630:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8007634:	454c      	cmp	r4, r9
 8007636:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800763a:	d1e5      	bne.n	8007608 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800763c:	eba5 050e 	sub.w	r5, r5, lr
 8007640:	eb0e 0408 	add.w	r4, lr, r8
 8007644:	8705      	strh	r5, [r0, #56]	@ 0x38
 8007646:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800764a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800764e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8007650:	1a64      	subs	r4, r4, r1
 8007652:	4439      	add	r1, r7
 8007654:	b289      	uxth	r1, r1
 8007656:	2909      	cmp	r1, #9
 8007658:	bf88      	it	hi
 800765a:	390a      	subhi	r1, #10
 800765c:	8704      	strh	r4, [r0, #56]	@ 0x38
 800765e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8007660:	250a      	movs	r5, #10
 8007662:	b18a      	cbz	r2, 8007688 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8007664:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8007666:	3a01      	subs	r2, #1
 8007668:	b292      	uxth	r2, r2
 800766a:	3101      	adds	r1, #1
 800766c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8007670:	8701      	strh	r1, [r0, #56]	@ 0x38
 8007672:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8007674:	b901      	cbnz	r1, 8007678 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8007676:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8007678:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800767a:	3901      	subs	r1, #1
 800767c:	b289      	uxth	r1, r1
 800767e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8007680:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007684:	844c      	strh	r4, [r1, #34]	@ 0x22
 8007686:	e7ec      	b.n	8007662 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8007688:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	f7ff bf4b 	b.w	8007526 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08007690 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	2500      	movs	r5, #0
 8007694:	4295      	cmp	r5, r2
 8007696:	d011      	beq.n	80076bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8007698:	8bc4      	ldrh	r4, [r0, #30]
 800769a:	f831 6b02 	ldrh.w	r6, [r1], #2
 800769e:	4414      	add	r4, r2
 80076a0:	3c01      	subs	r4, #1
 80076a2:	1b64      	subs	r4, r4, r5
 80076a4:	b2a4      	uxth	r4, r4
 80076a6:	2c01      	cmp	r4, #1
 80076a8:	bf88      	it	hi
 80076aa:	3c02      	subhi	r4, #2
 80076ac:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80076b0:	8b64      	ldrh	r4, [r4, #26]
 80076b2:	42b4      	cmp	r4, r6
 80076b4:	d117      	bne.n	80076e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80076b6:	3501      	adds	r5, #1
 80076b8:	b2ad      	uxth	r5, r5
 80076ba:	e7eb      	b.n	8007694 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80076bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80076c0:	2400      	movs	r4, #0
 80076c2:	4413      	add	r3, r2
 80076c4:	b2a2      	uxth	r2, r4
 80076c6:	429a      	cmp	r2, r3
 80076c8:	da0f      	bge.n	80076ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80076ca:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80076cc:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80076d0:	4432      	add	r2, r6
 80076d2:	b292      	uxth	r2, r2
 80076d4:	2a09      	cmp	r2, #9
 80076d6:	bf88      	it	hi
 80076d8:	3a0a      	subhi	r2, #10
 80076da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80076de:	3401      	adds	r4, #1
 80076e0:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80076e2:	42aa      	cmp	r2, r5
 80076e4:	d0ee      	beq.n	80076c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80076e6:	2000      	movs	r0, #0
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
 80076ea:	2001      	movs	r0, #1
 80076ec:	e7fc      	b.n	80076e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080076ee <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80076ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f2:	4605      	mov	r5, r0
 80076f4:	4616      	mov	r6, r2
 80076f6:	1c8c      	adds	r4, r1, #2
 80076f8:	8809      	ldrh	r1, [r1, #0]
 80076fa:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80076fe:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8007702:	42b3      	cmp	r3, r6
 8007704:	d124      	bne.n	8007750 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8007706:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800770a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800770e:	f001 070f 	and.w	r7, r1, #15
 8007712:	f8cd 8000 	str.w	r8, [sp]
 8007716:	464b      	mov	r3, r9
 8007718:	4652      	mov	r2, sl
 800771a:	4621      	mov	r1, r4
 800771c:	4628      	mov	r0, r5
 800771e:	f7ff ffb7 	bl	8007690 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8007722:	4683      	mov	fp, r0
 8007724:	b168      	cbz	r0, 8007742 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8007726:	eb0a 0109 	add.w	r1, sl, r9
 800772a:	4441      	add	r1, r8
 800772c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8007730:	463a      	mov	r2, r7
 8007732:	4649      	mov	r1, r9
 8007734:	4628      	mov	r0, r5
 8007736:	f7ff ff53 	bl	80075e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800773a:	4658      	mov	r0, fp
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	eb07 010a 	add.w	r1, r7, sl
 8007746:	4449      	add	r1, r9
 8007748:	4441      	add	r1, r8
 800774a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800774e:	e7d2      	b.n	80076f6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8007750:	f04f 0b00 	mov.w	fp, #0
 8007754:	e7f1      	b.n	800773a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08007756 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8007756:	b570      	push	{r4, r5, r6, lr}
 8007758:	8810      	ldrh	r0, [r2, #0]
 800775a:	4298      	cmp	r0, r3
 800775c:	d817      	bhi.n	800778e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800775e:	1e48      	subs	r0, r1, #1
 8007760:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8007764:	4298      	cmp	r0, r3
 8007766:	d312      	bcc.n	800778e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8007768:	2400      	movs	r4, #0
 800776a:	428c      	cmp	r4, r1
 800776c:	d20f      	bcs.n	800778e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800776e:	1860      	adds	r0, r4, r1
 8007770:	1040      	asrs	r0, r0, #1
 8007772:	0085      	lsls	r5, r0, #2
 8007774:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8007778:	42b3      	cmp	r3, r6
 800777a:	d902      	bls.n	8007782 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800777c:	3001      	adds	r0, #1
 800777e:	b284      	uxth	r4, r0
 8007780:	e7f3      	b.n	800776a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8007782:	d201      	bcs.n	8007788 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8007784:	b281      	uxth	r1, r0
 8007786:	e7f0      	b.n	800776a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8007788:	442a      	add	r2, r5
 800778a:	8850      	ldrh	r0, [r2, #2]
 800778c:	bd70      	pop	{r4, r5, r6, pc}
 800778e:	2000      	movs	r0, #0
 8007790:	e7fc      	b.n	800778c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08007792 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8007792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8007798:	886f      	ldrh	r7, [r5, #2]
 800779a:	4604      	mov	r4, r0
 800779c:	087f      	lsrs	r7, r7, #1
 800779e:	260b      	movs	r6, #11
 80077a0:	3e01      	subs	r6, #1
 80077a2:	d013      	beq.n	80077cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80077a4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80077a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80077aa:	462a      	mov	r2, r5
 80077ac:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80077b0:	4639      	mov	r1, r7
 80077b2:	4643      	mov	r3, r8
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff ffce 	bl	8007756 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80077ba:	b138      	cbz	r0, 80077cc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80077bc:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80077c0:	4642      	mov	r2, r8
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff ff93 	bl	80076ee <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1e9      	bne.n	80077a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077d0 <_ZdlPvj>:
 80077d0:	f000 b812 	b.w	80077f8 <_ZdlPv>

080077d4 <__cxa_guard_acquire>:
 80077d4:	6802      	ldr	r2, [r0, #0]
 80077d6:	07d2      	lsls	r2, r2, #31
 80077d8:	4603      	mov	r3, r0
 80077da:	d405      	bmi.n	80077e8 <__cxa_guard_acquire+0x14>
 80077dc:	7842      	ldrb	r2, [r0, #1]
 80077de:	b102      	cbz	r2, 80077e2 <__cxa_guard_acquire+0xe>
 80077e0:	deff      	udf	#255	@ 0xff
 80077e2:	2001      	movs	r0, #1
 80077e4:	7058      	strb	r0, [r3, #1]
 80077e6:	4770      	bx	lr
 80077e8:	2000      	movs	r0, #0
 80077ea:	4770      	bx	lr

080077ec <__cxa_guard_release>:
 80077ec:	2301      	movs	r3, #1
 80077ee:	6003      	str	r3, [r0, #0]
 80077f0:	4770      	bx	lr

080077f2 <__cxa_pure_virtual>:
 80077f2:	b508      	push	{r3, lr}
 80077f4:	f000 f80e 	bl	8007814 <_ZSt9terminatev>

080077f8 <_ZdlPv>:
 80077f8:	f000 b844 	b.w	8007884 <free>

080077fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80077fc:	b508      	push	{r3, lr}
 80077fe:	4780      	blx	r0
 8007800:	f000 f80d 	bl	800781e <abort>

08007804 <_ZSt13get_terminatev>:
 8007804:	4b02      	ldr	r3, [pc, #8]	@ (8007810 <_ZSt13get_terminatev+0xc>)
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	f3bf 8f5b 	dmb	ish
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20000018 	.word	0x20000018

08007814 <_ZSt9terminatev>:
 8007814:	b508      	push	{r3, lr}
 8007816:	f7ff fff5 	bl	8007804 <_ZSt13get_terminatev>
 800781a:	f7ff ffef 	bl	80077fc <_ZN10__cxxabiv111__terminateEPFvvE>

0800781e <abort>:
 800781e:	b508      	push	{r3, lr}
 8007820:	2006      	movs	r0, #6
 8007822:	f000 fa8b 	bl	8007d3c <raise>
 8007826:	2001      	movs	r0, #1
 8007828:	f7fb f998 	bl	8002b5c <_exit>

0800782c <__assert_func>:
 800782c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800782e:	4614      	mov	r4, r2
 8007830:	461a      	mov	r2, r3
 8007832:	4b09      	ldr	r3, [pc, #36]	@ (8007858 <__assert_func+0x2c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4605      	mov	r5, r0
 8007838:	68d8      	ldr	r0, [r3, #12]
 800783a:	b14c      	cbz	r4, 8007850 <__assert_func+0x24>
 800783c:	4b07      	ldr	r3, [pc, #28]	@ (800785c <__assert_func+0x30>)
 800783e:	9100      	str	r1, [sp, #0]
 8007840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007844:	4906      	ldr	r1, [pc, #24]	@ (8007860 <__assert_func+0x34>)
 8007846:	462b      	mov	r3, r5
 8007848:	f000 f976 	bl	8007b38 <fiprintf>
 800784c:	f7ff ffe7 	bl	800781e <abort>
 8007850:	4b04      	ldr	r3, [pc, #16]	@ (8007864 <__assert_func+0x38>)
 8007852:	461c      	mov	r4, r3
 8007854:	e7f3      	b.n	800783e <__assert_func+0x12>
 8007856:	bf00      	nop
 8007858:	20000028 	.word	0x20000028
 800785c:	0800ac24 	.word	0x0800ac24
 8007860:	0800ac31 	.word	0x0800ac31
 8007864:	0800ac5f 	.word	0x0800ac5f

08007868 <atexit>:
 8007868:	2300      	movs	r3, #0
 800786a:	4601      	mov	r1, r0
 800786c:	461a      	mov	r2, r3
 800786e:	4618      	mov	r0, r3
 8007870:	f000 bb1a 	b.w	8007ea8 <__register_exitproc>

08007874 <malloc>:
 8007874:	4b02      	ldr	r3, [pc, #8]	@ (8007880 <malloc+0xc>)
 8007876:	4601      	mov	r1, r0
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	f000 b82d 	b.w	80078d8 <_malloc_r>
 800787e:	bf00      	nop
 8007880:	20000028 	.word	0x20000028

08007884 <free>:
 8007884:	4b02      	ldr	r3, [pc, #8]	@ (8007890 <free+0xc>)
 8007886:	4601      	mov	r1, r0
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f000 bb69 	b.w	8007f60 <_free_r>
 800788e:	bf00      	nop
 8007890:	20000028 	.word	0x20000028

08007894 <sbrk_aligned>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	4e0f      	ldr	r6, [pc, #60]	@ (80078d4 <sbrk_aligned+0x40>)
 8007898:	460c      	mov	r4, r1
 800789a:	6831      	ldr	r1, [r6, #0]
 800789c:	4605      	mov	r5, r0
 800789e:	b911      	cbnz	r1, 80078a6 <sbrk_aligned+0x12>
 80078a0:	f000 fa9c 	bl	8007ddc <_sbrk_r>
 80078a4:	6030      	str	r0, [r6, #0]
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 fa97 	bl	8007ddc <_sbrk_r>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	d103      	bne.n	80078ba <sbrk_aligned+0x26>
 80078b2:	f04f 34ff 	mov.w	r4, #4294967295
 80078b6:	4620      	mov	r0, r4
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	1cc4      	adds	r4, r0, #3
 80078bc:	f024 0403 	bic.w	r4, r4, #3
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d0f8      	beq.n	80078b6 <sbrk_aligned+0x22>
 80078c4:	1a21      	subs	r1, r4, r0
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 fa88 	bl	8007ddc <_sbrk_r>
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1f2      	bne.n	80078b6 <sbrk_aligned+0x22>
 80078d0:	e7ef      	b.n	80078b2 <sbrk_aligned+0x1e>
 80078d2:	bf00      	nop
 80078d4:	20000370 	.word	0x20000370

080078d8 <_malloc_r>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	1ccd      	adds	r5, r1, #3
 80078de:	f025 0503 	bic.w	r5, r5, #3
 80078e2:	3508      	adds	r5, #8
 80078e4:	2d0c      	cmp	r5, #12
 80078e6:	bf38      	it	cc
 80078e8:	250c      	movcc	r5, #12
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	4606      	mov	r6, r0
 80078ee:	db01      	blt.n	80078f4 <_malloc_r+0x1c>
 80078f0:	42a9      	cmp	r1, r5
 80078f2:	d904      	bls.n	80078fe <_malloc_r+0x26>
 80078f4:	230c      	movs	r3, #12
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	2000      	movs	r0, #0
 80078fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079d4 <_malloc_r+0xfc>
 8007902:	f000 f869 	bl	80079d8 <__malloc_lock>
 8007906:	f8d8 3000 	ldr.w	r3, [r8]
 800790a:	461c      	mov	r4, r3
 800790c:	bb44      	cbnz	r4, 8007960 <_malloc_r+0x88>
 800790e:	4629      	mov	r1, r5
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff ffbf 	bl	8007894 <sbrk_aligned>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	4604      	mov	r4, r0
 800791a:	d158      	bne.n	80079ce <_malloc_r+0xf6>
 800791c:	f8d8 4000 	ldr.w	r4, [r8]
 8007920:	4627      	mov	r7, r4
 8007922:	2f00      	cmp	r7, #0
 8007924:	d143      	bne.n	80079ae <_malloc_r+0xd6>
 8007926:	2c00      	cmp	r4, #0
 8007928:	d04b      	beq.n	80079c2 <_malloc_r+0xea>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	4639      	mov	r1, r7
 800792e:	4630      	mov	r0, r6
 8007930:	eb04 0903 	add.w	r9, r4, r3
 8007934:	f000 fa52 	bl	8007ddc <_sbrk_r>
 8007938:	4581      	cmp	r9, r0
 800793a:	d142      	bne.n	80079c2 <_malloc_r+0xea>
 800793c:	6821      	ldr	r1, [r4, #0]
 800793e:	1a6d      	subs	r5, r5, r1
 8007940:	4629      	mov	r1, r5
 8007942:	4630      	mov	r0, r6
 8007944:	f7ff ffa6 	bl	8007894 <sbrk_aligned>
 8007948:	3001      	adds	r0, #1
 800794a:	d03a      	beq.n	80079c2 <_malloc_r+0xea>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	442b      	add	r3, r5
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	f8d8 3000 	ldr.w	r3, [r8]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	bb62      	cbnz	r2, 80079b4 <_malloc_r+0xdc>
 800795a:	f8c8 7000 	str.w	r7, [r8]
 800795e:	e00f      	b.n	8007980 <_malloc_r+0xa8>
 8007960:	6822      	ldr	r2, [r4, #0]
 8007962:	1b52      	subs	r2, r2, r5
 8007964:	d420      	bmi.n	80079a8 <_malloc_r+0xd0>
 8007966:	2a0b      	cmp	r2, #11
 8007968:	d917      	bls.n	800799a <_malloc_r+0xc2>
 800796a:	1961      	adds	r1, r4, r5
 800796c:	42a3      	cmp	r3, r4
 800796e:	6025      	str	r5, [r4, #0]
 8007970:	bf18      	it	ne
 8007972:	6059      	strne	r1, [r3, #4]
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	bf08      	it	eq
 8007978:	f8c8 1000 	streq.w	r1, [r8]
 800797c:	5162      	str	r2, [r4, r5]
 800797e:	604b      	str	r3, [r1, #4]
 8007980:	4630      	mov	r0, r6
 8007982:	f000 f82f 	bl	80079e4 <__malloc_unlock>
 8007986:	f104 000b 	add.w	r0, r4, #11
 800798a:	1d23      	adds	r3, r4, #4
 800798c:	f020 0007 	bic.w	r0, r0, #7
 8007990:	1ac2      	subs	r2, r0, r3
 8007992:	bf1c      	itt	ne
 8007994:	1a1b      	subne	r3, r3, r0
 8007996:	50a3      	strne	r3, [r4, r2]
 8007998:	e7af      	b.n	80078fa <_malloc_r+0x22>
 800799a:	6862      	ldr	r2, [r4, #4]
 800799c:	42a3      	cmp	r3, r4
 800799e:	bf0c      	ite	eq
 80079a0:	f8c8 2000 	streq.w	r2, [r8]
 80079a4:	605a      	strne	r2, [r3, #4]
 80079a6:	e7eb      	b.n	8007980 <_malloc_r+0xa8>
 80079a8:	4623      	mov	r3, r4
 80079aa:	6864      	ldr	r4, [r4, #4]
 80079ac:	e7ae      	b.n	800790c <_malloc_r+0x34>
 80079ae:	463c      	mov	r4, r7
 80079b0:	687f      	ldr	r7, [r7, #4]
 80079b2:	e7b6      	b.n	8007922 <_malloc_r+0x4a>
 80079b4:	461a      	mov	r2, r3
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d1fb      	bne.n	80079b4 <_malloc_r+0xdc>
 80079bc:	2300      	movs	r3, #0
 80079be:	6053      	str	r3, [r2, #4]
 80079c0:	e7de      	b.n	8007980 <_malloc_r+0xa8>
 80079c2:	230c      	movs	r3, #12
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f80c 	bl	80079e4 <__malloc_unlock>
 80079cc:	e794      	b.n	80078f8 <_malloc_r+0x20>
 80079ce:	6005      	str	r5, [r0, #0]
 80079d0:	e7d6      	b.n	8007980 <_malloc_r+0xa8>
 80079d2:	bf00      	nop
 80079d4:	20000374 	.word	0x20000374

080079d8 <__malloc_lock>:
 80079d8:	4801      	ldr	r0, [pc, #4]	@ (80079e0 <__malloc_lock+0x8>)
 80079da:	f000 ba4c 	b.w	8007e76 <__retarget_lock_acquire_recursive>
 80079de:	bf00      	nop
 80079e0:	200004b8 	.word	0x200004b8

080079e4 <__malloc_unlock>:
 80079e4:	4801      	ldr	r0, [pc, #4]	@ (80079ec <__malloc_unlock+0x8>)
 80079e6:	f000 ba47 	b.w	8007e78 <__retarget_lock_release_recursive>
 80079ea:	bf00      	nop
 80079ec:	200004b8 	.word	0x200004b8

080079f0 <std>:
 80079f0:	2300      	movs	r3, #0
 80079f2:	b510      	push	{r4, lr}
 80079f4:	4604      	mov	r4, r0
 80079f6:	e9c0 3300 	strd	r3, r3, [r0]
 80079fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079fe:	6083      	str	r3, [r0, #8]
 8007a00:	8181      	strh	r1, [r0, #12]
 8007a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a04:	81c2      	strh	r2, [r0, #14]
 8007a06:	6183      	str	r3, [r0, #24]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	305c      	adds	r0, #92	@ 0x5c
 8007a0e:	f000 f965 	bl	8007cdc <memset>
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <std+0x58>)
 8007a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a16:	4b0d      	ldr	r3, [pc, #52]	@ (8007a4c <std+0x5c>)
 8007a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a50 <std+0x60>)
 8007a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <std+0x64>)
 8007a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a22:	4b0d      	ldr	r3, [pc, #52]	@ (8007a58 <std+0x68>)
 8007a24:	6224      	str	r4, [r4, #32]
 8007a26:	429c      	cmp	r4, r3
 8007a28:	d006      	beq.n	8007a38 <std+0x48>
 8007a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a2e:	4294      	cmp	r4, r2
 8007a30:	d002      	beq.n	8007a38 <std+0x48>
 8007a32:	33d0      	adds	r3, #208	@ 0xd0
 8007a34:	429c      	cmp	r4, r3
 8007a36:	d105      	bne.n	8007a44 <std+0x54>
 8007a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a40:	f000 ba18 	b.w	8007e74 <__retarget_lock_init_recursive>
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	bf00      	nop
 8007a48:	08007bdd 	.word	0x08007bdd
 8007a4c:	08007bff 	.word	0x08007bff
 8007a50:	08007c37 	.word	0x08007c37
 8007a54:	08007c5b 	.word	0x08007c5b
 8007a58:	20000378 	.word	0x20000378

08007a5c <stdio_exit_handler>:
 8007a5c:	4a02      	ldr	r2, [pc, #8]	@ (8007a68 <stdio_exit_handler+0xc>)
 8007a5e:	4903      	ldr	r1, [pc, #12]	@ (8007a6c <stdio_exit_handler+0x10>)
 8007a60:	4803      	ldr	r0, [pc, #12]	@ (8007a70 <stdio_exit_handler+0x14>)
 8007a62:	f000 b87b 	b.w	8007b5c <_fwalk_sglue>
 8007a66:	bf00      	nop
 8007a68:	2000001c 	.word	0x2000001c
 8007a6c:	08008949 	.word	0x08008949
 8007a70:	2000002c 	.word	0x2000002c

08007a74 <cleanup_stdio>:
 8007a74:	6841      	ldr	r1, [r0, #4]
 8007a76:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa8 <cleanup_stdio+0x34>)
 8007a78:	4299      	cmp	r1, r3
 8007a7a:	b510      	push	{r4, lr}
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	d001      	beq.n	8007a84 <cleanup_stdio+0x10>
 8007a80:	f000 ff62 	bl	8008948 <_fflush_r>
 8007a84:	68a1      	ldr	r1, [r4, #8]
 8007a86:	4b09      	ldr	r3, [pc, #36]	@ (8007aac <cleanup_stdio+0x38>)
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d002      	beq.n	8007a92 <cleanup_stdio+0x1e>
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 ff5b 	bl	8008948 <_fflush_r>
 8007a92:	68e1      	ldr	r1, [r4, #12]
 8007a94:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <cleanup_stdio+0x3c>)
 8007a96:	4299      	cmp	r1, r3
 8007a98:	d004      	beq.n	8007aa4 <cleanup_stdio+0x30>
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa0:	f000 bf52 	b.w	8008948 <_fflush_r>
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000378 	.word	0x20000378
 8007aac:	200003e0 	.word	0x200003e0
 8007ab0:	20000448 	.word	0x20000448

08007ab4 <global_stdio_init.part.0>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <global_stdio_init.part.0+0x30>)
 8007ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8007ae8 <global_stdio_init.part.0+0x34>)
 8007aba:	4a0c      	ldr	r2, [pc, #48]	@ (8007aec <global_stdio_init.part.0+0x38>)
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	4620      	mov	r0, r4
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2104      	movs	r1, #4
 8007ac4:	f7ff ff94 	bl	80079f0 <std>
 8007ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007acc:	2201      	movs	r2, #1
 8007ace:	2109      	movs	r1, #9
 8007ad0:	f7ff ff8e 	bl	80079f0 <std>
 8007ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ad8:	2202      	movs	r2, #2
 8007ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ade:	2112      	movs	r1, #18
 8007ae0:	f7ff bf86 	b.w	80079f0 <std>
 8007ae4:	200004b0 	.word	0x200004b0
 8007ae8:	20000378 	.word	0x20000378
 8007aec:	08007a5d 	.word	0x08007a5d

08007af0 <__sfp_lock_acquire>:
 8007af0:	4801      	ldr	r0, [pc, #4]	@ (8007af8 <__sfp_lock_acquire+0x8>)
 8007af2:	f000 b9c0 	b.w	8007e76 <__retarget_lock_acquire_recursive>
 8007af6:	bf00      	nop
 8007af8:	200004ba 	.word	0x200004ba

08007afc <__sfp_lock_release>:
 8007afc:	4801      	ldr	r0, [pc, #4]	@ (8007b04 <__sfp_lock_release+0x8>)
 8007afe:	f000 b9bb 	b.w	8007e78 <__retarget_lock_release_recursive>
 8007b02:	bf00      	nop
 8007b04:	200004ba 	.word	0x200004ba

08007b08 <__sinit>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	f7ff fff0 	bl	8007af0 <__sfp_lock_acquire>
 8007b10:	6a23      	ldr	r3, [r4, #32]
 8007b12:	b11b      	cbz	r3, 8007b1c <__sinit+0x14>
 8007b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b18:	f7ff bff0 	b.w	8007afc <__sfp_lock_release>
 8007b1c:	4b04      	ldr	r3, [pc, #16]	@ (8007b30 <__sinit+0x28>)
 8007b1e:	6223      	str	r3, [r4, #32]
 8007b20:	4b04      	ldr	r3, [pc, #16]	@ (8007b34 <__sinit+0x2c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f5      	bne.n	8007b14 <__sinit+0xc>
 8007b28:	f7ff ffc4 	bl	8007ab4 <global_stdio_init.part.0>
 8007b2c:	e7f2      	b.n	8007b14 <__sinit+0xc>
 8007b2e:	bf00      	nop
 8007b30:	08007a75 	.word	0x08007a75
 8007b34:	200004b0 	.word	0x200004b0

08007b38 <fiprintf>:
 8007b38:	b40e      	push	{r1, r2, r3}
 8007b3a:	b503      	push	{r0, r1, lr}
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	ab03      	add	r3, sp, #12
 8007b40:	4805      	ldr	r0, [pc, #20]	@ (8007b58 <fiprintf+0x20>)
 8007b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b46:	6800      	ldr	r0, [r0, #0]
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	f000 fbd5 	bl	80082f8 <_vfiprintf_r>
 8007b4e:	b002      	add	sp, #8
 8007b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b54:	b003      	add	sp, #12
 8007b56:	4770      	bx	lr
 8007b58:	20000028 	.word	0x20000028

08007b5c <_fwalk_sglue>:
 8007b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b60:	4607      	mov	r7, r0
 8007b62:	4688      	mov	r8, r1
 8007b64:	4614      	mov	r4, r2
 8007b66:	2600      	movs	r6, #0
 8007b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8007b70:	d505      	bpl.n	8007b7e <_fwalk_sglue+0x22>
 8007b72:	6824      	ldr	r4, [r4, #0]
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	d1f7      	bne.n	8007b68 <_fwalk_sglue+0xc>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	89ab      	ldrh	r3, [r5, #12]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d907      	bls.n	8007b94 <_fwalk_sglue+0x38>
 8007b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	d003      	beq.n	8007b94 <_fwalk_sglue+0x38>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4638      	mov	r0, r7
 8007b90:	47c0      	blx	r8
 8007b92:	4306      	orrs	r6, r0
 8007b94:	3568      	adds	r5, #104	@ 0x68
 8007b96:	e7e9      	b.n	8007b6c <_fwalk_sglue+0x10>

08007b98 <siprintf>:
 8007b98:	b40e      	push	{r1, r2, r3}
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	b09d      	sub	sp, #116	@ 0x74
 8007b9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007ba0:	9002      	str	r0, [sp, #8]
 8007ba2:	9006      	str	r0, [sp, #24]
 8007ba4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ba8:	480a      	ldr	r0, [pc, #40]	@ (8007bd4 <siprintf+0x3c>)
 8007baa:	9107      	str	r1, [sp, #28]
 8007bac:	9104      	str	r1, [sp, #16]
 8007bae:	490a      	ldr	r1, [pc, #40]	@ (8007bd8 <siprintf+0x40>)
 8007bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	2400      	movs	r4, #0
 8007bb8:	a902      	add	r1, sp, #8
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007bc0:	f000 fa74 	bl	80080ac <_svfiprintf_r>
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	701c      	strb	r4, [r3, #0]
 8007bc8:	b01d      	add	sp, #116	@ 0x74
 8007bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bce:	b003      	add	sp, #12
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000028 	.word	0x20000028
 8007bd8:	ffff0208 	.word	0xffff0208

08007bdc <__sread>:
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	460c      	mov	r4, r1
 8007be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be4:	f000 f8d4 	bl	8007d90 <_read_r>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	bfab      	itete	ge
 8007bec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bee:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf0:	181b      	addge	r3, r3, r0
 8007bf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bf6:	bfac      	ite	ge
 8007bf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bfa:	81a3      	strhlt	r3, [r4, #12]
 8007bfc:	bd10      	pop	{r4, pc}

08007bfe <__swrite>:
 8007bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c02:	461f      	mov	r7, r3
 8007c04:	898b      	ldrh	r3, [r1, #12]
 8007c06:	05db      	lsls	r3, r3, #23
 8007c08:	4605      	mov	r5, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	d505      	bpl.n	8007c1c <__swrite+0x1e>
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	2302      	movs	r3, #2
 8007c16:	2200      	movs	r2, #0
 8007c18:	f000 f8a8 	bl	8007d6c <_lseek_r>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	4632      	mov	r2, r6
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	f000 b8e3 	b.w	8007dfc <_write_r>

08007c36 <__sseek>:
 8007c36:	b510      	push	{r4, lr}
 8007c38:	460c      	mov	r4, r1
 8007c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3e:	f000 f895 	bl	8007d6c <_lseek_r>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	bf15      	itete	ne
 8007c48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c52:	81a3      	strheq	r3, [r4, #12]
 8007c54:	bf18      	it	ne
 8007c56:	81a3      	strhne	r3, [r4, #12]
 8007c58:	bd10      	pop	{r4, pc}

08007c5a <__sclose>:
 8007c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5e:	f000 b875 	b.w	8007d4c <_close_r>

08007c62 <_vsniprintf_r>:
 8007c62:	b530      	push	{r4, r5, lr}
 8007c64:	4614      	mov	r4, r2
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	b09b      	sub	sp, #108	@ 0x6c
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	da05      	bge.n	8007c7c <_vsniprintf_r+0x1a>
 8007c70:	238b      	movs	r3, #139	@ 0x8b
 8007c72:	6003      	str	r3, [r0, #0]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	b01b      	add	sp, #108	@ 0x6c
 8007c7a:	bd30      	pop	{r4, r5, pc}
 8007c7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c80:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c8a:	bf14      	ite	ne
 8007c8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c90:	4623      	moveq	r3, r4
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	9305      	str	r3, [sp, #20]
 8007c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c9a:	9100      	str	r1, [sp, #0]
 8007c9c:	9104      	str	r1, [sp, #16]
 8007c9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ca2:	4669      	mov	r1, sp
 8007ca4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007ca6:	f000 fa01 	bl	80080ac <_svfiprintf_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	bfbc      	itt	lt
 8007cae:	238b      	movlt	r3, #139	@ 0x8b
 8007cb0:	602b      	strlt	r3, [r5, #0]
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d0e0      	beq.n	8007c78 <_vsniprintf_r+0x16>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	e7dc      	b.n	8007c78 <_vsniprintf_r+0x16>
	...

08007cc0 <vsniprintf>:
 8007cc0:	b507      	push	{r0, r1, r2, lr}
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	4601      	mov	r1, r0
 8007cca:	4803      	ldr	r0, [pc, #12]	@ (8007cd8 <vsniprintf+0x18>)
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f7ff ffc8 	bl	8007c62 <_vsniprintf_r>
 8007cd2:	b003      	add	sp, #12
 8007cd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cd8:	20000028 	.word	0x20000028

08007cdc <memset>:
 8007cdc:	4402      	add	r2, r0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d100      	bne.n	8007ce6 <memset+0xa>
 8007ce4:	4770      	bx	lr
 8007ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cea:	e7f9      	b.n	8007ce0 <memset+0x4>

08007cec <_raise_r>:
 8007cec:	291f      	cmp	r1, #31
 8007cee:	b538      	push	{r3, r4, r5, lr}
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	d904      	bls.n	8007d00 <_raise_r+0x14>
 8007cf6:	2316      	movs	r3, #22
 8007cf8:	6003      	str	r3, [r0, #0]
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d02:	b112      	cbz	r2, 8007d0a <_raise_r+0x1e>
 8007d04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d08:	b94b      	cbnz	r3, 8007d1e <_raise_r+0x32>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 f864 	bl	8007dd8 <_getpid_r>
 8007d10:	4622      	mov	r2, r4
 8007d12:	4601      	mov	r1, r0
 8007d14:	4628      	mov	r0, r5
 8007d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1a:	f000 b84b 	b.w	8007db4 <_kill_r>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d00a      	beq.n	8007d38 <_raise_r+0x4c>
 8007d22:	1c59      	adds	r1, r3, #1
 8007d24:	d103      	bne.n	8007d2e <_raise_r+0x42>
 8007d26:	2316      	movs	r3, #22
 8007d28:	6003      	str	r3, [r0, #0]
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	e7e7      	b.n	8007cfe <_raise_r+0x12>
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d34:	4620      	mov	r0, r4
 8007d36:	4798      	blx	r3
 8007d38:	2000      	movs	r0, #0
 8007d3a:	e7e0      	b.n	8007cfe <_raise_r+0x12>

08007d3c <raise>:
 8007d3c:	4b02      	ldr	r3, [pc, #8]	@ (8007d48 <raise+0xc>)
 8007d3e:	4601      	mov	r1, r0
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	f7ff bfd3 	b.w	8007cec <_raise_r>
 8007d46:	bf00      	nop
 8007d48:	20000028 	.word	0x20000028

08007d4c <_close_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d06      	ldr	r5, [pc, #24]	@ (8007d68 <_close_r+0x1c>)
 8007d50:	2300      	movs	r3, #0
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7fa ff44 	bl	8002be4 <_close>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_close_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_close_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	200004b4 	.word	0x200004b4

08007d6c <_lseek_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d07      	ldr	r5, [pc, #28]	@ (8007d8c <_lseek_r+0x20>)
 8007d70:	4604      	mov	r4, r0
 8007d72:	4608      	mov	r0, r1
 8007d74:	4611      	mov	r1, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	602a      	str	r2, [r5, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f7fa ff59 	bl	8002c32 <_lseek>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_lseek_r+0x1e>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_lseek_r+0x1e>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	200004b4 	.word	0x200004b4

08007d90 <_read_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	@ (8007db0 <_read_r+0x20>)
 8007d94:	4604      	mov	r4, r0
 8007d96:	4608      	mov	r0, r1
 8007d98:	4611      	mov	r1, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	602a      	str	r2, [r5, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f7fa fee7 	bl	8002b72 <_read>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d102      	bne.n	8007dae <_read_r+0x1e>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b103      	cbz	r3, 8007dae <_read_r+0x1e>
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	200004b4 	.word	0x200004b4

08007db4 <_kill_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d07      	ldr	r5, [pc, #28]	@ (8007dd4 <_kill_r+0x20>)
 8007db8:	2300      	movs	r3, #0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	f7fa febb 	bl	8002b3c <_kill>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	d102      	bne.n	8007dd0 <_kill_r+0x1c>
 8007dca:	682b      	ldr	r3, [r5, #0]
 8007dcc:	b103      	cbz	r3, 8007dd0 <_kill_r+0x1c>
 8007dce:	6023      	str	r3, [r4, #0]
 8007dd0:	bd38      	pop	{r3, r4, r5, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200004b4 	.word	0x200004b4

08007dd8 <_getpid_r>:
 8007dd8:	f7fa bea8 	b.w	8002b2c <_getpid>

08007ddc <_sbrk_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	@ (8007df8 <_sbrk_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7fa ff30 	bl	8002c4c <_sbrk>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_sbrk_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_sbrk_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	200004b4 	.word	0x200004b4

08007dfc <_write_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d07      	ldr	r5, [pc, #28]	@ (8007e1c <_write_r+0x20>)
 8007e00:	4604      	mov	r4, r0
 8007e02:	4608      	mov	r0, r1
 8007e04:	4611      	mov	r1, r2
 8007e06:	2200      	movs	r2, #0
 8007e08:	602a      	str	r2, [r5, #0]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f7fa fece 	bl	8002bac <_write>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_write_r+0x1e>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_write_r+0x1e>
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	200004b4 	.word	0x200004b4

08007e20 <__errno>:
 8007e20:	4b01      	ldr	r3, [pc, #4]	@ (8007e28 <__errno+0x8>)
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000028 	.word	0x20000028

08007e2c <__libc_init_array>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e64 <__libc_init_array+0x38>)
 8007e30:	4c0d      	ldr	r4, [pc, #52]	@ (8007e68 <__libc_init_array+0x3c>)
 8007e32:	1b64      	subs	r4, r4, r5
 8007e34:	10a4      	asrs	r4, r4, #2
 8007e36:	2600      	movs	r6, #0
 8007e38:	42a6      	cmp	r6, r4
 8007e3a:	d109      	bne.n	8007e50 <__libc_init_array+0x24>
 8007e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e6c <__libc_init_array+0x40>)
 8007e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e70 <__libc_init_array+0x44>)
 8007e40:	f000 ff12 	bl	8008c68 <_init>
 8007e44:	1b64      	subs	r4, r4, r5
 8007e46:	10a4      	asrs	r4, r4, #2
 8007e48:	2600      	movs	r6, #0
 8007e4a:	42a6      	cmp	r6, r4
 8007e4c:	d105      	bne.n	8007e5a <__libc_init_array+0x2e>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e54:	4798      	blx	r3
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7ee      	b.n	8007e38 <__libc_init_array+0xc>
 8007e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5e:	4798      	blx	r3
 8007e60:	3601      	adds	r6, #1
 8007e62:	e7f2      	b.n	8007e4a <__libc_init_array+0x1e>
 8007e64:	0800be80 	.word	0x0800be80
 8007e68:	0800be80 	.word	0x0800be80
 8007e6c:	0800be80 	.word	0x0800be80
 8007e70:	0800be90 	.word	0x0800be90

08007e74 <__retarget_lock_init_recursive>:
 8007e74:	4770      	bx	lr

08007e76 <__retarget_lock_acquire_recursive>:
 8007e76:	4770      	bx	lr

08007e78 <__retarget_lock_release_recursive>:
 8007e78:	4770      	bx	lr

08007e7a <strcpy>:
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e80:	f803 2b01 	strb.w	r2, [r3], #1
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	d1f9      	bne.n	8007e7c <strcpy+0x2>
 8007e88:	4770      	bx	lr

08007e8a <memcpy>:
 8007e8a:	440a      	add	r2, r1
 8007e8c:	4291      	cmp	r1, r2
 8007e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e92:	d100      	bne.n	8007e96 <memcpy+0xc>
 8007e94:	4770      	bx	lr
 8007e96:	b510      	push	{r4, lr}
 8007e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea0:	4291      	cmp	r1, r2
 8007ea2:	d1f9      	bne.n	8007e98 <memcpy+0xe>
 8007ea4:	bd10      	pop	{r4, pc}
	...

08007ea8 <__register_exitproc>:
 8007ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eac:	4d27      	ldr	r5, [pc, #156]	@ (8007f4c <__register_exitproc+0xa4>)
 8007eae:	4607      	mov	r7, r0
 8007eb0:	6828      	ldr	r0, [r5, #0]
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	4698      	mov	r8, r3
 8007eb8:	f7ff ffdd 	bl	8007e76 <__retarget_lock_acquire_recursive>
 8007ebc:	4a24      	ldr	r2, [pc, #144]	@ (8007f50 <__register_exitproc+0xa8>)
 8007ebe:	6814      	ldr	r4, [r2, #0]
 8007ec0:	b93c      	cbnz	r4, 8007ed2 <__register_exitproc+0x2a>
 8007ec2:	4b24      	ldr	r3, [pc, #144]	@ (8007f54 <__register_exitproc+0xac>)
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	4a24      	ldr	r2, [pc, #144]	@ (8007f58 <__register_exitproc+0xb0>)
 8007ec8:	b112      	cbz	r2, 8007ed0 <__register_exitproc+0x28>
 8007eca:	6812      	ldr	r2, [r2, #0]
 8007ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8007ed0:	4c20      	ldr	r4, [pc, #128]	@ (8007f54 <__register_exitproc+0xac>)
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	2b1f      	cmp	r3, #31
 8007ed6:	dd06      	ble.n	8007ee6 <__register_exitproc+0x3e>
 8007ed8:	6828      	ldr	r0, [r5, #0]
 8007eda:	f7ff ffcd 	bl	8007e78 <__retarget_lock_release_recursive>
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee6:	b32f      	cbz	r7, 8007f34 <__register_exitproc+0x8c>
 8007ee8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8007eec:	b968      	cbnz	r0, 8007f0a <__register_exitproc+0x62>
 8007eee:	4b1b      	ldr	r3, [pc, #108]	@ (8007f5c <__register_exitproc+0xb4>)
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0f1      	beq.n	8007ed8 <__register_exitproc+0x30>
 8007ef4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8007ef8:	f7ff fcbc 	bl	8007874 <malloc>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d0eb      	beq.n	8007ed8 <__register_exitproc+0x30>
 8007f00:	2300      	movs	r3, #0
 8007f02:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8007f06:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007f10:	2201      	movs	r2, #1
 8007f12:	409a      	lsls	r2, r3
 8007f14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007f18:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8007f22:	2f02      	cmp	r7, #2
 8007f24:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8007f28:	bf02      	ittt	eq
 8007f2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8007f2e:	4313      	orreq	r3, r2
 8007f30:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	6828      	ldr	r0, [r5, #0]
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	3302      	adds	r3, #2
 8007f3c:	6062      	str	r2, [r4, #4]
 8007f3e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8007f42:	f7ff ff99 	bl	8007e78 <__retarget_lock_release_recursive>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e7cb      	b.n	8007ee2 <__register_exitproc+0x3a>
 8007f4a:	bf00      	nop
 8007f4c:	20000078 	.word	0x20000078
 8007f50:	20000548 	.word	0x20000548
 8007f54:	200004bc 	.word	0x200004bc
 8007f58:	0800ac94 	.word	0x0800ac94
 8007f5c:	08007875 	.word	0x08007875

08007f60 <_free_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d041      	beq.n	8007fec <_free_r+0x8c>
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f0c      	subs	r4, r1, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	18e4      	addlt	r4, r4, r3
 8007f74:	f7ff fd30 	bl	80079d8 <__malloc_lock>
 8007f78:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff0 <_free_r+0x90>)
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	b933      	cbnz	r3, 8007f8c <_free_r+0x2c>
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	4628      	mov	r0, r5
 8007f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f88:	f7ff bd2c 	b.w	80079e4 <__malloc_unlock>
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	d908      	bls.n	8007fa2 <_free_r+0x42>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428b      	cmp	r3, r1
 8007f96:	bf01      	itttt	eq
 8007f98:	6819      	ldreq	r1, [r3, #0]
 8007f9a:	685b      	ldreq	r3, [r3, #4]
 8007f9c:	1809      	addeq	r1, r1, r0
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	e7ed      	b.n	8007f7e <_free_r+0x1e>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b10b      	cbz	r3, 8007fac <_free_r+0x4c>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d9fa      	bls.n	8007fa2 <_free_r+0x42>
 8007fac:	6811      	ldr	r1, [r2, #0]
 8007fae:	1850      	adds	r0, r2, r1
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d10b      	bne.n	8007fcc <_free_r+0x6c>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	4401      	add	r1, r0
 8007fb8:	1850      	adds	r0, r2, r1
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	d1e0      	bne.n	8007f82 <_free_r+0x22>
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	6053      	str	r3, [r2, #4]
 8007fc6:	4408      	add	r0, r1
 8007fc8:	6010      	str	r0, [r2, #0]
 8007fca:	e7da      	b.n	8007f82 <_free_r+0x22>
 8007fcc:	d902      	bls.n	8007fd4 <_free_r+0x74>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	e7d6      	b.n	8007f82 <_free_r+0x22>
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	1821      	adds	r1, r4, r0
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	bf04      	itt	eq
 8007fdc:	6819      	ldreq	r1, [r3, #0]
 8007fde:	685b      	ldreq	r3, [r3, #4]
 8007fe0:	6063      	str	r3, [r4, #4]
 8007fe2:	bf04      	itt	eq
 8007fe4:	1809      	addeq	r1, r1, r0
 8007fe6:	6021      	streq	r1, [r4, #0]
 8007fe8:	6054      	str	r4, [r2, #4]
 8007fea:	e7ca      	b.n	8007f82 <_free_r+0x22>
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000374 	.word	0x20000374

08007ff4 <__ssputs_r>:
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	688e      	ldr	r6, [r1, #8]
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	42be      	cmp	r6, r7
 8007ffe:	680b      	ldr	r3, [r1, #0]
 8008000:	4682      	mov	sl, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4690      	mov	r8, r2
 8008006:	d82d      	bhi.n	8008064 <__ssputs_r+0x70>
 8008008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800800c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008010:	d026      	beq.n	8008060 <__ssputs_r+0x6c>
 8008012:	6965      	ldr	r5, [r4, #20]
 8008014:	6909      	ldr	r1, [r1, #16]
 8008016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800801a:	eba3 0901 	sub.w	r9, r3, r1
 800801e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008022:	1c7b      	adds	r3, r7, #1
 8008024:	444b      	add	r3, r9
 8008026:	106d      	asrs	r5, r5, #1
 8008028:	429d      	cmp	r5, r3
 800802a:	bf38      	it	cc
 800802c:	461d      	movcc	r5, r3
 800802e:	0553      	lsls	r3, r2, #21
 8008030:	d527      	bpl.n	8008082 <__ssputs_r+0x8e>
 8008032:	4629      	mov	r1, r5
 8008034:	f7ff fc50 	bl	80078d8 <_malloc_r>
 8008038:	4606      	mov	r6, r0
 800803a:	b360      	cbz	r0, 8008096 <__ssputs_r+0xa2>
 800803c:	6921      	ldr	r1, [r4, #16]
 800803e:	464a      	mov	r2, r9
 8008040:	f7ff ff23 	bl	8007e8a <memcpy>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800804a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	6126      	str	r6, [r4, #16]
 8008052:	6165      	str	r5, [r4, #20]
 8008054:	444e      	add	r6, r9
 8008056:	eba5 0509 	sub.w	r5, r5, r9
 800805a:	6026      	str	r6, [r4, #0]
 800805c:	60a5      	str	r5, [r4, #8]
 800805e:	463e      	mov	r6, r7
 8008060:	42be      	cmp	r6, r7
 8008062:	d900      	bls.n	8008066 <__ssputs_r+0x72>
 8008064:	463e      	mov	r6, r7
 8008066:	6820      	ldr	r0, [r4, #0]
 8008068:	4632      	mov	r2, r6
 800806a:	4641      	mov	r1, r8
 800806c:	f000 fd28 	bl	8008ac0 <memmove>
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	1b9b      	subs	r3, r3, r6
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	4433      	add	r3, r6
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008082:	462a      	mov	r2, r5
 8008084:	f000 fd36 	bl	8008af4 <_realloc_r>
 8008088:	4606      	mov	r6, r0
 800808a:	2800      	cmp	r0, #0
 800808c:	d1e0      	bne.n	8008050 <__ssputs_r+0x5c>
 800808e:	6921      	ldr	r1, [r4, #16]
 8008090:	4650      	mov	r0, sl
 8008092:	f7ff ff65 	bl	8007f60 <_free_r>
 8008096:	230c      	movs	r3, #12
 8008098:	f8ca 3000 	str.w	r3, [sl]
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080a2:	81a3      	strh	r3, [r4, #12]
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	e7e9      	b.n	800807e <__ssputs_r+0x8a>
	...

080080ac <_svfiprintf_r>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	4698      	mov	r8, r3
 80080b2:	898b      	ldrh	r3, [r1, #12]
 80080b4:	061b      	lsls	r3, r3, #24
 80080b6:	b09d      	sub	sp, #116	@ 0x74
 80080b8:	4607      	mov	r7, r0
 80080ba:	460d      	mov	r5, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	d510      	bpl.n	80080e2 <_svfiprintf_r+0x36>
 80080c0:	690b      	ldr	r3, [r1, #16]
 80080c2:	b973      	cbnz	r3, 80080e2 <_svfiprintf_r+0x36>
 80080c4:	2140      	movs	r1, #64	@ 0x40
 80080c6:	f7ff fc07 	bl	80078d8 <_malloc_r>
 80080ca:	6028      	str	r0, [r5, #0]
 80080cc:	6128      	str	r0, [r5, #16]
 80080ce:	b930      	cbnz	r0, 80080de <_svfiprintf_r+0x32>
 80080d0:	230c      	movs	r3, #12
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295
 80080d8:	b01d      	add	sp, #116	@ 0x74
 80080da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	2340      	movs	r3, #64	@ 0x40
 80080e0:	616b      	str	r3, [r5, #20]
 80080e2:	2300      	movs	r3, #0
 80080e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e6:	2320      	movs	r3, #32
 80080e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f0:	2330      	movs	r3, #48	@ 0x30
 80080f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008290 <_svfiprintf_r+0x1e4>
 80080f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080fa:	f04f 0901 	mov.w	r9, #1
 80080fe:	4623      	mov	r3, r4
 8008100:	469a      	mov	sl, r3
 8008102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008106:	b10a      	cbz	r2, 800810c <_svfiprintf_r+0x60>
 8008108:	2a25      	cmp	r2, #37	@ 0x25
 800810a:	d1f9      	bne.n	8008100 <_svfiprintf_r+0x54>
 800810c:	ebba 0b04 	subs.w	fp, sl, r4
 8008110:	d00b      	beq.n	800812a <_svfiprintf_r+0x7e>
 8008112:	465b      	mov	r3, fp
 8008114:	4622      	mov	r2, r4
 8008116:	4629      	mov	r1, r5
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ff6b 	bl	8007ff4 <__ssputs_r>
 800811e:	3001      	adds	r0, #1
 8008120:	f000 80a7 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008126:	445a      	add	r2, fp
 8008128:	9209      	str	r2, [sp, #36]	@ 0x24
 800812a:	f89a 3000 	ldrb.w	r3, [sl]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 809f 	beq.w	8008272 <_svfiprintf_r+0x1c6>
 8008134:	2300      	movs	r3, #0
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800813e:	f10a 0a01 	add.w	sl, sl, #1
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	9307      	str	r3, [sp, #28]
 8008146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800814a:	931a      	str	r3, [sp, #104]	@ 0x68
 800814c:	4654      	mov	r4, sl
 800814e:	2205      	movs	r2, #5
 8008150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008154:	484e      	ldr	r0, [pc, #312]	@ (8008290 <_svfiprintf_r+0x1e4>)
 8008156:	f7f8 f85b 	bl	8000210 <memchr>
 800815a:	9a04      	ldr	r2, [sp, #16]
 800815c:	b9d8      	cbnz	r0, 8008196 <_svfiprintf_r+0xea>
 800815e:	06d0      	lsls	r0, r2, #27
 8008160:	bf44      	itt	mi
 8008162:	2320      	movmi	r3, #32
 8008164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008168:	0711      	lsls	r1, r2, #28
 800816a:	bf44      	itt	mi
 800816c:	232b      	movmi	r3, #43	@ 0x2b
 800816e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b2a      	cmp	r3, #42	@ 0x2a
 8008178:	d015      	beq.n	80081a6 <_svfiprintf_r+0xfa>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	4654      	mov	r4, sl
 800817e:	2000      	movs	r0, #0
 8008180:	f04f 0c0a 	mov.w	ip, #10
 8008184:	4621      	mov	r1, r4
 8008186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800818a:	3b30      	subs	r3, #48	@ 0x30
 800818c:	2b09      	cmp	r3, #9
 800818e:	d94b      	bls.n	8008228 <_svfiprintf_r+0x17c>
 8008190:	b1b0      	cbz	r0, 80081c0 <_svfiprintf_r+0x114>
 8008192:	9207      	str	r2, [sp, #28]
 8008194:	e014      	b.n	80081c0 <_svfiprintf_r+0x114>
 8008196:	eba0 0308 	sub.w	r3, r0, r8
 800819a:	fa09 f303 	lsl.w	r3, r9, r3
 800819e:	4313      	orrs	r3, r2
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	46a2      	mov	sl, r4
 80081a4:	e7d2      	b.n	800814c <_svfiprintf_r+0xa0>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	9103      	str	r1, [sp, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbb      	ittet	lt
 80081b2:	425b      	neglt	r3, r3
 80081b4:	f042 0202 	orrlt.w	r2, r2, #2
 80081b8:	9307      	strge	r3, [sp, #28]
 80081ba:	9307      	strlt	r3, [sp, #28]
 80081bc:	bfb8      	it	lt
 80081be:	9204      	strlt	r2, [sp, #16]
 80081c0:	7823      	ldrb	r3, [r4, #0]
 80081c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081c4:	d10a      	bne.n	80081dc <_svfiprintf_r+0x130>
 80081c6:	7863      	ldrb	r3, [r4, #1]
 80081c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ca:	d132      	bne.n	8008232 <_svfiprintf_r+0x186>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	9203      	str	r2, [sp, #12]
 80081d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081d8:	3402      	adds	r4, #2
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082a0 <_svfiprintf_r+0x1f4>
 80081e0:	7821      	ldrb	r1, [r4, #0]
 80081e2:	2203      	movs	r2, #3
 80081e4:	4650      	mov	r0, sl
 80081e6:	f7f8 f813 	bl	8000210 <memchr>
 80081ea:	b138      	cbz	r0, 80081fc <_svfiprintf_r+0x150>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	eba0 000a 	sub.w	r0, r0, sl
 80081f2:	2240      	movs	r2, #64	@ 0x40
 80081f4:	4082      	lsls	r2, r0
 80081f6:	4313      	orrs	r3, r2
 80081f8:	3401      	adds	r4, #1
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	4824      	ldr	r0, [pc, #144]	@ (8008294 <_svfiprintf_r+0x1e8>)
 8008202:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008206:	2206      	movs	r2, #6
 8008208:	f7f8 f802 	bl	8000210 <memchr>
 800820c:	2800      	cmp	r0, #0
 800820e:	d036      	beq.n	800827e <_svfiprintf_r+0x1d2>
 8008210:	4b21      	ldr	r3, [pc, #132]	@ (8008298 <_svfiprintf_r+0x1ec>)
 8008212:	bb1b      	cbnz	r3, 800825c <_svfiprintf_r+0x1b0>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	3307      	adds	r3, #7
 8008218:	f023 0307 	bic.w	r3, r3, #7
 800821c:	3308      	adds	r3, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008222:	4433      	add	r3, r6
 8008224:	9309      	str	r3, [sp, #36]	@ 0x24
 8008226:	e76a      	b.n	80080fe <_svfiprintf_r+0x52>
 8008228:	fb0c 3202 	mla	r2, ip, r2, r3
 800822c:	460c      	mov	r4, r1
 800822e:	2001      	movs	r0, #1
 8008230:	e7a8      	b.n	8008184 <_svfiprintf_r+0xd8>
 8008232:	2300      	movs	r3, #0
 8008234:	3401      	adds	r4, #1
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	4619      	mov	r1, r3
 800823a:	f04f 0c0a 	mov.w	ip, #10
 800823e:	4620      	mov	r0, r4
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	3a30      	subs	r2, #48	@ 0x30
 8008246:	2a09      	cmp	r2, #9
 8008248:	d903      	bls.n	8008252 <_svfiprintf_r+0x1a6>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c6      	beq.n	80081dc <_svfiprintf_r+0x130>
 800824e:	9105      	str	r1, [sp, #20]
 8008250:	e7c4      	b.n	80081dc <_svfiprintf_r+0x130>
 8008252:	fb0c 2101 	mla	r1, ip, r1, r2
 8008256:	4604      	mov	r4, r0
 8008258:	2301      	movs	r3, #1
 800825a:	e7f0      	b.n	800823e <_svfiprintf_r+0x192>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4b0e      	ldr	r3, [pc, #56]	@ (800829c <_svfiprintf_r+0x1f0>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4638      	mov	r0, r7
 8008268:	f3af 8000 	nop.w
 800826c:	1c42      	adds	r2, r0, #1
 800826e:	4606      	mov	r6, r0
 8008270:	d1d6      	bne.n	8008220 <_svfiprintf_r+0x174>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	065b      	lsls	r3, r3, #25
 8008276:	f53f af2d 	bmi.w	80080d4 <_svfiprintf_r+0x28>
 800827a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800827c:	e72c      	b.n	80080d8 <_svfiprintf_r+0x2c>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <_svfiprintf_r+0x1f0>)
 8008286:	a904      	add	r1, sp, #16
 8008288:	4638      	mov	r0, r7
 800828a:	f000 f9bb 	bl	8008604 <_printf_i>
 800828e:	e7ed      	b.n	800826c <_svfiprintf_r+0x1c0>
 8008290:	0800ac60 	.word	0x0800ac60
 8008294:	0800ac6a 	.word	0x0800ac6a
 8008298:	00000000 	.word	0x00000000
 800829c:	08007ff5 	.word	0x08007ff5
 80082a0:	0800ac66 	.word	0x0800ac66

080082a4 <__sfputc_r>:
 80082a4:	6893      	ldr	r3, [r2, #8]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	b410      	push	{r4}
 80082ac:	6093      	str	r3, [r2, #8]
 80082ae:	da08      	bge.n	80082c2 <__sfputc_r+0x1e>
 80082b0:	6994      	ldr	r4, [r2, #24]
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	db01      	blt.n	80082ba <__sfputc_r+0x16>
 80082b6:	290a      	cmp	r1, #10
 80082b8:	d103      	bne.n	80082c2 <__sfputc_r+0x1e>
 80082ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082be:	f000 bb6b 	b.w	8008998 <__swbuf_r>
 80082c2:	6813      	ldr	r3, [r2, #0]
 80082c4:	1c58      	adds	r0, r3, #1
 80082c6:	6010      	str	r0, [r2, #0]
 80082c8:	7019      	strb	r1, [r3, #0]
 80082ca:	4608      	mov	r0, r1
 80082cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <__sfputs_r>:
 80082d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d4:	4606      	mov	r6, r0
 80082d6:	460f      	mov	r7, r1
 80082d8:	4614      	mov	r4, r2
 80082da:	18d5      	adds	r5, r2, r3
 80082dc:	42ac      	cmp	r4, r5
 80082de:	d101      	bne.n	80082e4 <__sfputs_r+0x12>
 80082e0:	2000      	movs	r0, #0
 80082e2:	e007      	b.n	80082f4 <__sfputs_r+0x22>
 80082e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e8:	463a      	mov	r2, r7
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff ffda 	bl	80082a4 <__sfputc_r>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d1f3      	bne.n	80082dc <__sfputs_r+0xa>
 80082f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082f8 <_vfiprintf_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	460d      	mov	r5, r1
 80082fe:	b09d      	sub	sp, #116	@ 0x74
 8008300:	4614      	mov	r4, r2
 8008302:	4698      	mov	r8, r3
 8008304:	4606      	mov	r6, r0
 8008306:	b118      	cbz	r0, 8008310 <_vfiprintf_r+0x18>
 8008308:	6a03      	ldr	r3, [r0, #32]
 800830a:	b90b      	cbnz	r3, 8008310 <_vfiprintf_r+0x18>
 800830c:	f7ff fbfc 	bl	8007b08 <__sinit>
 8008310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008312:	07d9      	lsls	r1, r3, #31
 8008314:	d405      	bmi.n	8008322 <_vfiprintf_r+0x2a>
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	059a      	lsls	r2, r3, #22
 800831a:	d402      	bmi.n	8008322 <_vfiprintf_r+0x2a>
 800831c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800831e:	f7ff fdaa 	bl	8007e76 <__retarget_lock_acquire_recursive>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	071b      	lsls	r3, r3, #28
 8008326:	d501      	bpl.n	800832c <_vfiprintf_r+0x34>
 8008328:	692b      	ldr	r3, [r5, #16]
 800832a:	b99b      	cbnz	r3, 8008354 <_vfiprintf_r+0x5c>
 800832c:	4629      	mov	r1, r5
 800832e:	4630      	mov	r0, r6
 8008330:	f000 fb70 	bl	8008a14 <__swsetup_r>
 8008334:	b170      	cbz	r0, 8008354 <_vfiprintf_r+0x5c>
 8008336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008338:	07dc      	lsls	r4, r3, #31
 800833a:	d504      	bpl.n	8008346 <_vfiprintf_r+0x4e>
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b01d      	add	sp, #116	@ 0x74
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d4f7      	bmi.n	800833c <_vfiprintf_r+0x44>
 800834c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800834e:	f7ff fd93 	bl	8007e78 <__retarget_lock_release_recursive>
 8008352:	e7f3      	b.n	800833c <_vfiprintf_r+0x44>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	@ 0x24
 8008358:	2320      	movs	r3, #32
 800835a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800835e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008362:	2330      	movs	r3, #48	@ 0x30
 8008364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008514 <_vfiprintf_r+0x21c>
 8008368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800836c:	f04f 0901 	mov.w	r9, #1
 8008370:	4623      	mov	r3, r4
 8008372:	469a      	mov	sl, r3
 8008374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008378:	b10a      	cbz	r2, 800837e <_vfiprintf_r+0x86>
 800837a:	2a25      	cmp	r2, #37	@ 0x25
 800837c:	d1f9      	bne.n	8008372 <_vfiprintf_r+0x7a>
 800837e:	ebba 0b04 	subs.w	fp, sl, r4
 8008382:	d00b      	beq.n	800839c <_vfiprintf_r+0xa4>
 8008384:	465b      	mov	r3, fp
 8008386:	4622      	mov	r2, r4
 8008388:	4629      	mov	r1, r5
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ffa1 	bl	80082d2 <__sfputs_r>
 8008390:	3001      	adds	r0, #1
 8008392:	f000 80a7 	beq.w	80084e4 <_vfiprintf_r+0x1ec>
 8008396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008398:	445a      	add	r2, fp
 800839a:	9209      	str	r2, [sp, #36]	@ 0x24
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 809f 	beq.w	80084e4 <_vfiprintf_r+0x1ec>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	f10a 0a01 	add.w	sl, sl, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80083be:	4654      	mov	r4, sl
 80083c0:	2205      	movs	r2, #5
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	4853      	ldr	r0, [pc, #332]	@ (8008514 <_vfiprintf_r+0x21c>)
 80083c8:	f7f7 ff22 	bl	8000210 <memchr>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	b9d8      	cbnz	r0, 8008408 <_vfiprintf_r+0x110>
 80083d0:	06d1      	lsls	r1, r2, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2320      	movmi	r3, #32
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083da:	0713      	lsls	r3, r2, #28
 80083dc:	bf44      	itt	mi
 80083de:	232b      	movmi	r3, #43	@ 0x2b
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ea:	d015      	beq.n	8008418 <_vfiprintf_r+0x120>
 80083ec:	9a07      	ldr	r2, [sp, #28]
 80083ee:	4654      	mov	r4, sl
 80083f0:	2000      	movs	r0, #0
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4621      	mov	r1, r4
 80083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fc:	3b30      	subs	r3, #48	@ 0x30
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d94b      	bls.n	800849a <_vfiprintf_r+0x1a2>
 8008402:	b1b0      	cbz	r0, 8008432 <_vfiprintf_r+0x13a>
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	e014      	b.n	8008432 <_vfiprintf_r+0x13a>
 8008408:	eba0 0308 	sub.w	r3, r0, r8
 800840c:	fa09 f303 	lsl.w	r3, r9, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	46a2      	mov	sl, r4
 8008416:	e7d2      	b.n	80083be <_vfiprintf_r+0xc6>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1d19      	adds	r1, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	9103      	str	r1, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bfbb      	ittet	lt
 8008424:	425b      	neglt	r3, r3
 8008426:	f042 0202 	orrlt.w	r2, r2, #2
 800842a:	9307      	strge	r3, [sp, #28]
 800842c:	9307      	strlt	r3, [sp, #28]
 800842e:	bfb8      	it	lt
 8008430:	9204      	strlt	r2, [sp, #16]
 8008432:	7823      	ldrb	r3, [r4, #0]
 8008434:	2b2e      	cmp	r3, #46	@ 0x2e
 8008436:	d10a      	bne.n	800844e <_vfiprintf_r+0x156>
 8008438:	7863      	ldrb	r3, [r4, #1]
 800843a:	2b2a      	cmp	r3, #42	@ 0x2a
 800843c:	d132      	bne.n	80084a4 <_vfiprintf_r+0x1ac>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800844a:	3402      	adds	r4, #2
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008524 <_vfiprintf_r+0x22c>
 8008452:	7821      	ldrb	r1, [r4, #0]
 8008454:	2203      	movs	r2, #3
 8008456:	4650      	mov	r0, sl
 8008458:	f7f7 feda 	bl	8000210 <memchr>
 800845c:	b138      	cbz	r0, 800846e <_vfiprintf_r+0x176>
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	eba0 000a 	sub.w	r0, r0, sl
 8008464:	2240      	movs	r2, #64	@ 0x40
 8008466:	4082      	lsls	r2, r0
 8008468:	4313      	orrs	r3, r2
 800846a:	3401      	adds	r4, #1
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008472:	4829      	ldr	r0, [pc, #164]	@ (8008518 <_vfiprintf_r+0x220>)
 8008474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008478:	2206      	movs	r2, #6
 800847a:	f7f7 fec9 	bl	8000210 <memchr>
 800847e:	2800      	cmp	r0, #0
 8008480:	d03f      	beq.n	8008502 <_vfiprintf_r+0x20a>
 8008482:	4b26      	ldr	r3, [pc, #152]	@ (800851c <_vfiprintf_r+0x224>)
 8008484:	bb1b      	cbnz	r3, 80084ce <_vfiprintf_r+0x1d6>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	3307      	adds	r3, #7
 800848a:	f023 0307 	bic.w	r3, r3, #7
 800848e:	3308      	adds	r3, #8
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008494:	443b      	add	r3, r7
 8008496:	9309      	str	r3, [sp, #36]	@ 0x24
 8008498:	e76a      	b.n	8008370 <_vfiprintf_r+0x78>
 800849a:	fb0c 3202 	mla	r2, ip, r2, r3
 800849e:	460c      	mov	r4, r1
 80084a0:	2001      	movs	r0, #1
 80084a2:	e7a8      	b.n	80083f6 <_vfiprintf_r+0xfe>
 80084a4:	2300      	movs	r3, #0
 80084a6:	3401      	adds	r4, #1
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	4619      	mov	r1, r3
 80084ac:	f04f 0c0a 	mov.w	ip, #10
 80084b0:	4620      	mov	r0, r4
 80084b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b6:	3a30      	subs	r2, #48	@ 0x30
 80084b8:	2a09      	cmp	r2, #9
 80084ba:	d903      	bls.n	80084c4 <_vfiprintf_r+0x1cc>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0c6      	beq.n	800844e <_vfiprintf_r+0x156>
 80084c0:	9105      	str	r1, [sp, #20]
 80084c2:	e7c4      	b.n	800844e <_vfiprintf_r+0x156>
 80084c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c8:	4604      	mov	r4, r0
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7f0      	b.n	80084b0 <_vfiprintf_r+0x1b8>
 80084ce:	ab03      	add	r3, sp, #12
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	462a      	mov	r2, r5
 80084d4:	4b12      	ldr	r3, [pc, #72]	@ (8008520 <_vfiprintf_r+0x228>)
 80084d6:	a904      	add	r1, sp, #16
 80084d8:	4630      	mov	r0, r6
 80084da:	f3af 8000 	nop.w
 80084de:	4607      	mov	r7, r0
 80084e0:	1c78      	adds	r0, r7, #1
 80084e2:	d1d6      	bne.n	8008492 <_vfiprintf_r+0x19a>
 80084e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	d405      	bmi.n	80084f6 <_vfiprintf_r+0x1fe>
 80084ea:	89ab      	ldrh	r3, [r5, #12]
 80084ec:	059a      	lsls	r2, r3, #22
 80084ee:	d402      	bmi.n	80084f6 <_vfiprintf_r+0x1fe>
 80084f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084f2:	f7ff fcc1 	bl	8007e78 <__retarget_lock_release_recursive>
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	065b      	lsls	r3, r3, #25
 80084fa:	f53f af1f 	bmi.w	800833c <_vfiprintf_r+0x44>
 80084fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008500:	e71e      	b.n	8008340 <_vfiprintf_r+0x48>
 8008502:	ab03      	add	r3, sp, #12
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	462a      	mov	r2, r5
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <_vfiprintf_r+0x228>)
 800850a:	a904      	add	r1, sp, #16
 800850c:	4630      	mov	r0, r6
 800850e:	f000 f879 	bl	8008604 <_printf_i>
 8008512:	e7e4      	b.n	80084de <_vfiprintf_r+0x1e6>
 8008514:	0800ac60 	.word	0x0800ac60
 8008518:	0800ac6a 	.word	0x0800ac6a
 800851c:	00000000 	.word	0x00000000
 8008520:	080082d3 	.word	0x080082d3
 8008524:	0800ac66 	.word	0x0800ac66

08008528 <_printf_common>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	4616      	mov	r6, r2
 800852e:	4698      	mov	r8, r3
 8008530:	688a      	ldr	r2, [r1, #8]
 8008532:	690b      	ldr	r3, [r1, #16]
 8008534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008538:	4293      	cmp	r3, r2
 800853a:	bfb8      	it	lt
 800853c:	4613      	movlt	r3, r2
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008544:	4607      	mov	r7, r0
 8008546:	460c      	mov	r4, r1
 8008548:	b10a      	cbz	r2, 800854e <_printf_common+0x26>
 800854a:	3301      	adds	r3, #1
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	0699      	lsls	r1, r3, #26
 8008552:	bf42      	ittt	mi
 8008554:	6833      	ldrmi	r3, [r6, #0]
 8008556:	3302      	addmi	r3, #2
 8008558:	6033      	strmi	r3, [r6, #0]
 800855a:	6825      	ldr	r5, [r4, #0]
 800855c:	f015 0506 	ands.w	r5, r5, #6
 8008560:	d106      	bne.n	8008570 <_printf_common+0x48>
 8008562:	f104 0a19 	add.w	sl, r4, #25
 8008566:	68e3      	ldr	r3, [r4, #12]
 8008568:	6832      	ldr	r2, [r6, #0]
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	42ab      	cmp	r3, r5
 800856e:	dc26      	bgt.n	80085be <_printf_common+0x96>
 8008570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	3b00      	subs	r3, #0
 8008578:	bf18      	it	ne
 800857a:	2301      	movne	r3, #1
 800857c:	0692      	lsls	r2, r2, #26
 800857e:	d42b      	bmi.n	80085d8 <_printf_common+0xb0>
 8008580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008584:	4641      	mov	r1, r8
 8008586:	4638      	mov	r0, r7
 8008588:	47c8      	blx	r9
 800858a:	3001      	adds	r0, #1
 800858c:	d01e      	beq.n	80085cc <_printf_common+0xa4>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	6922      	ldr	r2, [r4, #16]
 8008592:	f003 0306 	and.w	r3, r3, #6
 8008596:	2b04      	cmp	r3, #4
 8008598:	bf02      	ittt	eq
 800859a:	68e5      	ldreq	r5, [r4, #12]
 800859c:	6833      	ldreq	r3, [r6, #0]
 800859e:	1aed      	subeq	r5, r5, r3
 80085a0:	68a3      	ldr	r3, [r4, #8]
 80085a2:	bf0c      	ite	eq
 80085a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a8:	2500      	movne	r5, #0
 80085aa:	4293      	cmp	r3, r2
 80085ac:	bfc4      	itt	gt
 80085ae:	1a9b      	subgt	r3, r3, r2
 80085b0:	18ed      	addgt	r5, r5, r3
 80085b2:	2600      	movs	r6, #0
 80085b4:	341a      	adds	r4, #26
 80085b6:	42b5      	cmp	r5, r6
 80085b8:	d11a      	bne.n	80085f0 <_printf_common+0xc8>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e008      	b.n	80085d0 <_printf_common+0xa8>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4641      	mov	r1, r8
 80085c4:	4638      	mov	r0, r7
 80085c6:	47c8      	blx	r9
 80085c8:	3001      	adds	r0, #1
 80085ca:	d103      	bne.n	80085d4 <_printf_common+0xac>
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	3501      	adds	r5, #1
 80085d6:	e7c6      	b.n	8008566 <_printf_common+0x3e>
 80085d8:	18e1      	adds	r1, r4, r3
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	2030      	movs	r0, #48	@ 0x30
 80085de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085e2:	4422      	add	r2, r4
 80085e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085ec:	3302      	adds	r3, #2
 80085ee:	e7c7      	b.n	8008580 <_printf_common+0x58>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4622      	mov	r2, r4
 80085f4:	4641      	mov	r1, r8
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c8      	blx	r9
 80085fa:	3001      	adds	r0, #1
 80085fc:	d0e6      	beq.n	80085cc <_printf_common+0xa4>
 80085fe:	3601      	adds	r6, #1
 8008600:	e7d9      	b.n	80085b6 <_printf_common+0x8e>
	...

08008604 <_printf_i>:
 8008604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	7e0f      	ldrb	r7, [r1, #24]
 800860a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800860c:	2f78      	cmp	r7, #120	@ 0x78
 800860e:	4691      	mov	r9, r2
 8008610:	4680      	mov	r8, r0
 8008612:	460c      	mov	r4, r1
 8008614:	469a      	mov	sl, r3
 8008616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800861a:	d807      	bhi.n	800862c <_printf_i+0x28>
 800861c:	2f62      	cmp	r7, #98	@ 0x62
 800861e:	d80a      	bhi.n	8008636 <_printf_i+0x32>
 8008620:	2f00      	cmp	r7, #0
 8008622:	f000 80d1 	beq.w	80087c8 <_printf_i+0x1c4>
 8008626:	2f58      	cmp	r7, #88	@ 0x58
 8008628:	f000 80b8 	beq.w	800879c <_printf_i+0x198>
 800862c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008634:	e03a      	b.n	80086ac <_printf_i+0xa8>
 8008636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800863a:	2b15      	cmp	r3, #21
 800863c:	d8f6      	bhi.n	800862c <_printf_i+0x28>
 800863e:	a101      	add	r1, pc, #4	@ (adr r1, 8008644 <_printf_i+0x40>)
 8008640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008644:	0800869d 	.word	0x0800869d
 8008648:	080086b1 	.word	0x080086b1
 800864c:	0800862d 	.word	0x0800862d
 8008650:	0800862d 	.word	0x0800862d
 8008654:	0800862d 	.word	0x0800862d
 8008658:	0800862d 	.word	0x0800862d
 800865c:	080086b1 	.word	0x080086b1
 8008660:	0800862d 	.word	0x0800862d
 8008664:	0800862d 	.word	0x0800862d
 8008668:	0800862d 	.word	0x0800862d
 800866c:	0800862d 	.word	0x0800862d
 8008670:	080087af 	.word	0x080087af
 8008674:	080086db 	.word	0x080086db
 8008678:	08008769 	.word	0x08008769
 800867c:	0800862d 	.word	0x0800862d
 8008680:	0800862d 	.word	0x0800862d
 8008684:	080087d1 	.word	0x080087d1
 8008688:	0800862d 	.word	0x0800862d
 800868c:	080086db 	.word	0x080086db
 8008690:	0800862d 	.word	0x0800862d
 8008694:	0800862d 	.word	0x0800862d
 8008698:	08008771 	.word	0x08008771
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	1d1a      	adds	r2, r3, #4
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6032      	str	r2, [r6, #0]
 80086a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086ac:	2301      	movs	r3, #1
 80086ae:	e09c      	b.n	80087ea <_printf_i+0x1e6>
 80086b0:	6833      	ldr	r3, [r6, #0]
 80086b2:	6820      	ldr	r0, [r4, #0]
 80086b4:	1d19      	adds	r1, r3, #4
 80086b6:	6031      	str	r1, [r6, #0]
 80086b8:	0606      	lsls	r6, r0, #24
 80086ba:	d501      	bpl.n	80086c0 <_printf_i+0xbc>
 80086bc:	681d      	ldr	r5, [r3, #0]
 80086be:	e003      	b.n	80086c8 <_printf_i+0xc4>
 80086c0:	0645      	lsls	r5, r0, #25
 80086c2:	d5fb      	bpl.n	80086bc <_printf_i+0xb8>
 80086c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	da03      	bge.n	80086d4 <_printf_i+0xd0>
 80086cc:	232d      	movs	r3, #45	@ 0x2d
 80086ce:	426d      	negs	r5, r5
 80086d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086d4:	4858      	ldr	r0, [pc, #352]	@ (8008838 <_printf_i+0x234>)
 80086d6:	230a      	movs	r3, #10
 80086d8:	e011      	b.n	80086fe <_printf_i+0xfa>
 80086da:	6821      	ldr	r1, [r4, #0]
 80086dc:	6833      	ldr	r3, [r6, #0]
 80086de:	0608      	lsls	r0, r1, #24
 80086e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80086e4:	d402      	bmi.n	80086ec <_printf_i+0xe8>
 80086e6:	0649      	lsls	r1, r1, #25
 80086e8:	bf48      	it	mi
 80086ea:	b2ad      	uxthmi	r5, r5
 80086ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ee:	4852      	ldr	r0, [pc, #328]	@ (8008838 <_printf_i+0x234>)
 80086f0:	6033      	str	r3, [r6, #0]
 80086f2:	bf14      	ite	ne
 80086f4:	230a      	movne	r3, #10
 80086f6:	2308      	moveq	r3, #8
 80086f8:	2100      	movs	r1, #0
 80086fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086fe:	6866      	ldr	r6, [r4, #4]
 8008700:	60a6      	str	r6, [r4, #8]
 8008702:	2e00      	cmp	r6, #0
 8008704:	db05      	blt.n	8008712 <_printf_i+0x10e>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	432e      	orrs	r6, r5
 800870a:	f021 0104 	bic.w	r1, r1, #4
 800870e:	6021      	str	r1, [r4, #0]
 8008710:	d04b      	beq.n	80087aa <_printf_i+0x1a6>
 8008712:	4616      	mov	r6, r2
 8008714:	fbb5 f1f3 	udiv	r1, r5, r3
 8008718:	fb03 5711 	mls	r7, r3, r1, r5
 800871c:	5dc7      	ldrb	r7, [r0, r7]
 800871e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008722:	462f      	mov	r7, r5
 8008724:	42bb      	cmp	r3, r7
 8008726:	460d      	mov	r5, r1
 8008728:	d9f4      	bls.n	8008714 <_printf_i+0x110>
 800872a:	2b08      	cmp	r3, #8
 800872c:	d10b      	bne.n	8008746 <_printf_i+0x142>
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	07df      	lsls	r7, r3, #31
 8008732:	d508      	bpl.n	8008746 <_printf_i+0x142>
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	6861      	ldr	r1, [r4, #4]
 8008738:	4299      	cmp	r1, r3
 800873a:	bfde      	ittt	le
 800873c:	2330      	movle	r3, #48	@ 0x30
 800873e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008742:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008746:	1b92      	subs	r2, r2, r6
 8008748:	6122      	str	r2, [r4, #16]
 800874a:	f8cd a000 	str.w	sl, [sp]
 800874e:	464b      	mov	r3, r9
 8008750:	aa03      	add	r2, sp, #12
 8008752:	4621      	mov	r1, r4
 8008754:	4640      	mov	r0, r8
 8008756:	f7ff fee7 	bl	8008528 <_printf_common>
 800875a:	3001      	adds	r0, #1
 800875c:	d14a      	bne.n	80087f4 <_printf_i+0x1f0>
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	b004      	add	sp, #16
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	f043 0320 	orr.w	r3, r3, #32
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	4832      	ldr	r0, [pc, #200]	@ (800883c <_printf_i+0x238>)
 8008772:	2778      	movs	r7, #120	@ 0x78
 8008774:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	6831      	ldr	r1, [r6, #0]
 800877c:	061f      	lsls	r7, r3, #24
 800877e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008782:	d402      	bmi.n	800878a <_printf_i+0x186>
 8008784:	065f      	lsls	r7, r3, #25
 8008786:	bf48      	it	mi
 8008788:	b2ad      	uxthmi	r5, r5
 800878a:	6031      	str	r1, [r6, #0]
 800878c:	07d9      	lsls	r1, r3, #31
 800878e:	bf44      	itt	mi
 8008790:	f043 0320 	orrmi.w	r3, r3, #32
 8008794:	6023      	strmi	r3, [r4, #0]
 8008796:	b11d      	cbz	r5, 80087a0 <_printf_i+0x19c>
 8008798:	2310      	movs	r3, #16
 800879a:	e7ad      	b.n	80086f8 <_printf_i+0xf4>
 800879c:	4826      	ldr	r0, [pc, #152]	@ (8008838 <_printf_i+0x234>)
 800879e:	e7e9      	b.n	8008774 <_printf_i+0x170>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	f023 0320 	bic.w	r3, r3, #32
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	e7f6      	b.n	8008798 <_printf_i+0x194>
 80087aa:	4616      	mov	r6, r2
 80087ac:	e7bd      	b.n	800872a <_printf_i+0x126>
 80087ae:	6833      	ldr	r3, [r6, #0]
 80087b0:	6825      	ldr	r5, [r4, #0]
 80087b2:	6961      	ldr	r1, [r4, #20]
 80087b4:	1d18      	adds	r0, r3, #4
 80087b6:	6030      	str	r0, [r6, #0]
 80087b8:	062e      	lsls	r6, r5, #24
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	d501      	bpl.n	80087c2 <_printf_i+0x1be>
 80087be:	6019      	str	r1, [r3, #0]
 80087c0:	e002      	b.n	80087c8 <_printf_i+0x1c4>
 80087c2:	0668      	lsls	r0, r5, #25
 80087c4:	d5fb      	bpl.n	80087be <_printf_i+0x1ba>
 80087c6:	8019      	strh	r1, [r3, #0]
 80087c8:	2300      	movs	r3, #0
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	4616      	mov	r6, r2
 80087ce:	e7bc      	b.n	800874a <_printf_i+0x146>
 80087d0:	6833      	ldr	r3, [r6, #0]
 80087d2:	1d1a      	adds	r2, r3, #4
 80087d4:	6032      	str	r2, [r6, #0]
 80087d6:	681e      	ldr	r6, [r3, #0]
 80087d8:	6862      	ldr	r2, [r4, #4]
 80087da:	2100      	movs	r1, #0
 80087dc:	4630      	mov	r0, r6
 80087de:	f7f7 fd17 	bl	8000210 <memchr>
 80087e2:	b108      	cbz	r0, 80087e8 <_printf_i+0x1e4>
 80087e4:	1b80      	subs	r0, r0, r6
 80087e6:	6060      	str	r0, [r4, #4]
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	2300      	movs	r3, #0
 80087ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087f2:	e7aa      	b.n	800874a <_printf_i+0x146>
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	4632      	mov	r2, r6
 80087f8:	4649      	mov	r1, r9
 80087fa:	4640      	mov	r0, r8
 80087fc:	47d0      	blx	sl
 80087fe:	3001      	adds	r0, #1
 8008800:	d0ad      	beq.n	800875e <_printf_i+0x15a>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	079b      	lsls	r3, r3, #30
 8008806:	d413      	bmi.n	8008830 <_printf_i+0x22c>
 8008808:	68e0      	ldr	r0, [r4, #12]
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	4298      	cmp	r0, r3
 800880e:	bfb8      	it	lt
 8008810:	4618      	movlt	r0, r3
 8008812:	e7a6      	b.n	8008762 <_printf_i+0x15e>
 8008814:	2301      	movs	r3, #1
 8008816:	4632      	mov	r2, r6
 8008818:	4649      	mov	r1, r9
 800881a:	4640      	mov	r0, r8
 800881c:	47d0      	blx	sl
 800881e:	3001      	adds	r0, #1
 8008820:	d09d      	beq.n	800875e <_printf_i+0x15a>
 8008822:	3501      	adds	r5, #1
 8008824:	68e3      	ldr	r3, [r4, #12]
 8008826:	9903      	ldr	r1, [sp, #12]
 8008828:	1a5b      	subs	r3, r3, r1
 800882a:	42ab      	cmp	r3, r5
 800882c:	dcf2      	bgt.n	8008814 <_printf_i+0x210>
 800882e:	e7eb      	b.n	8008808 <_printf_i+0x204>
 8008830:	2500      	movs	r5, #0
 8008832:	f104 0619 	add.w	r6, r4, #25
 8008836:	e7f5      	b.n	8008824 <_printf_i+0x220>
 8008838:	0800ac71 	.word	0x0800ac71
 800883c:	0800ac82 	.word	0x0800ac82

08008840 <__sflush_r>:
 8008840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	0716      	lsls	r6, r2, #28
 800884a:	4605      	mov	r5, r0
 800884c:	460c      	mov	r4, r1
 800884e:	d454      	bmi.n	80088fa <__sflush_r+0xba>
 8008850:	684b      	ldr	r3, [r1, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	dc02      	bgt.n	800885c <__sflush_r+0x1c>
 8008856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008858:	2b00      	cmp	r3, #0
 800885a:	dd48      	ble.n	80088ee <__sflush_r+0xae>
 800885c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800885e:	2e00      	cmp	r6, #0
 8008860:	d045      	beq.n	80088ee <__sflush_r+0xae>
 8008862:	2300      	movs	r3, #0
 8008864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008868:	682f      	ldr	r7, [r5, #0]
 800886a:	6a21      	ldr	r1, [r4, #32]
 800886c:	602b      	str	r3, [r5, #0]
 800886e:	d030      	beq.n	80088d2 <__sflush_r+0x92>
 8008870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	0759      	lsls	r1, r3, #29
 8008876:	d505      	bpl.n	8008884 <__sflush_r+0x44>
 8008878:	6863      	ldr	r3, [r4, #4]
 800887a:	1ad2      	subs	r2, r2, r3
 800887c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800887e:	b10b      	cbz	r3, 8008884 <__sflush_r+0x44>
 8008880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	2300      	movs	r3, #0
 8008886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008888:	6a21      	ldr	r1, [r4, #32]
 800888a:	4628      	mov	r0, r5
 800888c:	47b0      	blx	r6
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	d106      	bne.n	80088a2 <__sflush_r+0x62>
 8008894:	6829      	ldr	r1, [r5, #0]
 8008896:	291d      	cmp	r1, #29
 8008898:	d82b      	bhi.n	80088f2 <__sflush_r+0xb2>
 800889a:	4a2a      	ldr	r2, [pc, #168]	@ (8008944 <__sflush_r+0x104>)
 800889c:	40ca      	lsrs	r2, r1
 800889e:	07d6      	lsls	r6, r2, #31
 80088a0:	d527      	bpl.n	80088f2 <__sflush_r+0xb2>
 80088a2:	2200      	movs	r2, #0
 80088a4:	6062      	str	r2, [r4, #4]
 80088a6:	04d9      	lsls	r1, r3, #19
 80088a8:	6922      	ldr	r2, [r4, #16]
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	d504      	bpl.n	80088b8 <__sflush_r+0x78>
 80088ae:	1c42      	adds	r2, r0, #1
 80088b0:	d101      	bne.n	80088b6 <__sflush_r+0x76>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	b903      	cbnz	r3, 80088b8 <__sflush_r+0x78>
 80088b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80088b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088ba:	602f      	str	r7, [r5, #0]
 80088bc:	b1b9      	cbz	r1, 80088ee <__sflush_r+0xae>
 80088be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d002      	beq.n	80088cc <__sflush_r+0x8c>
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff fb4a 	bl	8007f60 <_free_r>
 80088cc:	2300      	movs	r3, #0
 80088ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80088d0:	e00d      	b.n	80088ee <__sflush_r+0xae>
 80088d2:	2301      	movs	r3, #1
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b0      	blx	r6
 80088d8:	4602      	mov	r2, r0
 80088da:	1c50      	adds	r0, r2, #1
 80088dc:	d1c9      	bne.n	8008872 <__sflush_r+0x32>
 80088de:	682b      	ldr	r3, [r5, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0c6      	beq.n	8008872 <__sflush_r+0x32>
 80088e4:	2b1d      	cmp	r3, #29
 80088e6:	d001      	beq.n	80088ec <__sflush_r+0xac>
 80088e8:	2b16      	cmp	r3, #22
 80088ea:	d11e      	bne.n	800892a <__sflush_r+0xea>
 80088ec:	602f      	str	r7, [r5, #0]
 80088ee:	2000      	movs	r0, #0
 80088f0:	e022      	b.n	8008938 <__sflush_r+0xf8>
 80088f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f6:	b21b      	sxth	r3, r3
 80088f8:	e01b      	b.n	8008932 <__sflush_r+0xf2>
 80088fa:	690f      	ldr	r7, [r1, #16]
 80088fc:	2f00      	cmp	r7, #0
 80088fe:	d0f6      	beq.n	80088ee <__sflush_r+0xae>
 8008900:	0793      	lsls	r3, r2, #30
 8008902:	680e      	ldr	r6, [r1, #0]
 8008904:	bf08      	it	eq
 8008906:	694b      	ldreq	r3, [r1, #20]
 8008908:	600f      	str	r7, [r1, #0]
 800890a:	bf18      	it	ne
 800890c:	2300      	movne	r3, #0
 800890e:	eba6 0807 	sub.w	r8, r6, r7
 8008912:	608b      	str	r3, [r1, #8]
 8008914:	f1b8 0f00 	cmp.w	r8, #0
 8008918:	dde9      	ble.n	80088ee <__sflush_r+0xae>
 800891a:	6a21      	ldr	r1, [r4, #32]
 800891c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800891e:	4643      	mov	r3, r8
 8008920:	463a      	mov	r2, r7
 8008922:	4628      	mov	r0, r5
 8008924:	47b0      	blx	r6
 8008926:	2800      	cmp	r0, #0
 8008928:	dc08      	bgt.n	800893c <__sflush_r+0xfc>
 800892a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800892e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893c:	4407      	add	r7, r0
 800893e:	eba8 0800 	sub.w	r8, r8, r0
 8008942:	e7e7      	b.n	8008914 <__sflush_r+0xd4>
 8008944:	20400001 	.word	0x20400001

08008948 <_fflush_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	690b      	ldr	r3, [r1, #16]
 800894c:	4605      	mov	r5, r0
 800894e:	460c      	mov	r4, r1
 8008950:	b913      	cbnz	r3, 8008958 <_fflush_r+0x10>
 8008952:	2500      	movs	r5, #0
 8008954:	4628      	mov	r0, r5
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	b118      	cbz	r0, 8008962 <_fflush_r+0x1a>
 800895a:	6a03      	ldr	r3, [r0, #32]
 800895c:	b90b      	cbnz	r3, 8008962 <_fflush_r+0x1a>
 800895e:	f7ff f8d3 	bl	8007b08 <__sinit>
 8008962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f3      	beq.n	8008952 <_fflush_r+0xa>
 800896a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800896c:	07d0      	lsls	r0, r2, #31
 800896e:	d404      	bmi.n	800897a <_fflush_r+0x32>
 8008970:	0599      	lsls	r1, r3, #22
 8008972:	d402      	bmi.n	800897a <_fflush_r+0x32>
 8008974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008976:	f7ff fa7e 	bl	8007e76 <__retarget_lock_acquire_recursive>
 800897a:	4628      	mov	r0, r5
 800897c:	4621      	mov	r1, r4
 800897e:	f7ff ff5f 	bl	8008840 <__sflush_r>
 8008982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008984:	07da      	lsls	r2, r3, #31
 8008986:	4605      	mov	r5, r0
 8008988:	d4e4      	bmi.n	8008954 <_fflush_r+0xc>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	059b      	lsls	r3, r3, #22
 800898e:	d4e1      	bmi.n	8008954 <_fflush_r+0xc>
 8008990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008992:	f7ff fa71 	bl	8007e78 <__retarget_lock_release_recursive>
 8008996:	e7dd      	b.n	8008954 <_fflush_r+0xc>

08008998 <__swbuf_r>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	460e      	mov	r6, r1
 800899c:	4614      	mov	r4, r2
 800899e:	4605      	mov	r5, r0
 80089a0:	b118      	cbz	r0, 80089aa <__swbuf_r+0x12>
 80089a2:	6a03      	ldr	r3, [r0, #32]
 80089a4:	b90b      	cbnz	r3, 80089aa <__swbuf_r+0x12>
 80089a6:	f7ff f8af 	bl	8007b08 <__sinit>
 80089aa:	69a3      	ldr	r3, [r4, #24]
 80089ac:	60a3      	str	r3, [r4, #8]
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	071a      	lsls	r2, r3, #28
 80089b2:	d501      	bpl.n	80089b8 <__swbuf_r+0x20>
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	b943      	cbnz	r3, 80089ca <__swbuf_r+0x32>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 f82a 	bl	8008a14 <__swsetup_r>
 80089c0:	b118      	cbz	r0, 80089ca <__swbuf_r+0x32>
 80089c2:	f04f 37ff 	mov.w	r7, #4294967295
 80089c6:	4638      	mov	r0, r7
 80089c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	6922      	ldr	r2, [r4, #16]
 80089ce:	1a98      	subs	r0, r3, r2
 80089d0:	6963      	ldr	r3, [r4, #20]
 80089d2:	b2f6      	uxtb	r6, r6
 80089d4:	4283      	cmp	r3, r0
 80089d6:	4637      	mov	r7, r6
 80089d8:	dc05      	bgt.n	80089e6 <__swbuf_r+0x4e>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f7ff ffb3 	bl	8008948 <_fflush_r>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d1ed      	bne.n	80089c2 <__swbuf_r+0x2a>
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	701e      	strb	r6, [r3, #0]
 80089f4:	6962      	ldr	r2, [r4, #20]
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d004      	beq.n	8008a06 <__swbuf_r+0x6e>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	07db      	lsls	r3, r3, #31
 8008a00:	d5e1      	bpl.n	80089c6 <__swbuf_r+0x2e>
 8008a02:	2e0a      	cmp	r6, #10
 8008a04:	d1df      	bne.n	80089c6 <__swbuf_r+0x2e>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f7ff ff9d 	bl	8008948 <_fflush_r>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d0d9      	beq.n	80089c6 <__swbuf_r+0x2e>
 8008a12:	e7d6      	b.n	80089c2 <__swbuf_r+0x2a>

08008a14 <__swsetup_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4b29      	ldr	r3, [pc, #164]	@ (8008abc <__swsetup_r+0xa8>)
 8008a18:	4605      	mov	r5, r0
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	b118      	cbz	r0, 8008a28 <__swsetup_r+0x14>
 8008a20:	6a03      	ldr	r3, [r0, #32]
 8008a22:	b90b      	cbnz	r3, 8008a28 <__swsetup_r+0x14>
 8008a24:	f7ff f870 	bl	8007b08 <__sinit>
 8008a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2c:	0719      	lsls	r1, r3, #28
 8008a2e:	d422      	bmi.n	8008a76 <__swsetup_r+0x62>
 8008a30:	06da      	lsls	r2, r3, #27
 8008a32:	d407      	bmi.n	8008a44 <__swsetup_r+0x30>
 8008a34:	2209      	movs	r2, #9
 8008a36:	602a      	str	r2, [r5, #0]
 8008a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a42:	e033      	b.n	8008aac <__swsetup_r+0x98>
 8008a44:	0758      	lsls	r0, r3, #29
 8008a46:	d512      	bpl.n	8008a6e <__swsetup_r+0x5a>
 8008a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a4a:	b141      	cbz	r1, 8008a5e <__swsetup_r+0x4a>
 8008a4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a50:	4299      	cmp	r1, r3
 8008a52:	d002      	beq.n	8008a5a <__swsetup_r+0x46>
 8008a54:	4628      	mov	r0, r5
 8008a56:	f7ff fa83 	bl	8007f60 <_free_r>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	2300      	movs	r3, #0
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f043 0308 	orr.w	r3, r3, #8
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	b94b      	cbnz	r3, 8008a8e <__swsetup_r+0x7a>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a84:	d003      	beq.n	8008a8e <__swsetup_r+0x7a>
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 f887 	bl	8008b9c <__smakebuf_r>
 8008a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a92:	f013 0201 	ands.w	r2, r3, #1
 8008a96:	d00a      	beq.n	8008aae <__swsetup_r+0x9a>
 8008a98:	2200      	movs	r2, #0
 8008a9a:	60a2      	str	r2, [r4, #8]
 8008a9c:	6962      	ldr	r2, [r4, #20]
 8008a9e:	4252      	negs	r2, r2
 8008aa0:	61a2      	str	r2, [r4, #24]
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	b942      	cbnz	r2, 8008ab8 <__swsetup_r+0xa4>
 8008aa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aaa:	d1c5      	bne.n	8008a38 <__swsetup_r+0x24>
 8008aac:	bd38      	pop	{r3, r4, r5, pc}
 8008aae:	0799      	lsls	r1, r3, #30
 8008ab0:	bf58      	it	pl
 8008ab2:	6962      	ldrpl	r2, [r4, #20]
 8008ab4:	60a2      	str	r2, [r4, #8]
 8008ab6:	e7f4      	b.n	8008aa2 <__swsetup_r+0x8e>
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e7f7      	b.n	8008aac <__swsetup_r+0x98>
 8008abc:	20000028 	.word	0x20000028

08008ac0 <memmove>:
 8008ac0:	4288      	cmp	r0, r1
 8008ac2:	b510      	push	{r4, lr}
 8008ac4:	eb01 0402 	add.w	r4, r1, r2
 8008ac8:	d902      	bls.n	8008ad0 <memmove+0x10>
 8008aca:	4284      	cmp	r4, r0
 8008acc:	4623      	mov	r3, r4
 8008ace:	d807      	bhi.n	8008ae0 <memmove+0x20>
 8008ad0:	1e43      	subs	r3, r0, #1
 8008ad2:	42a1      	cmp	r1, r4
 8008ad4:	d008      	beq.n	8008ae8 <memmove+0x28>
 8008ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ade:	e7f8      	b.n	8008ad2 <memmove+0x12>
 8008ae0:	4402      	add	r2, r0
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	428a      	cmp	r2, r1
 8008ae6:	d100      	bne.n	8008aea <memmove+0x2a>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008af2:	e7f7      	b.n	8008ae4 <memmove+0x24>

08008af4 <_realloc_r>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	4607      	mov	r7, r0
 8008afa:	4614      	mov	r4, r2
 8008afc:	460d      	mov	r5, r1
 8008afe:	b921      	cbnz	r1, 8008b0a <_realloc_r+0x16>
 8008b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	4611      	mov	r1, r2
 8008b06:	f7fe bee7 	b.w	80078d8 <_malloc_r>
 8008b0a:	b92a      	cbnz	r2, 8008b18 <_realloc_r+0x24>
 8008b0c:	f7ff fa28 	bl	8007f60 <_free_r>
 8008b10:	4625      	mov	r5, r4
 8008b12:	4628      	mov	r0, r5
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	f000 f89e 	bl	8008c58 <_malloc_usable_size_r>
 8008b1c:	4284      	cmp	r4, r0
 8008b1e:	4606      	mov	r6, r0
 8008b20:	d802      	bhi.n	8008b28 <_realloc_r+0x34>
 8008b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b26:	d8f4      	bhi.n	8008b12 <_realloc_r+0x1e>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f7fe fed4 	bl	80078d8 <_malloc_r>
 8008b30:	4680      	mov	r8, r0
 8008b32:	b908      	cbnz	r0, 8008b38 <_realloc_r+0x44>
 8008b34:	4645      	mov	r5, r8
 8008b36:	e7ec      	b.n	8008b12 <_realloc_r+0x1e>
 8008b38:	42b4      	cmp	r4, r6
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	bf28      	it	cs
 8008b40:	4632      	movcs	r2, r6
 8008b42:	f7ff f9a2 	bl	8007e8a <memcpy>
 8008b46:	4629      	mov	r1, r5
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f7ff fa09 	bl	8007f60 <_free_r>
 8008b4e:	e7f1      	b.n	8008b34 <_realloc_r+0x40>

08008b50 <__swhatbuf_r>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	460c      	mov	r4, r1
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	b096      	sub	sp, #88	@ 0x58
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	461e      	mov	r6, r3
 8008b60:	da0d      	bge.n	8008b7e <__swhatbuf_r+0x2e>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b68:	f04f 0100 	mov.w	r1, #0
 8008b6c:	bf14      	ite	ne
 8008b6e:	2340      	movne	r3, #64	@ 0x40
 8008b70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b74:	2000      	movs	r0, #0
 8008b76:	6031      	str	r1, [r6, #0]
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	b016      	add	sp, #88	@ 0x58
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	466a      	mov	r2, sp
 8008b80:	f000 f848 	bl	8008c14 <_fstat_r>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	dbec      	blt.n	8008b62 <__swhatbuf_r+0x12>
 8008b88:	9901      	ldr	r1, [sp, #4]
 8008b8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b92:	4259      	negs	r1, r3
 8008b94:	4159      	adcs	r1, r3
 8008b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b9a:	e7eb      	b.n	8008b74 <__swhatbuf_r+0x24>

08008b9c <__smakebuf_r>:
 8008b9c:	898b      	ldrh	r3, [r1, #12]
 8008b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ba0:	079d      	lsls	r5, r3, #30
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	d507      	bpl.n	8008bb8 <__smakebuf_r+0x1c>
 8008ba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	6163      	str	r3, [r4, #20]
 8008bb4:	b003      	add	sp, #12
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	ab01      	add	r3, sp, #4
 8008bba:	466a      	mov	r2, sp
 8008bbc:	f7ff ffc8 	bl	8008b50 <__swhatbuf_r>
 8008bc0:	9f00      	ldr	r7, [sp, #0]
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f7fe fe86 	bl	80078d8 <_malloc_r>
 8008bcc:	b948      	cbnz	r0, 8008be2 <__smakebuf_r+0x46>
 8008bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd2:	059a      	lsls	r2, r3, #22
 8008bd4:	d4ee      	bmi.n	8008bb4 <__smakebuf_r+0x18>
 8008bd6:	f023 0303 	bic.w	r3, r3, #3
 8008bda:	f043 0302 	orr.w	r3, r3, #2
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	e7e2      	b.n	8008ba8 <__smakebuf_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	6020      	str	r0, [r4, #0]
 8008be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	9b01      	ldr	r3, [sp, #4]
 8008bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bf2:	b15b      	cbz	r3, 8008c0c <__smakebuf_r+0x70>
 8008bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 f81d 	bl	8008c38 <_isatty_r>
 8008bfe:	b128      	cbz	r0, 8008c0c <__smakebuf_r+0x70>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	431d      	orrs	r5, r3
 8008c10:	81a5      	strh	r5, [r4, #12]
 8008c12:	e7cf      	b.n	8008bb4 <__smakebuf_r+0x18>

08008c14 <_fstat_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d07      	ldr	r5, [pc, #28]	@ (8008c34 <_fstat_r+0x20>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	4611      	mov	r1, r2
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	f7f9 ffeb 	bl	8002bfc <_fstat>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d102      	bne.n	8008c30 <_fstat_r+0x1c>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b103      	cbz	r3, 8008c30 <_fstat_r+0x1c>
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	bd38      	pop	{r3, r4, r5, pc}
 8008c32:	bf00      	nop
 8008c34:	200004b4 	.word	0x200004b4

08008c38 <_isatty_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	4d06      	ldr	r5, [pc, #24]	@ (8008c54 <_isatty_r+0x1c>)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4604      	mov	r4, r0
 8008c40:	4608      	mov	r0, r1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	f7f9 ffea 	bl	8002c1c <_isatty>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_isatty_r+0x1a>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_isatty_r+0x1a>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200004b4 	.word	0x200004b4

08008c58 <_malloc_usable_size_r>:
 8008c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c5c:	1f18      	subs	r0, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bfbc      	itt	lt
 8008c62:	580b      	ldrlt	r3, [r1, r0]
 8008c64:	18c0      	addlt	r0, r0, r3
 8008c66:	4770      	bx	lr

08008c68 <_init>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr
